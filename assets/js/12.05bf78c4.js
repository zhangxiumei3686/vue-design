(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{73:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),t._m(34),t._m(35),t._m(36),t._m(37),t._m(38),t._m(39),t._m(40),t._m(41),t._m(42),t._m(43),t._m(44),t._m(45),t._m(46),t._m(47),t._m(48),t._m(49),t._m(50),t._m(51),t._m(52),t._m(53),t._m(54),t._m(55),t._m(56),t._m(57),t._m(58),t._m(59),t._m(60),t._m(61),t._m(62),t._m(63),t._m(64),t._m(65),t._m(66),t._m(67),t._m(68),t._m(69),t._m(70),t._m(71),t._m(72),t._m(73),t._m(74),t._m(75),t._m(76),t._m(77),t._m(78),t._m(79),t._m(80),a("p",[t._v("其源码如下：")]),t._m(81),t._m(82),t._m(83),t._m(84),t._m(85),a("p",[t._v("源码如下：")]),t._m(86),t._m(87),t._m(88),t._m(89),t._m(90),t._m(91),t._m(92),t._m(93),t._m(94),t._m(95),t._m(96),t._m(97),a("p",[t._v("源码如下：")]),t._m(98),t._m(99),t._m(100),t._m(101),a("p",[t._v("源码如下：")]),t._m(102),t._m(103),t._m(104),t._m(105),t._m(106),a("p",[t._v("源码如下：")]),t._m(107),t._m(108),t._m(109),a("p",[t._v("源码如下：")]),t._m(110),a("p",[t._v("该正则用来匹配修饰符的，但是并没有捕获任何东西，举例如下：")]),t._m(111),t._m(112),t._m(113),t._m(114),a("p",[t._v("源码如下：")]),t._m(115),t._m(116),t._m(117),t._m(118),t._m(119),t._m(120),a("p",[t._v("再往下，定义了一些平台化的选项变量，如下：")]),t._m(121),t._m(122),t._m(123),t._m(124),t._m(125),t._m(126),t._m(127),t._m(128),t._m(129),t._m(130),t._m(131),t._m(132),t._m(133),a("p",[t._v("最终创建出来的元素描述对象如下：")]),t._m(134),t._m(135),t._m(136),t._m(137),t._m(138),t._m(139),t._m(140),t._m(141),t._m(142),t._m(143),t._m(144),t._m(145),t._m(146),t._m(147),t._m(148),t._m(149),t._m(150),a("p",[t._v("我们从上至下一点点来看，首先是如下这段代码：")]),t._m(151),a("p",[t._v("前面说过，这段代码为 "),a("code",[t._v("8")]),t._v(" 个平台化的变量初始化了值，并且这些变量的值基本都来自编译器选项参数。我们在编译器初探一节中讲解 "),a("router-link",{attrs:{to:"./80vue-compiler-start.html#compile-的作用"}},[t._v("compile 函数的作用")]),t._v(" 时附带讲解了编译器各个选项参数都是什么，所以接下来不会深入说明，如果大家忘记了那么可以回头查看。")],1),t._m(152),t._m(153),t._m(154),t._m(155),t._m(156),t._m(157),t._m(158),t._m(159),t._m(160),t._m(161),t._m(162),t._m(163),t._m(164),t._m(165),t._m(166),t._m(167),t._m(168),t._m(169),t._m(170),t._m(171),t._m(172),t._m(173),t._m(174),t._m(175),t._m(176),t._m(177),a("p",[t._v("如上代码等价于：")]),t._m(178),a("p",[t._v("我们先看这句代码：")]),t._m(179),a("p",[t._v("这句代码会创建一个新的数组：")]),t._m(180),t._m(181),t._m(182),t._m(183),t._m(184),t._m(185),t._m(186),t._m(187),t._m(188),t._m(189),t._m(190),t._m(191),t._m(192),t._m(193),t._m(194),t._m(195),t._m(196),a("p",[t._v("在如上讲解的八个平台化变量的下面，又定义了一些常量和变量，如下：")]),t._m(197),t._m(198),t._m(199),t._m(200),t._m(201),t._m(202),t._m(203),t._m(204),a("p",[t._v("每当遇到一个标签的结束标签时，或遇到一元标签时都会调用该方法“闭合”标签，具体功能我们在后面的内容中详细讲解。")]),t._m(205),t._m(206),a("p",[t._v("我们在 "),a("router-link",{attrs:{to:"./81vue-lexical-analysis.html"}},[t._v("词法分析 - 为生成AST做准备")]),t._v(" 一章中讲解 "),a("code",[t._v("parseHTML")]),t._v(" 函数时已经顺带分析了所有选项的作用。其中对于构建 "),a("code",[t._v("AST")]),t._v(" 来说最关键的选项就是四个钩子函数选项：")],1),t._m(207),t._m(208),t._m(209),t._m(210),t._m(211),t._m(212),t._m(213),t._m(214),t._m(215),t._m(216),t._m(217),t._m(218),t._m(219),t._m(220),t._m(221),t._m(222),t._m(223),t._m(224),a("p",[a("router-link",{attrs:{to:"../appendix/core-util.html#isie"}},[t._v("isIE")]),t._v(" 函数用来判断当前宿主环境是否是 "),a("code",[t._v("IE")]),t._v(" 浏览器，如果是 "),a("code",[t._v("IE")]),t._v(" 浏览器并且当前元素的命名空间为 "),a("code",[t._v("svg")]),t._v("，则会调用 "),a("code",[t._v("guardIESVGBug")]),t._v(" 函数处理当前元素的属性数组 "),a("code",[t._v("attrs")]),t._v("，并使用处理后的结果重新赋值给 "),a("code",[t._v("attrs")]),t._v(" 变量。这看上去像是在处理 "),a("code",[t._v("IE")]),t._v(" 浏览器中关于 "),a("code",[t._v("svg")]),t._v(" 标签的 "),a("code",[t._v("bug")]),t._v("，实际上确实是这样的，大家可以访问 "),a("a",{attrs:{href:"http://osgeo-org.1560.x6.nabble.com/WFS-and-IE-11-td5090636.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("IE 11 bug")]),t._v(" 了解这个问题的详情，该问题是 "),a("code",[t._v("svg")]),t._v(" 标签中渲染多余的属性，如下 "),a("code",[t._v("svg")]),t._v(" 标签：")],1),t._m(225),a("p",[t._v("被渲染为：")]),t._m(226),t._m(227),t._m(228),t._m(229),t._m(230),t._m(231),t._m(232),t._m(233),t._m(234),t._m(235),t._m(236),t._m(237),t._m(238),t._m(239),t._m(240),t._m(241),t._m(242),t._m(243),t._m(244),a("p",[t._v("再往下是这样一段代码：")]),t._m(245),t._m(246),t._m(247),t._m(248),t._m(249),t._m(250),t._m(251),t._m(252),a("p",[t._v("我们继续往下看代码，接下来要执行的是如下这段代码：")]),t._m(253),t._m(254),t._m(255),t._m(256),t._m(257),a("p",[t._v("那么我们回过头来继续看后面的代码，接下来执行的将是如下这段代码：")]),t._m(258),t._m(259),t._m(260),t._m(261),t._m(262),t._m(263),t._m(264),t._m(265),t._m(266),t._m(267),t._m(268),t._m(269),t._m(270),t._m(271),t._m(272),t._m(273),t._m(274),t._m(275),t._m(276),t._m(277),t._m(278),t._m(279),t._m(280),t._m(281),t._m(282),t._m(283),a("p",[t._v("举个例子，如下模板：")]),t._m(284),t._m(285),t._m(286),t._m(287),t._m(288),t._m(289),t._m(290),t._m(291),t._m(292),t._m(293),t._m(294),t._m(295),t._m(296),t._m(297),t._m(298),a("p",[t._v("知道了这些我们再回头来看如下代码：")]),t._m(299),t._m(300),t._m(301),t._m(302),t._m(303),t._m(304),t._m(305),t._m(306),t._m(307),t._m(308),t._m(309),t._m(310),t._m(311),t._m(312),t._m(313),t._m(314),t._m(315),t._m(316),t._m(317),t._m(318),t._m(319),t._m(320),t._m(321),t._m(322),t._m(323),t._m(324),t._m(325),t._m(326),t._m(327),t._m(328),t._m(329),t._m(330),t._m(331),t._m(332),t._m(333),t._m(334),t._m(335),t._m(336),t._m(337),t._m(338),t._m(339),t._m(340),t._m(341),t._m(342),t._m(343),t._m(344),t._m(345),t._m(346),t._m(347),t._m(348),t._m(349),t._m(350),t._m(351),t._m(352),t._m(353),t._m(354),t._m(355),t._m(356),t._m(357),t._m(358),t._m(359),t._m(360),t._m(361),t._m(362),t._m(363),t._m(364),t._m(365),t._m(366),t._m(367),t._m(368),t._m(369),t._m(370),t._m(371),a("p",[t._v("更具体的实现我们会在后面的分析中讲到。再往下我们要看的是如下这段代码：")]),t._m(372),t._m(373),t._m(374),t._m(375),t._m(376),t._m(377),t._m(378),t._m(379),t._m(380),t._m(381),t._m(382),t._m(383),t._m(384),t._m(385),t._m(386),a("p",[t._v("我们回到这段代码：")]),t._m(387),t._m(388),t._m(389),t._m(390),t._m(391),t._m(392),t._m(393),t._m(394),t._m(395),t._m(396),t._m(397),a("p",[t._v("接下来我们回到如下这段代码：")]),t._m(398),t._m(399),t._m(400),t._m(401),t._m(402),t._m(403),t._m(404),t._m(405),t._m(406),t._m(407),t._m(408),t._m(409),t._m(410),t._m(411),t._m(412),t._m(413),t._m(414),t._m(415),t._m(416),t._m(417),t._m(418),t._m(419),t._m(420),t._m(421),a("p",[t._v("再往下将会执行如下高亮的这两句代码：")]),t._m(422),t._m(423),t._m(424),t._m(425),t._m(426),t._m(427),t._m(428),t._m(429),t._m(430),t._m(431),t._m(432),t._m(433),t._m(434),t._m(435),t._m(436),t._m(437),a("p",[t._v("接着执行的将是如下这句代码：")]),t._m(438),t._m(439),t._m(440),t._m(441),t._m(442),t._m(443),t._m(444),t._m(445),t._m(446),t._m(447),t._m(448),t._m(449),t._m(450),t._m(451),t._m(452),t._m(453),t._m(454),t._m(455),t._m(456),t._m(457),t._m(458),t._m(459),t._m(460),a("p",[t._v("我们能不能把它改成如下这种判断方式呢？实际上下面这种判断方式我们已经见过很多次了：")]),t._m(461),t._m(462),t._m(463),t._m(464),t._m(465),t._m(466),t._m(467),t._m(468),t._m(469),t._m(470),t._m(471),t._m(472),t._m(473),t._m(474),t._m(475),t._m(476),t._m(477),t._m(478),a("p",[t._v("按照惯例我们做一个简短的总结：")]),t._m(479),t._m(480),t._m(481),t._m(482),t._m(483),t._m(484),t._m(485),t._m(486),t._m(487),t._m(488),t._m(489),t._m(490),t._m(491),t._m(492),t._m(493),t._m(494),t._m(495),t._m(496),t._m(497),t._m(498),t._m(499),t._m(500),t._m(501),t._m(502),a("p",[t._v("获取到了绑定的属性值之后，将会执行如下代码：")]),t._m(503),t._m(504),t._m(505),t._m(506),t._m(507),t._m(508),t._m(509),t._m(510),t._m(511),t._m(512),t._m(513),t._m(514),a("p",[t._v("讲完了非绑定属性值的获取及处理方式，我们再回过头来看看对于绑定的属性值应该如何处理，我们知道非绑定的属性值始终会被作为字符串对待，但是对于绑定的值则需要将其作为一个表达式对待才行，如下高亮的代码所示：")]),t._m(515),t._m(516),t._m(517),a("p",[t._v("实际上对于绑定的属性值同样可以使用过滤器，如下：")]),t._m(518),t._m(519),t._m(520),t._m(521),t._m(522),t._m(523),t._m(524),t._m(525),t._m(526),a("p",[t._v("除了这三种情况之外还有一种比较特殊的情况，就是正则表达式中的管道符，如下：")]),t._m(527),t._m(528),a("p",[t._v("那是不是排除了以上四种情况就能确定一个管道符是过滤器的分界线了呢？不是，大家不要忘了最常见的一种情况，如下代码所示：")]),t._m(529),t._m(530),t._m(531),a("p",[t._v("接下来我们思考一下应该如何判断一个管道符到底是不是表达式与过滤器的分界线，我们依据五种情况逐个分析，首先对于单引号中的管道符：")]),t._m(532),t._m(533),a("p",[t._v("对于存在于正则表达式中的管道符，如下：")]),t._m(534),t._m(535),t._m(536),t._m(537),t._m(538),t._m(539),a("p",[t._v("除此之外再来看一个例子：")]),t._m(540),t._m(541),t._m(542),t._m(543),t._m(544),t._m(545),t._m(546),t._m(547),t._m(548),t._m(549),t._m(550),t._m(551),a("p",[t._v("接着我们再来看如下这三个变量：")]),t._m(552),t._m(553),t._m(554),t._m(555),t._m(556),t._m(557),a("p",[t._v("再往下定义了如下这些变量：")]),t._m(558),t._m(559),t._m(560),t._m(561),t._m(562),t._m(563),t._m(564),t._m(565),t._m(566),t._m(567),t._m(568),t._m(569),t._m(570),t._m(571),t._m(572),t._m(573),t._m(574),t._m(575),t._m(576),t._m(577),t._m(578),t._m(579),t._m(580),t._m(581),t._m(582),t._m(583),t._m(584),t._m(585),t._m(586),t._m(587),t._m(588),t._m(589),t._m(590),t._m(591),t._m(592),t._m(593),t._m(594),t._m(595),t._m(596),t._m(597),t._m(598),t._m(599),t._m(600),t._m(601),t._m(602),t._m(603),t._m(604),t._m(605),t._m(606),t._m(607),t._m(608),t._m(609),t._m(610),t._m(611),t._m(612),t._m(613),t._m(614),t._m(615),t._m(616),t._m(617),t._m(618),t._m(619),t._m(620),t._m(621),t._m(622),t._m(623),t._m(624),t._m(625),t._m(626),t._m(627),t._m(628),t._m(629),t._m(630),t._m(631),t._m(632),t._m(633),t._m(634),t._m(635),t._m(636),t._m(637),t._m(638),t._m(639),t._m(640),t._m(641),t._m(642),t._m(643),t._m(644),a("p",[t._v("有了这些基础，代码将来到最关键的一步，即如下代码：")]),t._m(645),t._m(646),t._m(647),t._m(648),t._m(649),t._m(650),t._m(651),t._m(652),t._m(653),t._m(654),t._m(655),t._m(656),t._m(657),t._m(658),t._m(659),t._m(660),t._m(661),t._m(662),t._m(663),t._m(664),t._m(665),t._m(666),t._m(667),t._m(668),t._m(669),t._m(670),t._m(671),t._m(672),t._m(673),t._m(674),t._m(675),t._m(676),t._m(677),t._m(678),t._m(679),t._m(680),t._m(681),t._m(682),t._m(683),t._m(684),t._m(685),t._m(686),t._m(687),t._m(688),t._m(689),a("p",[t._v("再来看如下代码：")]),t._m(690),t._m(691),t._m(692),t._m(693),t._m(694),t._m(695),t._m(696),t._m(697),t._m(698),t._m(699),t._m(700),t._m(701),t._m(702),t._m(703),t._m(704),t._m(705),t._m(706),t._m(707),t._m(708),t._m(709),t._m(710),t._m(711),t._m(712),t._m(713),t._m(714),t._m(715),t._m(716),t._m(717),t._m(718),t._m(719),t._m(720),t._m(721),t._m(722),t._m(723),t._m(724),t._m(725),t._m(726),t._m(727),a("p",[t._v("获取插槽的名字之后，会执行如下代码：")]),t._m(728),t._m(729),t._m(730),t._m(731),t._m(732),t._m(733),t._m(734),t._m(735),t._m(736),t._m(737),t._m(738),a("p",[t._v("接着我们再来看如下这段代码：")]),t._m(739),t._m(740),t._m(741),t._m(742),t._m(743),t._m(744),t._m(745),t._m(746),t._m(747),t._m(748),a("p",[t._v("接着我们再来看最后一段代码，如下高亮代码所示：")]),t._m(749),t._m(750),t._m(751),t._m(752),t._m(753),t._m(754),a("p",[t._v("再往下，是如下这段代码：")]),t._m(755),t._m(756),t._m(757),a("p",[t._v("最后我们按照惯例，来做一个总结：")]),t._m(758),t._m(759),t._m(760),t._m(761),t._m(762),t._m(763),t._m(764),t._m(765),t._m(766),a("p",[t._v("举一个例子：")]),t._m(767),t._m(768),t._m(769),t._m(770),t._m(771),t._m(772),t._m(773),t._m(774),t._m(775),t._m(776),t._m(777),t._m(778),t._m(779),t._m(780),t._m(781),t._m(782),t._m(783),t._m(784),t._m(785),t._m(786),t._m(787),t._m(788),a("p",[t._v("无论是前置处理，中置处理还是后置处理，这些名词都是为了让大家更好理解而“杜撰”出来的，他们的作用等价于提供了对元素描述对象处理的钩子，让外界有能力参与不同阶段的元素描述对象的处理，这对于平台化是很重要的事情，不同平台能够通过这些处理钩子去处理那些特定平台下特有的元素或元素的属性。")]),t._m(789)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"句法分析-生成真正的ast-一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#句法分析-生成真正的ast-一","aria-hidden":"true"}},[this._v("#")]),this._v(" 句法分析 - 生成真正的AST(一)")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在上一章中，我们讲解了解析 "),s("code",[this._v("html")]),this._v(" 字符串时词法分析的方式，本章我们将再进一步，讲解 "),s("code",[this._v("Vue")]),this._v(" 是如何在词法分析的基础上构建抽象语法树("),s("code",[this._v("AST")]),this._v(")的，即句法分析。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("打开 "),s("code",[this._v("src/compiler/index.js")]),this._v(" 文件，注意如下高亮的那句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" createCompiler "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createCompilerCreator")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("baseCompile")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  template"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompiledResult "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("optimize "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("optimize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("generate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ast"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    render"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    staticRenderFns"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到 "),a("code",[t._v("parse")]),t._v(" 函数的返回值就是抽象语法树("),a("code",[t._v("AST")]),t._v(")，根据文件头部的引用关系可知 "),a("code",[t._v("parse")]),t._v(" 函数来自于 "),a("code",[t._v("src/compiler/parser/index.js")]),t._v(" 文件，实际上该文件所有的内容都在做一件事，即创建 "),a("code",[t._v("AST")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("本章的讲解目标就是 "),s("code",[this._v("src/compiler/parser/index.js")]),this._v(" 文件，不过具体到源码之前，我们有必要独立思考一下如何根据词法分析创建一棵抽象语法树。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"根据令牌生成ast的思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#根据令牌生成ast的思路","aria-hidden":"true"}},[this._v("#")]),this._v(" 根据令牌生成AST的思路")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在上一节的末尾我们讲解了 "),s("code",[this._v("parseHTML")]),this._v(" 函数的使用，该函数接收一些选项参数，其中包括几个重要的钩子函数，如每当遇到一个开始标签时会调用的 "),s("code",[this._v("options.start")]),this._v(" 钩子函数，每当遇到一个结束标签时会调用的 "),s("code",[this._v("options.end")]),this._v(" 钩子函数等等。实际上一棵抽象语法树的构建最关键的就是这两个钩子函数，接下来我们简单讲解一下构建抽象语法树的思路。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("假设我们有一段 "),s("code",[this._v("html")]),this._v(" 字符串，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("文本"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么最终生成的这棵树应该是与如上 "),s("code",[this._v("html")]),this._v(" 字符串的结构一一对应的：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("├── ul\n│   ├── li\n│   │   ├── span\n│   │   │   ├── 文本\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果每一个节点我们都用一个 "),s("code",[this._v("javascript")]),this._v(" 对象来表示的话，那么 "),s("code",[this._v("ul")]),this._v(" 标签可以表示为如下对象：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'ul'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("由于每个节点都存在一个父节点和若干子节点，所以我们为如上对象添加两个属性："),s("code",[this._v("parent")]),this._v(" 和 "),s("code",[this._v("children")]),this._v("，分别用来表示当前节点的父节点和它所包含的子节点：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'ul'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("同时每个元素节点还可能包含很多属性("),s("code",[this._v("attributes")]),this._v(")，所以我们可以为每个节点添加 "),s("code",[this._v("attrsList")]),this._v(" 属性，用来存储当前节点所拥有的属性：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'ul'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("按照以上思路，实际上你可以为节点的描述对象添加任何你需要的属性，从而进一步描述该节点的特征。如果使用如上这个对象描述之前定义的 "),s("code",[this._v("html")]),this._v(" 字符串，那么这棵抽象语法树应该长成如下这个样子：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'ul'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'li'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ul"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'span'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" li"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" span"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'文本'")]),t._v("\n            "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("实际上构建抽象语法树的工作就是创建一个类似如上所示的一个能够描述节点关系的对象树，节点与节点之间通过 "),a("code",[t._v("parent")]),t._v(" 和 "),a("code",[t._v("children")]),t._v(" 建立联系，每个节点的 "),a("code",[t._v("type")]),t._v(" 属性用来标识该节点的类别，比如 "),a("code",[t._v("type")]),t._v(" 为 "),a("code",[t._v("1")]),t._v(" 代表该节点为元素节点，"),a("code",[t._v("type")]),t._v(" 为 "),a("code",[t._v("2")]),t._v(" 代表该节点为文本节点，这只是人为的一个规定，你可以用任何方便的方式加以区分。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("明白了我们的目标，下面我们再回到 "),s("code",[this._v("parseHTML")]),this._v(" 函数，因为目前为止我们所拥有的只有这一个函数，我们需要使用该函数构建出一棵如上所述的描述对象。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先我们需要定义一个 "),s("code",[this._v("parse")]),this._v(" 函数，假设该函数就是用来把 "),s("code",[this._v("html")]),this._v(" 字符串生成 "),s("code",[this._v("AST")]),this._v(" 的，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root\n  "),a("span",{attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码所示，我们在 "),a("code",[t._v("parse")]),t._v(" 函数内定义了变量 "),a("code",[t._v("root")]),t._v(" 并将其返回，其中 "),a("code",[t._v("root")]),t._v(" 所代表的就是整棵 "),a("code",[t._v("AST")]),t._v("，"),a("code",[t._v("parse")]),t._v(" 函数体中间的所有代码都是为了充实 "),a("code",[t._v("root")]),t._v(" 变量。怎么充实呢？这时我们需要借助 "),a("code",[t._v("parseHTML")]),t._v(" 函数帮助我们解析 "),a("code",[t._v("html")]),t._v(" 字符串，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root\n  \n  "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们从简出发，假设我们要解析的 "),s("code",[this._v("html")]),this._v(" 字符串如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token punctuation"}},[this._v("<")]),this._v("div")]),s("span",{attrs:{class:"token punctuation"}},[this._v(">")])]),s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token punctuation"}},[this._v("</")]),this._v("div")]),s("span",{attrs:{class:"token punctuation"}},[this._v(">")])]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段 "),s("code",[this._v("html")]),this._v(" 字符串仅仅是一个简单的 "),s("code",[this._v("div")]),this._v(" 标签，甚至没有任何子节点。若要解析如上标签我们可以编写如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root\n  \n  "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"highlighted-line"}}),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element")]),t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，在 "),a("code",[t._v("start")]),t._v(" 钩子函数中首先定义了 "),a("code",[t._v("element")]),t._v(" 常量，它就是元素节点的描述对象，接着判断 "),a("code",[t._v("root")]),t._v(" 是否存在，如果不存在则直接将 "),a("code",[t._v("element")]),t._v(" 赋值给 "),a("code",[t._v("root")]),t._v("。这段代码对于解析 "),a("code",[t._v("'<div></div>'")]),t._v(" 这段 "),a("code",[t._v("html")]),t._v(" 字符串来说已经足够了，当解析这段 "),a("code",[t._v("html")]),t._v(" 字符串时首先会遇到 "),a("code",[t._v("div")]),t._v(" 元素的开始标签，此时 "),a("code",[t._v("start")]),t._v(" 钩子函数将被调用，最终 "),a("code",[t._v("root")]),t._v(" 变量将被设置为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但是当解析的 "),s("code",[this._v("html")]),this._v(" 字符串稍微复杂一点的时候，这段用来解析的代码就不能正常使用了，比如对于如下这段 "),s("code",[this._v("html")]),this._v(" 字符串：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段 "),a("code",[t._v("html")]),t._v(" 字符串与之前的 "),a("code",[t._v("html")]),t._v(" 字符串的不同之处在于 "),a("code",[t._v("div")]),t._v(" 标签多了一个子节点，即多了一个 "),a("code",[t._v("span")]),t._v(" 标签。如果继续沿用之前的解析代码，当解析如上 "),a("code",[t._v("html")]),t._v(" 字符串时首先会遇到 "),a("code",[t._v("div")]),t._v(" 元素的开始标签，此时 "),a("code",[t._v("start")]),t._v(" 钩子函数被调用，"),a("code",[t._v("root")]),t._v(" 变量被设置为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接着会遇到 "),a("code",[t._v("span")]),t._v(" 元素的开始标签，会再次调用 "),a("code",[t._v("start")]),t._v(" 钩子函数，由于此时 "),a("code",[t._v("root")]),t._v(" 变量已经存在，所以不会再次设置 "),a("code",[t._v("root")]),t._v(" 变量。为了能够更好的解析 "),a("code",[t._v("span")]),t._v(" 标签，我们需要对之前的解析代码做一些改变，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentParent")]),t._v("  \n  "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("        parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("        attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element")]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element")]),t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码所示，首先我们需要定义 "),a("code",[t._v("currentParent")]),t._v(" 变量，它的作用是每遇到一个非一元标签，都会将该标签的描述对象作为 "),a("code",[t._v("currentParent")]),t._v(" 的值，这样当解析该非一元标签的子节点时，子节点的父级就是 "),a("code",[t._v("currentParent")]),t._v(" 变量。另外在 "),a("code",[t._v("start")]),t._v(" 钩子函数内部我们在创建 "),a("code",[t._v("element")]),t._v(" 描述对象时我们使用 "),a("code",[t._v("currentParent")]),t._v(" 的值作为每个元素描述对象的 "),a("code",[t._v("parent")]),t._v(" 属性的值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果用以上代码解析如下 "),s("code",[this._v("html")]),this._v(" 字符串：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那么其过程大概是这样的：首先会遇到 "),a("code",[t._v("div")]),t._v(" 元素的开始标签，此时由于 "),a("code",[t._v("root")]),t._v(" 不存在，并且 "),a("code",[t._v("currentParent")]),t._v(" 也不存在，所以会创建一个用于描述该 "),a("code",[t._v("div")]),t._v(" 元素的对象，并设置 "),a("code",[t._v("root")]),t._v(" 的值如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("还没完，由于 "),a("code",[t._v("div")]),t._v(" 元素是非一元标签，我们可以看到在 "),a("code",[t._v("start")]),t._v(" 钩子函数的末尾有一个 "),a("code",[t._v("if")]),t._v(" 条件语句，当一个元素为非一元标签时，会设置 "),a("code",[t._v("currentParent")]),t._v(" 为该元素的描述对象，所以此时 "),a("code",[t._v("currentParent")]),t._v(" 也是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接着解析这段 "),a("code",[t._v("html")]),t._v(" 字符串，会遇到 "),a("code",[t._v("span")]),t._v(" 元素的开始标签，由于此时 "),a("code",[t._v("root")]),t._v(" 已经存在，所以 "),a("code",[t._v("start")]),t._v(" 钩子函数会执行 "),a("code",[t._v("else...if")]),t._v(" 条件的判断，检查 "),a("code",[t._v("currentParent")]),t._v(" 是否存在，由于 "),a("code",[t._v("currentParent")]),t._v(" 存在，所以会将 "),a("code",[t._v("span")]),t._v(" 元素的描述对象添加到 "),a("code",[t._v("currentParent")]),t._v(" 的 "),a("code",[t._v("children")]),t._v(" 数组中作为子节点，所以最终生成的 "),a("code",[t._v("root")]),t._v(" 描述对象为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'span'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" div"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("到现在为止，我们解析逻辑看上去可以用了，但实际上还是存在问题的，假设我们要解析 "),s("code",[this._v("html")]),this._v(" 字符串再稍微复杂一点，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在之前的基础上 "),a("code",[t._v("div")]),t._v(" 元素的子节点多了一个 "),a("code",[t._v("p")]),t._v(" 标签，按照现有的解析逻辑在解析这段 "),a("code",[t._v("html")]),t._v(" 字符串时，首先会遇到 "),a("code",[t._v("div")]),t._v(" 元素的开始标签，此时 "),a("code",[t._v("root")]),t._v(" 和 "),a("code",[t._v("currentParent")]),t._v(" 将被设置为 "),a("code",[t._v("div")]),t._v(" 标签的描述对象。接着会遇到 "),a("code",[t._v("span")]),t._v(" 元素的开始标签，此时 "),a("code",[t._v("span")]),t._v(" 标签的描述对象将被添加到 "),a("code",[t._v("div")]),t._v(" 标签描述对象的 "),a("code",[t._v("children")]),t._v(" 数组中，同时别忘了 "),a("code",[t._v("span")]),t._v(" 元素也是非一元标签，所以 "),a("code",[t._v("currentParent")]),t._v(" 变量会被设置为 "),a("code",[t._v("span")]),t._v(" 标签的描述对象。接着继续解析，会遇到 "),a("code",[t._v("span")]),t._v(" 元素的结束标签，由于 "),a("code",[t._v("end")]),t._v(" 钩子函数什么都没做，直接跳过。再继续解析将遇到 "),a("code",[t._v("p")]),t._v(" 元素的开始标签，大家注意，"),a("strong",[t._v("在解析 "),a("code",[t._v("p")]),t._v(" 元素的开始标签时，由于 "),a("code",[t._v("currentParent")]),t._v(" 变量引用的是 "),a("code",[t._v("span")]),t._v(" 元素的描述对象，所以 "),a("code",[t._v("p")]),t._v(" 元素的描述对象将被添加到 "),a("code",[t._v("span")]),t._v(" 元素描述对象的 "),a("code",[t._v("children")]),t._v(" 数组中，被误认为是 "),a("code",[t._v("span")]),t._v(" 元素的子节点")]),t._v("。而事实上 "),a("code",[t._v("p")]),t._v(" 标签是 "),a("code",[t._v("div")]),t._v(" 元素的子节点，这就是问题所在。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了解决这个问题，我们需要每当遇到一个非一元标签的结束标签时，都将 "),s("code",[this._v("currentParent")]),this._v(" 变量的值回退到之前的元素描述对象，这样就能够保证当前正在解析的标签拥有正确的父级。但是如何回退呢？若要回退之前的值，那么必然需要一个变量保存之前的值，所以我们需要一个数组 "),s("code",[this._v("stack")]),this._v("，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentParent\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stack "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("  \n  "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("        stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pop")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，首先我们定义了 "),a("code",[t._v("stack")]),t._v(" 常量，它是一个数组，接着我们做了一些修改，每次遇到非一元开始标签的时候，除了设置 "),a("code",[t._v("currentParent")]),t._v(" 的值之外，还会将 "),a("code",[t._v("currentParent")]),t._v(" 添加到 "),a("code",[t._v("stack")]),t._v(" 数组。接着我们在 "),a("code",[t._v("end")]),t._v(" 钩子函数中添加了一句代码，也就是说每当遇到一个非一元标签的结束标签时，都会回退 "),a("code",[t._v("currentParent")]),t._v(" 变量的值为之前的值，这样我们就修正了当前正在解析的元素的父级元素。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是根据 "),s("code",[this._v("parseHTML")]),this._v(" 函数生成 "),s("code",[this._v("AST")]),this._v(" 的基本方式，实际上我们考虑的还不够周全，比如上面的讲解中我们没有处理一元标签，另外我们还需要处理文本节点和注释节点等等。不过上面的讲解很好的为我们后续对源码的解析做了铺垫，更详细的内容我们将在接下来的源码分析阶段为大家仔细说明。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"解析前的准备工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析前的准备工作","aria-hidden":"true"}},[this._v("#")]),this._v(" 解析前的准备工作")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("前面说过，整个 "),s("code",[this._v("src/compiler/parser/index.js")]),this._v(" 文件所做的工作都是在创建 "),s("code",[this._v("AST")]),this._v("，所以我们应该先了解一下这个文件的结构，以方便后续的理解。在该文件的开头定义了一些常量和变量，其中包括一些正则常量，我们后续会详细讲解。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着定义了 "),s("code",[this._v("createASTElement")]),this._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createASTElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Attr"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("createASTElement")]),this._v(" 函数用来创建一个元素的描述对象，这样我们在创建元素描述对象时就不需要手动编写对象字面量了，方便的同时还能提高代码整洁性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下定义了整个文件最重要的一个函数，即 "),s("code",[this._v("parse")]),this._v(" 函数，它的结构如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  template"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("/*\n   * 省略...\n   * 省略的代码用来初始化一些变量的值，以及创建一些新的变量，其中包括 root 变量，该变量为 parse 函数的返回值，即 AST\n   */")]),t._v("\n  \n  "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warnOnce")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("closeElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 其他选项...")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n    "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n    "),a("span",{attrs:{class:"token function"}},[t._v("chars")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("comment")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过如上代码的简化，我们可以清晰地看到 "),a("code",[t._v("parse")]),t._v(" 函数的结构，在 "),a("code",[t._v("parse")]),t._v(" 函数开头的代码用来初始化一些变量的值，以及创建一些新的变量，其中包括 "),a("code",[t._v("root")]),t._v(" 变量，该变量为 "),a("code",[t._v("parse")]),t._v(" 函数的返回值，即最终的 "),a("code",[t._v("AST")]),t._v("。然后定义了两个函数 "),a("code",[t._v("warnOnce")]),t._v(" 和 "),a("code",[t._v("closeElement")]),t._v("。接着调用了 "),a("code",[t._v("parseHTML")]),t._v(" 函数，通过上一小节的铺垫，相信大家看到这里已经大概知道了 "),a("code",[t._v("parse")]),t._v(" 函数是如何创建 "),a("code",[t._v("AST")]),t._v(" 的了。另外我们能够注意到在调用 "),a("code",[t._v("parseHTML")]),t._v(" 函数时传递了很多选项，其中包括四个重要的钩子函数选项："),a("code",[t._v("start")]),t._v("、"),a("code",[t._v("end")]),t._v("、"),a("code",[t._v("chars")]),t._v(" 以及 "),a("code",[t._v("comment")]),t._v("。最后 "),a("code",[t._v("parse")]),t._v(" 函数将 "),a("code",[t._v("root")]),t._v(" 变量返回，也就是最终生成的 "),a("code",[t._v("AST")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("parse")]),this._v(" 函数的后面，定义了非常多的函数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processPre")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processRawAttrs")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processKey")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processRef")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("ForParseResult "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processIfConditions")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("findPrevElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" condition"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTIfCondition"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processOnce")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processSlot")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processComponent")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processAttrs")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("checkInFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseModifiers")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Object"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isTextTag")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isForbiddenTag")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("guardIESVGBug")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("checkForAliasModel")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们能够发现这些函数的名字大部分都以 "),a("code",[t._v("process")]),t._v(" 开头，并且接收的参数中基本都包含 "),a("code",[t._v("el")]),t._v("，那么 "),a("code",[t._v("el")]),t._v(" 是什么呢？实际上 "),a("code",[t._v("el")]),t._v(" 就是元素的描述对象，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那么 "),a("code",[t._v("process*")]),t._v(" 系列的函数接收 "),a("code",[t._v("el")]),t._v(" 参数后都做了什么呢？实际上 "),a("code",[t._v("process*")]),t._v(" 系列函数的作用就是对元素描述对象做进一步处理，比如其中一个函数叫做 "),a("code",[t._v("processPre")]),t._v("，这个函数的作用就是用来检测 "),a("code",[t._v("el")]),t._v(" 元素是否拥有 "),a("code",[t._v("v-pre")]),t._v(" 属性，如果有 "),a("code",[t._v("v-pre")]),t._v(" 属性则会在 "),a("code",[t._v("el")]),t._v(" 描述对象上添加一个 "),a("code",[t._v("pre")]),t._v(" 属性，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  pre"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("类似的，所有 "),s("code",[this._v("process*")]),this._v(" 系列函数的作用都是为了让一个元素的描述对象更加充实，使这个对象能更加详细地描述一个元素，并且这些函数都会用在 "),s("code",[this._v("parseHTML")]),this._v(" 函数的钩子选项函数中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外我们也能看到很多非 "),s("code",[this._v("process*")]),this._v(" 系列的函数，例如 "),s("code",[this._v("findPrevElement")]),this._v("、"),s("code",[this._v("makeAttrsMap")]),this._v(" 等等，这些函数实际上就是工具函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是 "),s("code",[this._v("src/compiler/parser/index.js")]),this._v(" 文件的整体结构。接下来我们将重新回到该文件的开头部分，来看看都定义了哪些常量或变量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"正则常量分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则常量分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则常量分析")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"正则常量-onre"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-onre","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则常量 onRE")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们将讲解定义在该文件中的一系列常量，首先要讲解的 "),s("code",[this._v("onRE")]),this._v(" 正则常量，其源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" onRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^@|^v-on:/")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个常量用来匹配以字符 "),s("code",[this._v("@")]),this._v(" 或 "),s("code",[this._v("v-on:")]),this._v(" 开头的字符串，主要作用是检测标签属性名是否是监听事件的指令。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"正则常量-dirre"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-dirre","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则常量 dirRE")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("正则常量 "),s("code",[this._v("dirRE")]),this._v(" 源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dirRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^v-|^@|^:/")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("它用来匹配以字符 "),a("code",[t._v("v-")]),t._v(" 或 "),a("code",[t._v("@")]),t._v(" 或 "),a("code",[t._v(":")]),t._v(" 开头的字符串，主要作用是检测标签属性名是否是指令。所以通过这个正则我们可以知道，在 "),a("code",[t._v("vue")]),t._v(" 中所有以 "),a("code",[t._v("v-")]),t._v(" 开头的属性都被认为是指令，另外 "),a("code",[t._v("@")]),t._v(" 字符是 "),a("code",[t._v("v-on")]),t._v(" 的缩写，"),a("code",[t._v(":")]),t._v(" 字符是 "),a("code",[t._v("v-bind")]),t._v(" 的缩写。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"正则常量-foraliasre"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-foraliasre","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则常量 forAliasRE")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" forAliasRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/([^]*?)\\s+(?:in|of)\\s+([^]*)/")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该正则包含三个分组，第一个分组为 "),a("code",[t._v("([^]*?)")]),t._v("，该分组是一个惰性匹配的分组，它匹配的内容为任何字符，包括换行符等。第二个分组为 "),a("code",[t._v("(?:in|of)")]),t._v("，该分组用来匹配字符串 "),a("code",[t._v("in")]),t._v(" 或者 "),a("code",[t._v("of")]),t._v("，并且该分组是非捕获的分组。第三个分组为 "),a("code",[t._v("([^]*)")]),t._v("，与第一个分组类似，不同的是第三个分组是非惰性匹配。同时每个分组之间都会匹配至少一个空白符 "),a("code",[t._v("\\s+")]),t._v("。通过以上说明可知，正则 "),a("code",[t._v("forAliasRE")]),t._v(" 用来匹配 "),a("code",[t._v("v-for")]),t._v(" 属性的值，并捕获 "),a("code",[t._v("in")]),t._v(" 或 "),a("code",[t._v("of")]),t._v(" 前后的字符串。假设我们像如下这样使用 "),a("code",[t._v("v-for")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("obj of list"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那么正则 "),a("code",[t._v("forAliasRE")]),t._v(" 用来匹配字符串 "),a("code",[t._v("'obj of list'")]),t._v("，并捕获到两个字符串 "),a("code",[t._v("'obj'")]),t._v(" 和 "),a("code",[t._v("'list'")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"正则常量-foriteratorre"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-foriteratorre","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则常量 forIteratorRE")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" forIteratorRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该正则用来匹配 "),a("code",[t._v("forAliasRE")]),t._v(" 第一个捕获组所捕获到的字符串，可以看到如上正则中拥有三个分组，有两个捕获的分组，第一个捕获组用来捕获一个不包含字符 "),a("code",[t._v(",")]),a("code",[t._v("}")]),t._v(" 和 "),a("code",[t._v("]")]),t._v(" 的字符串，且该字符串前面有一个字符 "),a("code",[t._v(",")]),t._v("，如："),a("code",[t._v("', index'")]),t._v("。第二个分组为非捕获的分组，第三个分组为捕获的分组，其捕获的内容与第一个捕获组相同。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("举几个例子，我们知道 "),s("code",[this._v("v-for")]),this._v(" 有几种不同的写法，其中一种使用 "),s("code",[this._v("v-for")]),this._v(" 的方式是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("div v"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"obj of list"')]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果像如上这样使用 "),a("code",[t._v("v-for")]),t._v("，那么 "),a("code",[t._v("forAliasRE")]),t._v(" 正则的第一个捕获组的内容为字符串 "),a("code",[t._v("'obj'")]),t._v("，此时使用 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则去匹配字符串 "),a("code",[t._v("'obj'")]),t._v(" 将得不到任何内容。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第二种使用 "),s("code",[this._v("v-for")]),this._v(" 的方式为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("div v"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"(obj, index) of list"')]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此时 "),a("code",[t._v("forAliasRE")]),t._v(" 正则的第一个捕获组的内容为字符串 "),a("code",[t._v("'(obj, index)'")]),t._v("，如果去掉左右括号则该字符串为 "),a("code",[t._v("'obj, index'")]),t._v("，如果使用 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则去匹配字符串 "),a("code",[t._v("'obj, index'")]),t._v(" 则会匹配成功，并且 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则的第一个捕获组将捕获到字符串 "),a("code",[t._v("'index'")]),t._v("，但第二个捕获组捕获不到任何内容。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第三种使用 "),s("code",[this._v("v-for")]),this._v(" 的方式为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("div v"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"(value, key, index) in object"')]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上方式主要用于遍历对象而非数组，此时 "),a("code",[t._v("forAliasRE")]),t._v(" 正则的第一个捕获组的内容为字符串 "),a("code",[t._v("'(value, key, index)'")]),t._v("，如果去掉左右括号则该字符串为 "),a("code",[t._v("'value, key, index'")]),t._v("，如果使用 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则去匹配字符串 "),a("code",[t._v("'value, key, index'")]),t._v(" 则会匹配成功，并且 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则的第一个捕获组将捕获到字符串 "),a("code",[t._v("'key'")]),t._v("，但第二个捕获组将捕获到字符串 "),a("code",[t._v("'index'")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"正则常量-stripparensre"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-stripparensre","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则常量 stripParensRE")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("const")]),this._v(" stripParensRE "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token regex"}},[this._v("/^\\(|\\)$/g")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这个捕获组用来捕获要么以字符 "),a("code",[t._v("(")]),t._v(" 开头，要么以字符 "),a("code",[t._v(")")]),t._v(" 结尾的字符串，或者两者都满足。那么这个正则的作用是什么呢？我们在讲解正则 "),a("code",[t._v("forIteratorRE")]),t._v(" 时有个细节不知道大家注意到了没有，就是 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则所匹配的字符串是 "),a("code",[t._v("'obj, index'")]),t._v("，而不是 "),a("code",[t._v("'(obj, index)'")]),t._v("，这两个字符串的区别就在于第二个字符串拥有左右括号，所以在使用 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则之前，需要使用 "),a("code",[t._v("stripParensRE")]),t._v(" 正则去掉字符串 "),a("code",[t._v("'(obj, index)'")]),t._v(" 中的左右括号，实现方式很简单：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token string"}},[t._v("'(obj, index)'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stripParensRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"正则常量-argre"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-argre","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则常量 argRE")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("const")]),this._v(" argRE "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token regex"}},[this._v("/:(.*)$/")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("正则 "),s("code",[this._v("argRE")]),this._v(" 用来匹配指令中的参数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token namespace"}},[t._v("v-on:")]),t._v("click.stop")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClick"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("其中 "),a("code",[t._v("v-on")]),t._v(" 为指令，"),a("code",[t._v("click")]),t._v(" 为传递给 "),a("code",[t._v("v-on")]),t._v(" 指令的参数，"),a("code",[t._v("stop")]),t._v(" 为修饰符。所以 "),a("code",[t._v("argRE")]),t._v(" 正则用来匹配指令编写中的参数，并且拥有一个捕获组，用来捕获参数的名字。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"正则常量-bindre"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-bindre","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则常量 bindRE")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bindRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^:|^v-bind:/")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("该正则用来匹配以字符 "),s("code",[this._v(":")]),this._v(" 或字符串 "),s("code",[this._v("v-bind:")]),this._v(" 开头的字符串，主要用来检测一个标签的属性是否是绑定("),s("code",[this._v("v-bind")]),this._v(")。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"正则常量-modifierre"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-modifierre","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则常量 modifierRE")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("const")]),this._v(" modifierRE "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token regex"}},[this._v("/\\.[^.]+/g")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" matchs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-on:click.stop'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifierRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("matchs")]),this._v(" 数组第一个元素为字符串 "),s("code",[this._v("'.stop'")]),this._v("，所以指令修饰符应该是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("matchs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 'stop'")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"html-实体解码函数-decodehtmlcached"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#html-实体解码函数-decodehtmlcached","aria-hidden":"true"}},[this._v("#")]),this._v(" HTML 实体解码函数 decodeHTMLCached")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" decodeHTMLCached "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cached")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("he"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("decode"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("cached")]),this._v(" 函数我们前面遇到过，它的作用是接收一个函数作为参数并返回一个新的函数，新函数的功能与作为参数传递的函数功能相同，唯一不同的是新函数具有缓存值的功能，如果一个函数在接收相同参数的情况下所返回的值总是相同的，那么 "),s("code",[this._v("cached")]),this._v(" 函数将会为该函数提供性能提升的优势。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到传递给 "),a("code",[t._v("cached")]),t._v(" 函数的参数是 "),a("code",[t._v("he.decode")]),t._v(" 函数，其中 "),a("code",[t._v("he")]),t._v(" 为第三方的库，"),a("code",[t._v("he.decode")]),t._v(" 函数用于 "),a("code",[t._v("HTML")]),t._v(" 字符实体的解码工作，如：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("he"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("decode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'&#x26;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// &#x26; -> '&'")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于字符实体 "),a("code",[t._v("&#x26;")]),t._v(" 代表的字符为 "),a("code",[t._v("&")]),t._v("。所以字符串 "),a("code",[t._v("&#x26;")]),t._v(" 经过解码后将变为字符 "),a("code",[t._v("&")]),t._v("。"),a("code",[t._v("decodeHTMLCached")]),t._v(" 函数在后面将被用于对纯文本的解码，如果不进行解码，那么用户将无法使用字符实体编写字符。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"定义平台化选项变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义平台化选项变量","aria-hidden":"true"}},[this._v("#")]),this._v(" 定义平台化选项变量")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" warn"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" delimiters\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" transforms\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" preTransforms\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" postTransforms\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" platformIsPreTag\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" platformMustUseProp\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" platformGetTagNamespace\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的代码中定义了 "),s("code",[this._v("8")]),this._v(" 个平台化的变量，为什么说上面这些变量为平台化的选项变量呢？后面当我们讲解 "),s("code",[this._v("parse")]),this._v(" 函数时，我们能够看到这些变量将被初始化一个值，这些值都是平台化的编译器选项参数，不同平台这些变量将被初始化的值是不同的。我们可以找到 "),s("code",[this._v("parse")]),this._v(" 函数看一下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  template"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  warn "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" baseWarn\n\n  platformIsPreTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isPreTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n  platformMustUseProp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mustUseProp "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n  platformGetTagNamespace "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getTagNamespace "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n\n  transforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'transformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  preTransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'preTransformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  postTransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'postTransformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  delimiters "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delimiters\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码所示，可以清晰的看到在 "),a("code",[t._v("parse")]),t._v(" 函数的一开始为这 "),a("code",[t._v("8")]),t._v(" 个平台化的变量进行了初始化，初始化的值都是我们曾经讲过的编译器的选项参数，由于我们前面所讲解的都是 "),a("code",[t._v("web")]),t._v(" 平台下的编译器选项，所以这里初始化的值都只用于 "),a("code",[t._v("web")]),t._v(" 平台。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"createastelement-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#createastelement-函数","aria-hidden":"true"}},[this._v("#")]),this._v(" createASTElement 函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在平台化变量的后面，定义了 "),s("code",[this._v("createASTElement")]),this._v(" 函数，这个函数的作用就是方便我们创建一个节点，或者说方便我们创建一个元素的描述对象，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createASTElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Attr"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("它接收三个参数，分别是标签名字 "),s("code",[this._v("tag")]),this._v("，该标签拥有的属性数组 "),s("code",[this._v("attrs")]),this._v(" 以及该标签的父标签描述对象的引用。比如我们使用 "),s("code",[this._v("parseHTML")]),this._v(" 解析如下标签时：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("obj of list"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("box"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当遇到 "),s("code",[this._v("div")]),this._v(" 的开始标签时 "),s("code",[this._v("parseHTML")]),this._v(" 函数的 "),s("code",[this._v("start")]),this._v(" 钩子函数的前两个参数分别是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" html "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('\'<div v-for="obj of list" class="box"></div>\'')]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 'div'")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// [ { name: 'v-for', value: 'obj of list' }, { name: 'class', value: 'box' } ]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("此时我们只需要调用 "),s("code",[this._v("createASTElement")]),this._v(" 函数并将这两个参数传递过去，即可创建该 "),s("code",[this._v("div")]),this._v(" 标签的描述对象：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" html "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('\'<div v-for="obj of list" class="box"></div>\'')]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 'div'")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// [ { name: 'v-for', value: 'obj of list' }, { name: 'class', value: 'box' } ]")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createASTElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj of list'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'box'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的描述对象中的 "),a("code",[t._v("parent")]),t._v(" 属性我们没有细说，其实在上一小节我们讲解思路的时候已经接触过 "),a("code",[t._v("currentParent")]),t._v(" 变量的作用，实际上元素描述对象间的引用关系就是通过 "),a("code",[t._v("currentParent")]),t._v(" 完成的，后面会仔细讲解。另外我们注意到描述对象中除了 "),a("code",[t._v("attrsList")]),t._v(" 属性是原始的标签属性数组之外，还有一个叫做 "),a("code",[t._v("attrsMap")]),t._v(" 的属性：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这个属性是什么呢？可以看到它的值是 "),a("code",[t._v("makeAttrsMap")]),t._v(" 函数的返回值，并且 "),a("code",[t._v("makeAttrsMap")]),t._v(" 函数接收一个参数，该参数恰好是标签的属性数组 "),a("code",[t._v("attrs")]),t._v("，此时我们需要查看一下 "),a("code",[t._v("makeAttrsMap")]),t._v(" 的代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Object"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" map "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n      map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isIE "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isEdge\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'duplicate attribute: '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" map\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们首先注意 "),a("code",[t._v("makeAttrsMap")]),t._v(" 函数的第一句代码和最后一句代码，第一句代码定义了 "),a("code",[t._v("map")]),t._v(" 常量并在最后一句代码中将其返回，在这两句代码中间是一个 "),a("code",[t._v("for")]),t._v(" 循环，用于遍历 "),a("code",[t._v("attrs")]),t._v(" 数组，注意 "),a("code",[t._v("for")]),t._v(" 循环内有这样一句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("也就是说，如果标签的属性数组 "),s("code",[this._v("attrs")]),this._v(" 为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("attrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj of list'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'box'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么最终生成的 "),s("code",[this._v("map")]),this._v(" 对象则是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("map "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj of list'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'box'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以 "),s("code",[this._v("makeAttrsMap")]),this._v(" 函数的作用就是将标签的属性数组转换成名值对一一对象的对象。这么做肯定是有目的的，我们后面遇到了再讲，总之最终生成的元素描述对象如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj of list'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'box'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj of list'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'box'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是 "),s("code",[this._v("parse")]),this._v(" 函数之前定义的所有常量、变量以及函数的讲解，接下来我们将正式进入 "),s("code",[this._v("parse")]),this._v(" 函数的实现讲解。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"parse-函数创建-ast-前的准备工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parse-函数创建-ast-前的准备工作","aria-hidden":"true"}},[this._v("#")]),this._v(" parse 函数创建 AST 前的准备工作")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("本节我们主要讲解 "),a("code",[t._v("parse")]),t._v(" 函数的结构以及真正开始解析之前的准备工作，我们知道 "),a("code",[t._v("parse")]),t._v(" 函数中主要是通过调用 "),a("code",[t._v("parseHTML")]),t._v(" 函数来辅助完成 "),a("code",[t._v("AST")]),t._v(" 构建的，但是在调用 "),a("code",[t._v("parseHTML")]),t._v(" 函数之前还需要做一些准备工作，比如前面提过的在 "),a("code",[t._v("parse")]),t._v(" 函数的开头为平台化变量赋了值，如下是 "),a("code",[t._v("parse")]),t._v(" 函数的整体结构：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  template"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  warn "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" baseWarn\n\n  platformIsPreTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isPreTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n  platformMustUseProp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mustUseProp "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n  platformGetTagNamespace "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getTagNamespace "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n\n  transforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'transformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  preTransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'preTransformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  postTransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'postTransformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  delimiters "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delimiters\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stack "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" preserveWhitespace "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("preserveWhitespace "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentParent\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" inVPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" inPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" warned "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warnOnce")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("closeElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("warn "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" baseWarn\n\nplatformIsPreTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isPreTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\nplatformMustUseProp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mustUseProp "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\nplatformGetTagNamespace "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getTagNamespace "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n\ntransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'transformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npreTransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'preTransformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npostTransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'postTransformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("回过头来继续分析这些平台化的变量，首先是 "),a("code",[t._v("warn")]),t._v(" 变量的值为 "),a("code",[t._v("options.warn")]),t._v(" 函数，如果 "),a("code",[t._v("options.warn")]),t._v(" 选项参数不存在，则会降级使用 "),a("code",[t._v("baseWarn")]),t._v(" 函数，所以 "),a("code",[t._v("warn")]),t._v(" 函数作用是用来打印警告信息的，另外 "),a("code",[t._v("baseWarn")]),t._v(" 函数来自于 "),a("code",[t._v("src/compiler/helpers.js")]),t._v(" 文件，该文件用来存放一些助手工具函数，我们后面分析 "),a("code",[t._v("parse")]),t._v(" 函数源码时将会经常看到调用来自该文件的函数。其中 "),a("code",[t._v("baseWarn")]),t._v(" 函数源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("baseWarn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("error")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`[Vue compiler]: ")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("msg"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到 "),s("code",[this._v("baseWarn")]),this._v(" 函数的作用无非就是通过 "),s("code",[this._v("console.error")]),this._v(" 函数打印错误信息。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第二个赋值的是 "),s("code",[this._v("platformIsPreTag")]),this._v(" 变量，如下是它的赋值语句：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("platformIsPreTag "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" options"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("isPreTag "),s("span",{attrs:{class:"token operator"}},[this._v("||")]),this._v(" no\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可知 "),a("code",[t._v("platformIsPreTag")]),t._v(" 变量的值为 "),a("code",[t._v("options.isPreTag")]),t._v(" 函数，该函数是一个编译器选项，其作用是通过给定的标签名字判断该标签是否是 "),a("code",[t._v("pre")]),t._v(" 标签。另外如上代码所示如果编译器选项中不包含 "),a("code",[t._v("options.isPreTag")]),t._v(" 函数则会降级使用 "),a("code",[t._v("no")]),t._v(" 函数，该函数是一个空函数，即什么都不做。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第三个赋值的是 "),s("code",[this._v("platformMustUseProp")]),this._v(" 变量，如下是它的赋值语句：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("platformMustUseProp "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" options"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("mustUseProp "),s("span",{attrs:{class:"token operator"}},[this._v("||")]),this._v(" no\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可知 "),a("code",[t._v("platformMustUseProp")]),t._v(" 变量的值为 "),a("code",[t._v("options.mustUseProp")]),t._v(" 函数，该函数也是一个编译器选项，其作用是用来检测一个属性在标签中是否要使用元素对象原生的 "),a("code",[t._v("prop")]),t._v(" 进行绑定，注意："),a("strong",[t._v("这里的 "),a("code",[t._v("prop")]),t._v(" 指的是元素对象的属性，而非 "),a("code",[t._v("Vue")]),t._v(" 中的 "),a("code",[t._v("props")]),t._v(" 概念")]),t._v("。同样的如果选项参数中不包含 "),a("code",[t._v("options.mustUseProp")]),t._v(" 函数则会降级为 "),a("code",[t._v("no")]),t._v(" 函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第四个赋值的是 "),s("code",[this._v("platformGetTagNamespace")]),this._v(" 变量，如下是它的赋值语句：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("platformGetTagNamespace "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" options"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("getTagNamespace "),s("span",{attrs:{class:"token operator"}},[this._v("||")]),this._v(" no\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可知 "),a("code",[t._v("platformGetTagNamespace")]),t._v(" 变量的值为 "),a("code",[t._v("options.getTagNamespace")]),t._v(" 函数，该函数是一个编译器选项，其作用是用来获取元素(标签)的命名空间。如果选项参数中不包含 "),a("code",[t._v("options.getTagNamespace")]),t._v(" 函数则会降级为 "),a("code",[t._v("no")]),t._v(" 函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第五个赋值的变量是 "),s("code",[this._v("transforms")]),this._v("，如下是它的赋值语句：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("transforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'transformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到 "),a("code",[t._v("transforms")]),t._v(" 变量的值与前面讲解的变量不同，它是值为 "),a("code",[t._v("pluckModuleFunction")]),t._v(" 函数的返回值，并以 "),a("code",[t._v("options.modules")]),t._v(" 选项以及一个字符串 "),a("code",[t._v("'transformNode'")]),t._v(" 作为参数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过前面的分析我们知道 "),s("code",[this._v("options.modules")]),this._v(" 的值，它是一个数组，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    staticKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'staticClass'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    transformNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    genData\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    staticKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'staticStyle'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    transformNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    genData\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    preTransformNode\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("为了避免大家遗忘，这里再提一下 "),a("code",[t._v("options.modules")]),t._v(" 既然是 "),a("code",[t._v("web")]),t._v(" 平台下的编译器选项参数，它们必然来自 "),a("code",[t._v("src/platforms/web/compiler/options.js")]),t._v(" 文件，其中 "),a("code",[t._v("options.modules")]),t._v(" 选项参数的值为来自 "),a("code",[t._v("src/platforms/web/compiler/modules/")]),t._v(" 目录下几个文件组合而成的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("知道了这些我们就可以具体查看一下 "),s("code",[this._v("pluckModuleFunction")]),this._v(" 函数的代码，看看它的作用是什么，"),s("code",[this._v("pluckModuleFunction")]),this._v(" 函数 来自 "),s("code",[this._v("src/compiler/helpers.js")]),this._v(" 文件，如下是其源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" pluckModuleFunction"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token constant"}},[t._v("F")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Object"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token constant"}},[t._v("F")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" modules\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" m"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("filter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_ "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" _"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("pluckModuleFunction")]),this._v(' 函数的作用是从第一个参数中"采摘"出函数名字与第二个参数所指定字符串相同的函数，并将它们组成一个数组。拿如下这段代码说明：')])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("transforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'transformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可知传递给 "),s("code",[this._v("pluckModuleFunction")]),this._v(" 函数的第二个参数的字符串为 "),s("code",[this._v("'transformNode'")]),this._v("，同时我们观察 "),s("code",[this._v("options.modules")]),this._v(" 数组：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    staticKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'staticClass'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    transformNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("    genData\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    staticKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'staticStyle'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    transformNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("    genData\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    preTransformNode\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示 "),a("code",[t._v("options.modules")]),t._v(" 数组的第一个元素与第二个元素都是一个对象，且这两个对象中都包含了 "),a("code",[t._v("transformNode")]),t._v(" 函数，但是第三个元素对象中没有 "),a("code",[t._v("transformNode")]),t._v(" 函数。此时按照 "),a("code",[t._v("pluckModuleFunction")]),t._v(" 函数的逻辑：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" modules\n  "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" m"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("filter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_ "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" _"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules\n  "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" m"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'transformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("filter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_ "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" _"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" m"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'transformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  transformNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  transformNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  undefined\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于 "),a("code",[t._v("options.modules")]),t._v(" 数组第三个元素对象不包含 "),a("code",[t._v("transformNode")]),t._v(" 函数，所以生成的数组中第三个元素的值为 "),a("code",[t._v("undefined")]),t._v("。这还没完，可以看到紧接着又在新生成的数组之上调用了 "),a("code",[t._v("filter")]),t._v(" 函数，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  transformNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  transformNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  undefined\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("filter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_ "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" _"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这么做的结果就是把值为 "),s("code",[this._v("undefined")]),this._v(" 的元素过滤掉，所以最终生成的数组如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token punctuation"}},[this._v("[")]),this._v("\n  transformNode"),s("span",{attrs:{class:"token punctuation"}},[this._v(",")]),this._v("\n  transformNode\n"),s("span",{attrs:{class:"token punctuation"}},[this._v("]")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("而这个数组就是变量 "),s("code",[this._v("transforms")]),this._v(" 的值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第六个赋值的变量是 "),s("code",[this._v("preTransforms")]),this._v("，如下是它的赋值语句：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("preTransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'preTransformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("与 "),a("code",[t._v("transforms")]),t._v(" 变量的赋值语句如出一辙，同样是使用 "),a("code",[t._v("pluckModuleFunction")]),t._v(" 函数，第一个参数同样是 "),a("code",[t._v("options.modules")]),t._v("，不同的是第二个参数为字符串 "),a("code",[t._v("'preTransformNode'")]),t._v("。也就是此时“采摘”的应该是名字为 "),a("code",[t._v("preTransformNode")]),t._v(" 的函数，并将它们组装成一个数组。由于 "),a("code",[t._v("options.modules")]),t._v(" 数组中只有第三个元素对象包含 "),a("code",[t._v("preTransformNode")]),t._v(" 函数，所以最终 "),a("code",[t._v("preTransforms")]),t._v(" 变量的值为：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("preTransforms "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token punctuation"}},[this._v("[")]),this._v("preTransformNode"),s("span",{attrs:{class:"token punctuation"}},[this._v("]")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第七个赋值的变量是 "),s("code",[this._v("postTransforms")]),this._v("，如下是它的赋值语句：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("postTransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'postTransformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可知此时“采摘”的应该是名字为 "),a("code",[t._v("postTransformNode")]),t._v(" 的函数，并将它们组装成一个数组。由于 "),a("code",[t._v("options.modules")]),t._v(" 数组中的三个元素对象都不包含 "),a("code",[t._v("postTransformNode")]),t._v(" 函数，所以最终 "),a("code",[t._v("postTransforms")]),t._v(" 变量的值将是一个空数组：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("preTransforms "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token punctuation"}},[this._v("[")]),s("span",{attrs:{class:"token punctuation"}},[this._v("]")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后一个赋值的变量为 "),s("code",[this._v("delimiters")]),this._v("，如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("delimiters "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" options"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("delimiters\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("它的值为 "),s("code",[this._v("options.delimiters")]),this._v(" 属性，它的值就是在创建 "),s("code",[this._v("Vue")]),this._v(" 实例对象时所传递的 "),s("code",[this._v("delimiters")]),this._v(" 选项，它是一个数组。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stack "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" preserveWhitespace "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("preserveWhitespace "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentParent\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" inVPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" inPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" warned "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先定义的是 "),a("code",[t._v("stack")]),t._v(" 常量，它的初始值是一个空数组。我们在讲解创建 "),a("code",[t._v("AST")]),t._v(" 思路的时候也使用到了 "),a("code",[t._v("stack")]),t._v(" 数组，当时讲到了它的作用是用来修正当前正在解析元素的父级。在 "),a("code",[t._v("stack")]),t._v(" 常量之后定义了 "),a("code",[t._v("preserveWhitespace")]),t._v(" 常量，它是一个布尔值并且它的值与编译器选项中的 "),a("code",[t._v("options.preserveWhitespace")]),t._v(" 选项有关，只要 "),a("code",[t._v("options.preserveWhitespace")]),t._v(" 的值不为 "),a("code",[t._v("false")]),t._v("，那么 "),a("code",[t._v("preserveWhitespace")]),t._v(" 的值就为真。其中 "),a("code",[t._v("options.preserveWhitespace")]),t._v(" 选项用来告诉编译器在编译 "),a("code",[t._v("html")]),t._v(" 字符串时是否放弃标签之间的空格，如果为 "),a("code",[t._v("true")]),t._v(" 则代表放弃。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接着定义了 "),a("code",[t._v("root")]),t._v(" 变量，我们知道 "),a("code",[t._v("parse")]),t._v(" 函数的返回值就是 "),a("code",[t._v("root")]),t._v(" 变量，所以 "),a("code",[t._v("root")]),t._v(" 变量就是最终的 "),a("code",[t._v("AST")]),t._v("。在 "),a("code",[t._v("root")]),t._v(" 变量之后定义了 "),a("code",[t._v("currentParent")]),t._v(" 变量，我们在讲解创建 "),a("code",[t._v("AST")]),t._v(" 思路时也定义了一个 "),a("code",[t._v("currentParent")]),t._v("，我们知道元素描述对象之间的父子关系就是靠该变量进行联系的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接着又定义了三个变量，分别是 "),a("code",[t._v("inVPre")]),t._v("、"),a("code",[t._v("inPre")]),t._v(" 以及 "),a("code",[t._v("warned")]),t._v("，并且它们的初始值都为 "),a("code",[t._v("false")]),t._v("。其中 "),a("code",[t._v("inVPre")]),t._v(" 变量用来标识当前解析的标签是否在拥有 "),a("code",[t._v("v-pre")]),t._v(" 的标签之内，"),a("code",[t._v("inPre")]),t._v(" 变量用来标识当前正在解析的标签是否在 "),a("code",[t._v("<pre></pre>")]),t._v(" 标签之内。而 "),a("code",[t._v("warned")]),t._v(" 变量则用于接下来定义的 "),a("code",[t._v("warnOnce")]),t._v(" 函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warnOnce")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("warned"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    warned "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("warned")]),t._v(" 变量的初始值为 "),a("code",[t._v("false")]),t._v("，通过如上代码可以看到 "),a("code",[t._v("warnOnce")]),t._v(" 函数同样是用来打印警告信息的函数，只不过 "),a("code",[t._v("warnOnce")]),t._v(" 函数就如它的名字一样，只会打印一次警告信息，并且 "),a("code",[t._v("warnOnce")]),t._v(" 函数也是通过调用 "),a("code",[t._v("warn")]),t._v(" 函数来实现的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("warnOnce")]),this._v(" 函数的下面定义了 "),s("code",[this._v("closeElement")]),this._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("closeElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// check pre state")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inVPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("platformIsPreTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// apply post-transforms")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" postTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    postTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("经过了一系列的准备，我们终于到了最关键的一步，即调用 "),s("code",[this._v("parseHTML")]),this._v(" 函数解析模板字符串并借助它来构建一棵 "),s("code",[this._v("AST")]),this._v("，如下是调用 "),s("code",[this._v("parseHTML")]),this._v(" 函数时所传递的选项参数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  warn"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  expectHTML"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expectHTML"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  isUnaryTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isUnaryTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  canBeLeftOpenTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("canBeLeftOpenTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shouldDecodeNewlines"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlines"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shouldDecodeNewlinesForHref"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlinesForHref"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shouldKeepComment"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("comments"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("chars")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("comment")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、"),a("code",[t._v("start")]),t._v(" 钩子函数，在解析 "),a("code",[t._v("html")]),t._v(" 字符串时每次遇到"),a("strong",[t._v("开始标签")]),t._v("时就会调用该函数")]),a("li",[t._v("2、"),a("code",[t._v("end")]),t._v(" 钩子函数，在解析 "),a("code",[t._v("html")]),t._v(" 字符串时每次遇到"),a("strong",[t._v("结束标签")]),t._v("时就会调用该函数")]),a("li",[t._v("3、"),a("code",[t._v("chars")]),t._v(" 钩子函数，在解析 "),a("code",[t._v("html")]),t._v(" 字符串时每次遇到"),a("strong",[t._v("纯文本")]),t._v("时就会调用该函数")]),a("li",[t._v("4、"),a("code",[t._v("comment")]),t._v(" 钩子函数，在解析 "),a("code",[t._v("html")]),t._v(" 字符串时每次遇到"),a("strong",[t._v("注释节点")]),t._v("时就会调用该函数")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("下面我们就从 "),a("code",[t._v("start")]),t._v(" 钩子函数开始说起，为什么从 "),a("code",[t._v("start")]),t._v(" 钩子函数开始呢？因为正常情况下，解析一段 "),a("code",[t._v("html")]),t._v(" 字符串时必然最先遇到的就是开始标签。所以我们从 "),a("code",[t._v("start")]),t._v(" 钩子函数开始讲解，在讲解的过程中为了说明某些问题我们会逐个举例。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"解析一个开始标签需要做的事情"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析一个开始标签需要做的事情","aria-hidden":"true"}},[this._v("#")]),this._v(" 解析一个开始标签需要做的事情")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接下来我们就从 "),a("code",[t._v("start")]),t._v(" 钩子函数开始，研究一下解析一个开始标签都需要做哪些事情，如下是在 "),a("code",[t._v("parse")]),t._v(" 函数中，调用 "),a("code",[t._v("parseHTML")]),t._v(" 函数时传递的 "),a("code",[t._v("start")]),t._v(" 钩子函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们知道 "),a("code",[t._v("start")]),t._v(" 钩子函数是接收五个参数的，但是如上代码中只使用到了 "),a("code",[t._v("start")]),t._v(" 钩子函数的前三个参数，也就是说只需要这三个参数就足够完成任务了。这三个参数分别是标签名字 "),a("code",[t._v("tag")]),t._v("，该标签的属性数组 "),a("code",[t._v("attrs")]),t._v("，以及代表着该标签是否是一元标签的标识 "),a("code",[t._v("unary")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("start")]),this._v(" 钩子函数的内部首先执行的是如下这句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ns "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("platformGetTagNamespace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("为了让大家更好的理解，我们这里规定一些事情，比如既然我们讲解的是 "),a("code",[t._v("start")]),t._v(" 钩子函数，那么当前的解析必然处于遇到一个开始标签的阶段，我们把当前解析所遇到的开始标签称为："),a("strong",[t._v("当前元素")]),t._v("，另外我们把"),a("strong",[t._v("当前元素")]),t._v("的父标签称为："),a("strong",[t._v("父级元素")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上这句代码定义了 "),a("code",[t._v("ns")]),t._v(" 常量，它的值为标签的命名空间，如何获取当前元素的命名空间呢？首先检测 "),a("code",[t._v("currentParent")]),t._v(" 变量是否存在，我们知道 "),a("code",[t._v("currentParent")]),t._v(" 变量为当前元素的父级元素描述对象，如果当前元素存在父级并且父级元素存在命名空间，则使用父级的命名空间作为当前元素的命名空间。如果父级元素不存在或父级元素没有命名空间，那么会通过调用 "),a("code",[t._v("platformGetTagNamespace(tag)")]),t._v(" 函数获取当前元素的命名空间。举个例子，假设我们解析的模板字符串为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("svg")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("width")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("100%"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("height")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("100%"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("version")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("1.1"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("xmlns")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://www.w3.org/2000/svg"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("rect")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("x")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("20"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("y")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("20"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("width")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("250"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("height")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("250"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token style-attr language-css"}},[a("span",{attrs:{class:"token attr-name"}},[t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("style")])]),a("span",{attrs:{class:"token punctuation"}},[t._v('="')]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token property"}},[t._v("fill")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("blue"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")])]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("svg")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上是用来画一个蓝色矩形的 "),a("code",[t._v("svg")]),t._v(" 代码，其中我们使用了两个标签："),a("code",[t._v("svg")]),t._v(" 标签和 "),a("code",[t._v("rect")]),t._v(" 标签，当解析如上代码时首先会遇到 "),a("code",[t._v("svg")]),t._v(" 标签的开始标签，由于 "),a("code",[t._v("svg")]),t._v(" 标签没有父级元素，所以会通过 "),a("code",[t._v("platformGetTagNamespace(tag)")]),t._v(" 获取 "),a("code",[t._v("svg")]),t._v(" 标签的命名空间，最终得到 "),a("code",[t._v("svg")]),t._v(" 字符串：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token function"}},[this._v("platformGetTagNamespace")]),s("span",{attrs:{class:"token punctuation"}},[this._v("(")]),s("span",{attrs:{class:"token string"}},[this._v("'svg'")]),s("span",{attrs:{class:"token punctuation"}},[this._v(")")]),this._v("  "),s("span",{attrs:{class:"token comment"}},[this._v("// 'svg'")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("下一个遇到的开始标签则是 "),a("code",[t._v("rect")]),t._v(" 标签的开始标签，由于 "),a("code",[t._v("rect")]),t._v(" 标签存在父级元素("),a("code",[t._v("svg")]),t._v(" 标签)，所以此时 "),a("code",[t._v("rect")]),t._v(" 标签会使用它父级元素的命名空间作为自己的命名空间。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("platformGetTagNamespace")]),this._v(" 函数只会获取 "),s("code",[this._v("svg")]),this._v(" 和 "),s("code",[this._v("math")]),this._v(" 这两个标签的命名空间，但这两个标签的所有子标签都会继承它们两个的命名空间。对于其他标签则不存在命名空间。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总之在 "),s("code",[this._v("start")]),this._v(" 钩子函数内部首先会尝试获取一个元素的命名空间，并将获取到的命名空间的名字赋值给 "),s("code",[this._v("ns")]),this._v(" 常量，这个常量在后面会用到。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在获取命名空间之后，执行的是如下这段 "),s("code",[this._v("if")]),this._v(" 条件语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isIE "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ns "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'svg'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  attrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("guardIESVGBug")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("svg")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token namespace"}},[t._v("xmlns:")]),t._v("feature")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://www.openplans.org/topp"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("svg")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("svg")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token namespace"}},[t._v("xmlns:")]),t._v("NS1")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token namespace"}},[t._v("NS1:")]),a("span",{attrs:{class:"token namespace"}},[t._v("xmlns:")]),t._v("feature")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://www.openplans.org/topp"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("svg")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("标签中多了 "),a("code",[t._v("'xmlns:NS1=\"\" NS1:'")]),t._v(" 这段字符串，解决办法也很简单，将整个多余的字符串去掉即可。而 "),a("code",[t._v("guardIESVGBug")]),t._v(" 函数就是用来修改 "),a("code",[t._v("NS1:xmlns:feature")]),t._v(" 属性并移除 "),a("code",[t._v('xmlns:NS1=""')]),t._v(" 属性的，如下是 "),a("code",[t._v("guardIESVGBug")]),t._v(" 函数的源码以及它需要的两个正则：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ieNSBug "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^xmlns:NS\\d+/")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ieNSPrefix "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^NS\\d+:/")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore next */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("guardIESVGBug")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" attr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("ieNSBug"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      attr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" attr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ieNSPrefix"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attr"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("guardIESVGBug")]),this._v(" 函数之前定义了两个正则常量，其中 "),s("code",[this._v("ieNSBug")]),this._v(" 正则用来匹配那些以字符串 "),s("code",[this._v("xmlns:NS")]),this._v(" 再加一个或多个数字组成的字符串开头的属性名，如：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("svg")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token namespace"}},[t._v("xmlns:")]),t._v("NS1")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("svg")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上标签的 "),a("code",[t._v("xmlns:NS1")]),t._v(" 属性将会被 "),a("code",[t._v("ieNSBug")]),t._v(" 正则匹配成功。另外一个正则常量是 "),a("code",[t._v("ieNSPrefix")]),t._v("，它用来匹配那些以字符串 "),a("code",[t._v("NS")]),t._v(" 再加一个或多个数字以及字符 "),a("code",[t._v(":")]),t._v(" 所组成的字符串开头的属性名，如：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("svg")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token namespace"}},[t._v("NS1:")]),a("span",{attrs:{class:"token namespace"}},[t._v("xmlns:")]),t._v("feature")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://www.openplans.org/topp"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("svg")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上标签的 "),s("code",[this._v("NS1:xmlns:feature")]),this._v(" 属性将被 "),s("code",[this._v("ieNSPrefix")]),this._v(" 正则匹配成功。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("guardIESVGBug")]),t._v(" 函数接收元素的属性数组作为参数，并返回一个新的数组，新数组与原数组结构相同。可以看到 "),a("code",[t._v("guardIESVGBug")]),t._v(" 函数内部通过 "),a("code",[t._v("for")]),t._v(" 循环遍历了元素的属性数组，接着使用正则 "),a("code",[t._v("ieNSBug")]),t._v(" 去匹配属性名字，可以发现只要不满足 "),a("code",[t._v("ieNSBug")]),t._v(" 正则的属性名，都会尝试使用 "),a("code",[t._v("ieNSPrefix")]),t._v(" 正则去匹配该属性名并将匹配到的字符替换为空字符串。如下是渲染产生 "),a("code",[t._v("bug")]),t._v(" 后的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("svg")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token namespace"}},[t._v("xmlns:")]),t._v("NS1")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token namespace"}},[t._v("NS1:")]),a("span",{attrs:{class:"token namespace"}},[t._v("xmlns:")]),t._v("feature")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://www.openplans.org/topp"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("svg")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在解析如上标签时，传递给 "),s("code",[this._v("start")]),this._v(" 钩子函数的标签属性数组 "),s("code",[this._v("attrs")]),this._v(" 为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("attrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'xmlns:NS1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'NS1:xmlns:feature'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'http://www.openplans.org/topp'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在经过 "),a("code",[t._v("guardIESVGBug")]),t._v(" 函数处理之后，属性数组中的第一项因为属性名满足 "),a("code",[t._v("ieNSBug")]),t._v(" 正则被剔除，第二项属性名字 "),a("code",[t._v("NS1:xmlns:feature")]),t._v(" 将被变为 "),a("code",[t._v("xmlns:feature")]),t._v("，所以 "),a("code",[t._v("guardIESVGBug")]),t._v(" 返回的属性数组为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("attrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'xmlns:feature'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'http://www.openplans.org/topp'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是 "),s("code",[this._v("guardIESVGBug")]),this._v(" 函数的作用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("处理完 "),s("code",[this._v("IE")]),this._v(" 的 "),s("code",[this._v("SVG")]),this._v(" 问题之后，执行的是如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createASTElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ns "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ns\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码是很关键的一段代码，如上高亮的那句代码所示，这句代码的执行为当前元素创建了描述对象，并且元素描述对象的创建是通过我们前面讲过的 "),a("code",[t._v("createASTElement")]),t._v(" 完成的，并将当前标签的元素描述对象赋值给 "),a("code",[t._v("element")]),t._v(" 变量。紧接着检查当前元素是否存在命名空间 "),a("code",[t._v("ns")]),t._v("，如果存在则在元素对象上添加 "),a("code",[t._v("ns")]),t._v(" 属性，其值为命名空间的值。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过如上代码可知，如果当前解析的开始标签为 "),a("code",[t._v("svg")]),t._v(" 标签或者 "),a("code",[t._v("math")]),t._v(" 标签或者它们两个的子节点标签，都将会比其他 "),a("code",[t._v("html")]),t._v(" 标签的元素描述对象多出一个 "),a("code",[t._v("ns")]),t._v(" 属性，且该属性标识了该标签的命名空间。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("isForbiddenTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isServerRendering")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("forbidden "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'Templates should only be responsible for mapping the state to the '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'UI. Avoid placing tags with side-effects in your templates, such as '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`<")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("tag"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(">`")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("', as they will not be parsed.'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码是一段 "),a("code",[t._v("if")]),t._v(" 条件语句块，根据判断条件可知，该 "),a("code",[t._v("if")]),t._v(" 语句用来判断非服务端渲染情况下，当前元素是否是禁止在模板中使用的标签。其中使用 "),a("code",[t._v("isForbiddenTag(element)")]),t._v(" 函数检查当前元素是否为被禁止的标签，什么是被禁止的标签呢？"),a("code",[t._v("<style>")]),t._v(" 标签和 "),a("code",[t._v("<script>")]),t._v(" 都被认为是禁止的标签，因为 "),a("code",[t._v("Vue")]),t._v(" 认为模板应该只负责做数据状态到 "),a("code",[t._v("UI")]),t._v(" 的映射，而不应该存在引起副作用的代码，如果你的模板中存在 "),a("code",[t._v("<script>")]),t._v(" 标签，那么该标签内的代码很容易引起副作用。但有一种情况例外，比如其中一种定义模板的方式为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("script type"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"text/x-template"')]),t._v(" id"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"hello-world-template"')]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello hello hello"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("把模板放到 "),a("code",[t._v("<script>")]),t._v(" 元素中，并在 "),a("code",[t._v("<script>")]),t._v(" 元素上添加 "),a("code",[t._v('type="text/x-template"')]),t._v(" 属性。可以看到 "),a("code",[t._v("Vue")]),t._v(" 并非禁止了所有的 "),a("code",[t._v("<script>")]),t._v(" 元素，这在 "),a("code",[t._v("isForbiddenTag")]),t._v(" 函数中是有体现的，如下是 "),a("code",[t._v("isForbiddenTag")]),t._v(" 函数的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isForbiddenTag")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'style'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'script'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'text/javascript'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("isForbiddenTag")]),this._v(" 函数接收一个元素描述对象作为参数，并返回布尔值，如果返回值为 "),s("code",[this._v("true")]),this._v(" 则代表该标签是被禁止的，否则为非禁止的。根据源码可知以下标签为被禁止的标签：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、"),a("code",[t._v("<style>")]),t._v(" 标签为被禁止的标签")]),a("li",[t._v("2、没有指定 "),a("code",[t._v("type")]),t._v(" 属性或虽然指定了 "),a("code",[t._v("type")]),t._v(" 属性但其值为 "),a("code",[t._v("text/javascript")]),t._v(" 的 "),a("code",[t._v("<script>")]),t._v(" 标签被认为是被禁止的")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果当前标签是被禁止的，并且在非服务端渲染的情况下，会打印警告信息，同时还会在当前元素的描述对象上添加 "),s("code",[this._v("el.forbidden")]),this._v(" 属性，并将其值设置为 "),s("code",[this._v("true")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" preTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" preTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码中使用 "),a("code",[t._v("for")]),t._v(" 循环遍历了 "),a("code",[t._v("preTransforms")]),t._v(" 数组，我们知道 "),a("code",[t._v("preTransforms")]),t._v(" 是通过 "),a("code",[t._v("pluckModuleFunction")]),t._v(" 函数从 "),a("code",[t._v("options.modules")]),t._v(" 选项中筛选出名字为 "),a("code",[t._v("preTransformNode")]),t._v(" 函数所组成的数组。该数组中每个元素都是一个函数，所以如上代码的 "),a("code",[t._v("for")]),t._v(" 循环内部直接调用了 "),a("code",[t._v("preTransforms")]),t._v(" 数组中的每一个函数并为这些函数传递了两个参数，分别是当前元素描述对象("),a("code",[t._v("element")]),t._v(")以及编译器选项("),a("code",[t._v("options")]),t._v(")。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里我们简单地说一下 "),a("code",[t._v("preTransforms")]),t._v(" 数组中的函数的作用，其实本质上这些函数的作用与我们之前见到过的 "),a("code",[t._v("process*")]),t._v(" 系列的函数没什么区别，都是用来对当前元素描述对象做进一步处理。不仅仅是 "),a("code",[t._v("preTransforms")]),t._v(" 数组，对于 "),a("code",[t._v("transforms")]),t._v(" 数组和 "),a("code",[t._v("postTransforms")]),t._v(" 数组也是一样的，它们之间的区别就像它们的名字一样，根据不同的调用时机为它们定义了相应的名字。那么为什么把这三个数组中的处理函数与当前文件中 "),a("code",[t._v("process*")]),t._v(" 系列函数区分开呢？这是出于平台化的考虑，通过前面的分析我们知道 "),a("code",[t._v("preTransforms")]),t._v(" 数组中的那些 "),a("code",[t._v("preTransformNode")]),t._v(" 函数是 "),a("code",[t._v("src/platforms/web/compiler/modules")]),t._v(" 目录下定义的一些文件定义的，根据目录路径可知这些代码应该是用来处理 "),a("code",[t._v("web")]),t._v(" 平台相关逻辑的，除了 "),a("code",[t._v("web")]),t._v(" 平台之外我们也可以看到 "),a("code",[t._v("weex")]),t._v(" 平台下相应的代码，你在源码中是能够找到这个目录的："),a("code",[t._v("src/platforms/weex/compiler/modules")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总之你只需要知道 "),s("code",[this._v("preTransforms")]),this._v(" 数组中的那些函数与 "),s("code",[this._v("process*")]),this._v(" 系列函数唯一的区别就是平台化的区分即可。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("根据我们前面的分析，实际上 "),a("code",[t._v("preTransforms")]),t._v(" 数组中只有一个函数，这个函数就是由 "),a("code",[t._v("src/platforms/web/compiler/modules/model.js")]),t._v(" 文件导出的 "),a("code",[t._v("preTransformNode")]),t._v(" 函数。大家可以打开该文件查看一下 "),a("code",[t._v("preTransformNode")]),t._v(" 函数，可以发现该函数内部大量使用了 "),a("code",[t._v("process*")]),t._v(" 系列的函数，并且该函数只用来处理 "),a("code",[t._v("input")]),t._v(" 标签，正是由于这一点，所以我们决定暂时不对其进行讲解，因为这会让我们脱离主线。在接下来的讲解中我们会逐个击破 "),a("code",[t._v("process*")]),t._v(" 系列函数的作用，等大家了解了 "),a("code",[t._v("process*")]),t._v(" 系列函数所做的事情之后再回头来看 "),a("code",[t._v("preTransformNode")]),t._v(" 函数的代码会更加容易理解。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processPre")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inVPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("platformIsPreTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  inPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRawAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// structural directives")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// element-scope stuff")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到这段代码开始大量调用 "),s("code",[this._v("process*")]),this._v(" 系列的函数，前面说过了，这其实就是在对当前元素描述对象做额外的处理，使得该元素描述对象能更好的描述一个标签。简单点说就是在元素描述对象上添加各种各样的具有标识作用的属性，就比如之前遇到的 "),s("code",[this._v("ns")]),this._v(" 属性和 "),s("code",[this._v("forbidden")]),this._v(" 属性，它们都能够对标签起到描述作用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不过我们本节主要总结"),s("strong",[this._v("解析一个开始标签需要做的事情")]),this._v("，所以暂时不具体去看上面这些代码的实现。我们继续往下走，接下来定义了一个叫做 "),s("code",[this._v("checkRootConstraints")]),this._v(" 的函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("checkRootConstraints")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'slot'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'template'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warnOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Cannot use <")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("> as component root element because it may `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'contain multiple nodes.'")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("hasOwnProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warnOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'Cannot use v-for on stateful component root element because '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'it renders multiple elements.'")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该函数的作用是什么呢？它的作用是用来检测模板根元素是否符合要求，我们知道在编写 "),a("code",[t._v("Vue")]),t._v(" 模板的时候会受到两种约束，首先模板必须有且仅有一个被渲染的根元素，第二不能使用 "),a("code",[t._v("slot")]),t._v(" 标签和 "),a("code",[t._v("template")]),t._v(" 标签作为模板的根元素，对于第一点为什么模板必须有且仅有一个被渲染的根元素，我们会在代码生成的部分为大家讲解，对于第二点为什么不能使用 "),a("code",[t._v("slot")]),t._v(" 和 "),a("code",[t._v("template")]),t._v(" 标签作为模板根元素，这是因为 "),a("code",[t._v("slot")]),t._v(" 作为插槽，它的内容是由外界决定的，而插槽的内容很有可能渲染多个节点，"),a("code",[t._v("template")]),t._v(" 元素的内容虽然不是由外界决定的，但它本身作为抽象组件是不会渲染任何内容到页面的，而其又可能包含多个子节点，所以也不允许使用 "),a("code",[t._v("template")]),t._v(" 标签作为根节点。总之这些限制都是出于"),a("strong",[t._v("必须有且仅有一个根元素")]),t._v("考虑的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到在 "),a("code",[t._v("checkRootConstraints")]),t._v(" 函数内部首先通过判断 "),a("code",[t._v("el.tag === 'slot' || el.tag === 'template'")]),t._v(" 来判断根元素是否是 "),a("code",[t._v("slot")]),t._v(" 标签或 "),a("code",[t._v("template")]),t._v(" 标签，如果是则打印警告信息。接着又判断当前元素是否使用了 "),a("code",[t._v("v-for")]),t._v(" 指令，因为 "),a("code",[t._v("v-for")]),t._v(" 指令会渲染多个节点所以根元素是不允许使用 "),a("code",[t._v("v-for")]),t._v(" 指令的。另外大家注意在 "),a("code",[t._v("checkRootConstraints")]),t._v(" 函数内部打印警告信息时使用的是 "),a("code",[t._v("warnOnce")]),t._v(" 函数而非 "),a("code",[t._v("warn")]),t._v(" 函数，也就是说如果第一个 "),a("code",[t._v("warnOnce")]),t._v(" 函数执行并打印了警告信息那么第二个 "),a("code",[t._v("warnOnce")]),t._v(" 函数就不会再次打印警告信息，这么做的目的是每次只提示一个编译错误给用户，避免多次打印不同错误给用户造成迷惑，这是出于对开发者解决问题友好的考虑。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("checkRootConstraints")]),this._v(" 函数的下面是一段 "),s("code",[this._v("if...elseif")]),this._v(" 语句块，我们首先查看 "),s("code",[this._v("if")]),this._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element\n  "),a("span",{attrs:{class:"token function"}},[t._v("checkRootConstraints")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("if")]),t._v(" 语句块的判断条件是如果 "),a("code",[t._v("root")]),t._v(" 不存在则执行语句块内的代码，我们知道 "),a("code",[t._v("root")]),t._v(" 变量在一开始是不存在的，如果 "),a("code",[t._v("root")]),t._v(" 不存在那说明当前元素应该就是根元素，所以在 "),a("code",[t._v("if")]),t._v(" 语句块内直接将当前元素的描述对象 "),a("code",[t._v("element")]),t._v(" 赋值给 "),a("code",[t._v("root")]),t._v(" 变量，同时会调用上面刚刚讲过的 "),a("code",[t._v("checkRootConstraints")]),t._v(" 函数检查根元素是否符合要求。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们再来看 "),a("code",[t._v("elseif")]),t._v(" 语句的条件，它检测了 "),a("code",[t._v("stack.length")]),t._v(" 是否为 "),a("code",[t._v("0")]),t._v("，也就是说 "),a("code",[t._v("stack")]),t._v(" 数组为空的情况下会执行 "),a("code",[t._v("elseif")]),t._v(" 语句块内的代码。我们想一下如果 "),a("code",[t._v("stack")]),t._v(" 数组为空并且当前正在解析开始标签，这说明什么问题？要想知道这个问题我们首先要知道 "),a("code",[t._v("stack")]),t._v(" 数组的作用，前面已经多次提到每当遇到一个非一元标签时就会将该标签的描述对象放进数组，并且每当遇到一个结束标签时都会将该标签的描述对象从 "),a("code",[t._v("stack")]),t._v(" 数组中拿掉，那也就是说在只有一个根元素的情况下，正常解析完成一段 "),a("code",[t._v("html")]),t._v(" 代码后 "),a("code",[t._v("stack")]),t._v(" 数组应该为空，或者换个说法，即当 "),a("code",[t._v("stack")]),t._v(" 数组被清空后则说明整个模板字符串已经解析完毕了，但此时 "),a("code",[t._v("start")]),t._v(" 钩子函数仍然被调用了，这说明模板中存在多个根元素，这时 "),a("code",[t._v("elseif")]),t._v(" 语句块内的代码将被执行，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("warnOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Component template should contain exactly one root element. `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`If you are using v-if on multiple elements, `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`use v-else-if to chain them instead.`")])]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面这段代码的作用是什么呢？我们知道在编写 "),a("code",[t._v("Vue")]),t._v(" 模板时的约束是必须有且仅有一个被渲染的根元素，但你可以定义多个根元素，只要能够保证最终只渲染其中一个元素即可，能够达到这个目的的方式只有一种，那就是在多个根元素之间使用 "),a("code",[t._v("v-if")]),t._v(" 或 "),a("code",[t._v("v-else-if")]),t._v(" 或 "),a("code",[t._v("v-else")]),t._v("。我们来看如上代码的实现，首先观察如上代码中 "),a("code",[t._v("if")]),t._v(" 条件语句的判断条件：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里解释一下元素对象中的 "),a("code",[t._v(".if")]),t._v(" 属性、"),a("code",[t._v(".elseif")]),t._v(" 属性以及 "),a("code",[t._v(".else")]),t._v(" 属性都是哪里来的，它们是在通过 "),a("code",[t._v("processIf")]),t._v(" 函数处理元素描述对象时，如果发现元素的属性中有 "),a("code",[t._v("v-if")]),t._v(" 或 "),a("code",[t._v("v-else-if")]),t._v(" 或 "),a("code",[t._v("v-else")]),t._v("，则会在元素描述对象上添加相应的属性作为标识。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("回到上面的 "),a("code",[t._v("if")]),t._v(" 判断条件，首先 "),a("code",[t._v("root.if")]),t._v(" 必须为真，要知道一点，即无论定义多少个根元素，"),a("code",[t._v("root")]),t._v(" 变量始终存储的是第一个根元素的描述对象，所以 "),a("code",[t._v("root.if")]),t._v(" 为真就保证了第一个定义的根元素是使用了 "),a("code",[t._v("v-if")]),t._v(" 指令的。同时条件 "),a("code",[t._v("(element.elseif || element.else)")]),t._v(" 也必须为真，注意这里是 "),a("code",[t._v("element.elseif")]),t._v(" 或 "),a("code",[t._v("element.else")]),t._v("，而不是 "),a("code",[t._v("root.elseif")]),t._v(" 或 "),a("code",[t._v("root.else")]),t._v("。"),a("code",[t._v("root")]),t._v(" 为第一个根元素的描述对象，"),a("code",[t._v("element")]),t._v(" 为当前元素描述对象，即非第一个根元素的描述对象。如果以上条件成立就能够保证所有根元素都是由 "),a("code",[t._v("v-if")]),t._v("、"),a("code",[t._v("v-else-if")]),t._v("、"),a("code",[t._v("v-else")]),t._v(" 等指令控制的，这就间接保证了被渲染的根元素只有一个，此时 "),a("code",[t._v("if")]),t._v(" 语句块内的代码将被执行，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("checkRootConstraints")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" element\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("if")]),this._v(" 语句块内首先使用 "),s("code",[this._v("checkRootConstraints")]),this._v(" 函数检查当前元素是否符合作为根元素的要求，接着调用了 "),s("code",[this._v("addIfCondition")]),this._v(" 函数，该函数源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" condition"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTIfCondition"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ifConditions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ifConditions "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ifConditions"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("addIfCondition")]),this._v(" 函数接收两个参数，第一个参数为元素的描述对象，第二个参数的类型为 "),s("code",[this._v("ASTIfCondition")]),this._v("，说白了也是一个对象，该对象包含两个属性：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("declare type ASTIfCondition "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("string"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("分别是 "),s("code",[this._v("exp")]),this._v(" 属性和 "),s("code",[this._v("block")]),this._v(" 属性，我们根据调用 "),s("code",[this._v("addIfCondition")]),this._v(" 函数时传递的参数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("checkRootConstraints")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" element")]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可知 "),a("code",[t._v("exp")]),t._v(" 为当前元素描述对象的 "),a("code",[t._v("element.elseif")]),t._v(" 的值，而 "),a("code",[t._v("block")]),t._v(" 就是当前元素描述对象。并且第一个参数为 "),a("code",[t._v("root")]),t._v("，就是第一个根元素描述对象。此时再看 "),a("code",[t._v("addIfCondition")]),t._v(" 函数的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" condition"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTIfCondition"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ifConditions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ifConditions "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ifConditions"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("addIfCondition")]),t._v(" 函数内首先检查根元素描述对象是否有 "),a("code",[t._v("el.ifConditions")]),t._v(" 属性，如果没有则创建该属性同时初始化为空数组，接着将 "),a("code",[t._v("ASTIfCondition")]),t._v(" 类型的对象推进到该数组中，实际上该函数是一个通用的函数，不仅仅用在根元素中，它用在任何由 "),a("code",[t._v("v-if")]),t._v("、"),a("code",[t._v("v-else-if")]),t._v(" 以及 "),a("code",[t._v("v-else")]),t._v(" 组成的条件渲染的模板中。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过如上分析我们可以发现，具有 "),a("code",[t._v("v-else-if")]),t._v(" 或 "),a("code",[t._v("v-else")]),t._v(" 属性的元素的描述对象会被添加到具有 "),a("code",[t._v("v-if")]),t._v(" 属性的元素描述对象的 "),a("code",[t._v(".ifConnditions")]),t._v(" 数组中。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-else-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("b"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("解析后生成的 "),s("code",[this._v("AST")]),this._v(" 如下(简化版)：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  ifConditions"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'p'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略其他属性 */")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'span'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略其他属性 */")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略其他属性...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到代码 "),a("code",[t._v("v-else-if")]),t._v(" 和 "),a("code",[t._v("v-else")]),t._v(" 属性的元素描述对象都被添加到了带有 "),a("code",[t._v("v-if")]),t._v(" 属性的元素描述对象的 "),a("code",[t._v(".ifConditions")]),t._v(" 数组中，其实如上描述是不准确的，后面我们会发现带有 "),a("code",[t._v("v-if")]),t._v(" 属性的元素也会将自身的元素描述对象添加到自身的 "),a("code",[t._v(".ifConditions")]),t._v(" 数组中，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  ifConditions"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略其他属性 */")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'p'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略其他属性 */")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'span'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略其他属性 */")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略其他属性...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上就是实现允许使用 "),a("code",[t._v("v-if")]),t._v("、"),a("code",[t._v("v-else-if")]),t._v(" 和 "),a("code",[t._v("v-else")]),t._v(" 定义多个根元素的方式，我们顺带着讲解了一个重要的函数 "),a("code",[t._v("addIfCondition")]),t._v(" 的实现和使用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("话说回来，假如当前元素不满足条件："),s("code",[this._v("root.if && (element.elseif || element.else)")]),this._v("，那么在非生产环境下 "),s("code",[this._v("elseif")]),this._v(" 语句块的代码将会被执行：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("warnOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Component template should contain exactly one root element. `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`If you are using v-if on multiple elements, `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`use v-else-if to chain them instead.`")])]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到，在 "),s("code",[this._v("elseif")]),this._v(" 语句块内通过 "),s("code",[this._v("warnOnce")]),this._v(" 函数打印了警告信息给开发者友好的提示。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下是如下这段 "),s("code",[this._v("if")]),this._v(" 条件语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("forbidden"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不过我们暂时跳过它，我们优先看一下 "),s("code",[this._v("start")]),this._v(" 钩子函数的最后一段代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element\n  stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("closeElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上这段代码是一个 "),a("code",[t._v("if...else")]),t._v(" 条件分支语句块，我们首先看 "),a("code",[t._v("if")]),t._v(" 语句的条件，它检测了当前元素是否是非一元标签，前面我们说过了如果一个元素是非一元标签，那么应该将该元素的描述对象添加到 "),a("code",[t._v("stack")]),t._v(" 栈中，并且将 "),a("code",[t._v("currentParent")]),t._v(" 变量的值更新为当前元素的描述对象，如上代码中 "),a("code",[t._v("if")]),t._v(" 语句块内的代码说明了一切。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("反之，如果一个元素是一元标签，那么应该调用 "),a("code",[t._v("closeElement")]),t._v(" 函数闭合该元素。对于 "),a("code",[t._v("closeElement")]),t._v(" 函数我们后面再详细说，现在我们需要重点关注 "),a("code",[t._v("if")]),t._v(" 语句块内的两句代码，通过这两句代码我们至少能得到一个总结："),a("strong",[t._v("每当遇到一个非一元标签都会将该元素的描述对象添加到 "),a("code",[t._v("stack")]),t._v(" 数组，并且 "),a("code",[t._v("currentParent")]),t._v(" 始终存储的是 "),a("code",[t._v("stack")]),t._v(" 栈顶的元素，即当前解析元素的父级")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("forbidden"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先观察该 "),s("code",[this._v("if")]),this._v(" 条件语句的判断条件：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("currentParent "),s("span",{attrs:{class:"token operator"}},[this._v("&&")]),this._v(" "),s("span",{attrs:{class:"token operator"}},[this._v("!")]),this._v("element"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("forbidden\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果这个条件成立，则说明当前元素存在父级("),s("code",[this._v("currentParent")]),this._v(")，并且当前元素不是被禁止的元素。只有在这种情况下才会执行该 "),s("code",[this._v("if")]),this._v(" 条件语句块内的代码。在 "),s("code",[this._v("if")]),this._v(" 语句块内是如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processIfConditions")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotScope"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// scoped slot")]),t._v("\n  currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotTarget "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\"default\"'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scopedSlots "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scopedSlots "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentParent\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在如上这段代码中，最关键的代码应该是 "),s("code",[this._v("else")]),this._v(" 语句块内的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotScope"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// scoped slot")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentParent")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("else")]),t._v(" 语句块内，会把当前元素描述对象添加到父级元素描述对象("),a("code",[t._v("currentParent")]),t._v(")的 "),a("code",[t._v("children")]),t._v(" 数组中，同时将当前元素对象的 "),a("code",[t._v("parent")]),t._v(" 属性指向父级元素对象，这样就建立了元素描述对象间的父子级关系。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("但是就像我们前面讲过的，如果一个标签使用 "),a("code",[t._v("v-else-if")]),t._v(" 或 "),a("code",[t._v("v-else")]),t._v(" 指令，那么该元素的描述对象实际上会被添加到对应的 "),a("code",[t._v("v-if")]),t._v(" 元素描述对象的 "),a("code",[t._v("ifConditions")]),t._v(" 数组中，而非作为一个独立的子节点，这个工作就是由如上代码中 "),a("code",[t._v("if")]),t._v(" 语句块的代码完成的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processIfConditions")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotScope"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// scoped slot")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由如上代码所示的 "),a("code",[t._v("if")]),t._v(" 语句的条件可知，如果当前元素使用了 "),a("code",[t._v("v-else-if")]),t._v(" 或 "),a("code",[t._v("v-else")]),t._v(" 指令，则会调用 "),a("code",[t._v("processIfConditions")]),t._v(" 函数，同时将当前元素描述对象 "),a("code",[t._v("element")]),t._v(" 和父级元素的描述对象 "),a("code",[t._v("currentParent")]),t._v(" 作为参数传递，我们来看看 "),a("code",[t._v("processIfConditions")]),t._v(" 函数做了什么，如下是 "),a("code",[t._v("processIfConditions")]),t._v(" 函数的源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processIfConditions")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prev "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("findPrevElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prev "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" prev"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prev"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" el\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`v-")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'else-if=\"'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'else'")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(" `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`used on element <")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("> without corresponding v-if.`")])]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("processIfConditions")]),t._v(" 函数内部，首先通过 "),a("code",[t._v("findPrevElement")]),t._v(" 函数找到当前元素的前一个元素描述对象，并将其赋值给 "),a("code",[t._v("prev")]),t._v(" 常量，接着进入 "),a("code",[t._v("if")]),t._v(" 条件语句，判断当前元素的前一个元素是否使用了 "),a("code",[t._v("v-if")]),t._v(" 指令，我们知道对于使用了 "),a("code",[t._v("v-else-if")]),t._v(" 或 "),a("code",[t._v("v-else")]),t._v(" 指令的元素来讲，他们的前一个元素必然需要使用相符的 "),a("code",[t._v("v-if")]),t._v(" 指令才行。如果前一个元素确实使用了 "),a("code",[t._v("v-if")]),t._v(" 指令，那么则会调用 "),a("code",[t._v("addIfCondition")]),t._v(" 函数将当前元素描述对象添加到前一个元素的 "),a("code",[t._v("ifConditions")]),t._v(" 数组中。如果前一个元素没有使用 "),a("code",[t._v("v-if")]),t._v(" 指令，那么此时将会进入 "),a("code",[t._v("else...if")]),t._v(" 条件语句的判断，即如果是非生产环境下，会打印警告信息提示开发者没有相符的使用了 "),a("code",[t._v("v-if")]),t._v(" 指令的元素。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上是当前元素使用了 "),a("code",[t._v("v-else-if")]),t._v(" 或 "),a("code",[t._v("v-else")]),t._v(" 指令时的特殊处理，由此可知"),a("strong",[t._v("当一个元素使用了 "),a("code",[t._v("v-else-if")]),t._v(" 或 "),a("code",[t._v("v-else")]),t._v(" 指令时，它们是不会作为父级元素子节点的")]),t._v("，而是会被添加到相符的使用了 "),a("code",[t._v("v-if")]),t._v(" 指令的元素描述对象的 "),a("code",[t._v("ifConditions")]),t._v(" 数组中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果当前元素没有使用 "),s("code",[this._v("v-else-if")]),this._v(" 或 "),s("code",[this._v("v-else")]),this._v(" 指令，那么还会判断当前元素是否使用了 "),s("code",[this._v("slot-scope")]),this._v(" 特性，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotScope"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// scoped slot")]),t._v("\n  currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotTarget "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\"default\"'")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scopedSlots "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scopedSlots "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，如果一个元素使用了 "),a("code",[t._v("slot-scope")]),t._v(" 特性，那么该元素的描述对象会被添加到父级元素的 "),a("code",[t._v("scopedSlots")]),t._v(" 对象下，也就是说使用了 "),a("code",[t._v("slot-scope")]),t._v(" 特性的元素与使用了 "),a("code",[t._v("v-else-if")]),t._v(" 或 "),a("code",[t._v("v-else")]),t._v(" 指令的元素一样，他们都不会作为父级元素的子节点，对于使用了 "),a("code",[t._v("slot-scope")]),t._v(" 特性的元素来讲它们将被添加到父级元素描述对象的 "),a("code",[t._v("scopedSlots")]),t._v(" 对象下。另外由于如上代码中 "),a("code",[t._v("elseif")]),t._v(" 语句块涉及 "),a("code",[t._v("slot-scope")]),t._v(" 相关的处理，我们打算放到后面统一讲解。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着我们对 "),s("code",[this._v("findPrevElement")]),this._v(" 函数做一个补充讲解，"),s("code",[this._v("findPrevElement")]),this._v(" 函数的作用是寻找当前元素的前一个元素节点，如下是其源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("findPrevElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`text "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('" between v-if and v-else(-if) `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`will be ignored.`")])]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pop")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先 "),a("code",[t._v("findPrevElement")]),t._v(" 函数只用在了 "),a("code",[t._v("processIfConditions")]),t._v(" 函数中，它的作用就是当解析器遇到一个带有 "),a("code",[t._v("v-else-if")]),t._v(" 或 "),a("code",[t._v("v-else")]),t._v(" 指令的元素时，找到该元素的前一个元素节点，假设我们解析如下 "),a("code",[t._v("html")]),t._v(" 字符串：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-else-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("b"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-else")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("c"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当解析器遇到带有 "),a("code",[t._v("v-else-if")]),t._v(" 指令的 "),a("code",[t._v("p")]),t._v(" 标签时，那么此时它的前一个元素节点应该是带有 "),a("code",[t._v("v-if")]),t._v(" 指令的 "),a("code",[t._v("div")]),t._v(" 标签，如何找到该 "),a("code",[t._v("div")]),t._v(" 标签呢？由于当前正在解析的标签为 "),a("code",[t._v("p")]),t._v("，此时 "),a("code",[t._v("p")]),t._v(" 标签的元素描述对象还没有被添加到父级元素描述对象的 "),a("code",[t._v("children")]),t._v(" 数组中，所以此时父级元素描述对象的 "),a("code",[t._v("children")]),t._v(" 数组中最后一个元素节点就应该是 "),a("code",[t._v("div")]),t._v(" 元素。注意我们说的是"),a("strong",[t._v("最后一个元素节点")]),t._v("，而不是"),a("strong",[t._v("最后一个节点")]),t._v("。所以要想得到 "),a("code",[t._v("div")]),t._v(" 标签，我们只要找到父级元素描述对象的 "),a("code",[t._v("children")]),t._v(" 数组最后一个元素节点即可。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当解析器遇到带有 "),a("code",[t._v("v-else")]),t._v(" 指令的 "),a("code",[t._v("span")]),t._v(" 标签时，大家思考一下此时 "),a("code",[t._v("span")]),t._v(" 标签的前一个"),a("strong",[t._v("元素节点")]),t._v("是什么？答案还是 "),a("code",[t._v("div")]),t._v(" 标签，而不是 "),a("code",[t._v("p")]),t._v(" 标签，这是因为 "),a("code",[t._v("p")]),t._v(" 标签的元素描述对象没有被添加到父级元素描述对象的 "),a("code",[t._v("children")]),t._v(" 数组中，而是被添加到 "),a("code",[t._v("div")]),t._v(" 标签元素描述对象的 "),a("code",[t._v("ifConditions")]),t._v(" 数组中了。所以对于 "),a("code",[t._v("span")]),t._v(" 标签来讲，它的前一个元素节点仍然是 "),a("code",[t._v("div")]),t._v(" 标签。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总之我们发现 "),s("code",[this._v("findPrevElement")]),this._v(" 函数只需要找到父级元素描述对象的最后一个元素节点即可，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("findPrevElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`text "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('" between v-if and v-else(-if) `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`will be ignored.`")])]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pop")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("findPrevElement")]),t._v(" 函数通过 "),a("code",[t._v("while")]),t._v(" 循环从后向前遍历父级的子节点，并找到最后一个元素节点。理论上该节点就应该是带有 "),a("code",[t._v("v-if")]),t._v(" 指令的元素，如果该元素节点没有 "),a("code",[t._v("v-if")]),t._v(" 指令，会在 "),a("code",[t._v("processIfConditions")]),t._v(" 函数中打印警告信息。大家注意 "),a("code",[t._v("while")]),t._v(" 循环内的代码，使用 "),a("code",[t._v("if")]),t._v(" 语句检测了子节点的类型是否为 "),a("code",[t._v("1")]),t._v("，即是否为元素节点，只有是元素节点时才会将该节点的描述对象作为返回值返回。如果在找到元素节点之前遇到了非元素节点，那么 "),a("code",[t._v("else")]),t._v(" 分支的代码将会被执行：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`text "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('" between v-if and v-else(-if) `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`will be ignored.`")])]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pop")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮的那句代码所示，可以看到非元素节点被从 "),a("code",[t._v("children")]),t._v(" 数组中 "),a("code",[t._v("pop")]),t._v(" 出去，所以在非生产环境下如果该非元素节点的 "),a("code",[t._v(".text")]),t._v(" 属性如果不为空，则打印警告信息提示开发者这部分存在于 "),a("code",[t._v("v-if")]),t._v(" 指令和 "),a("code",[t._v("v-else(-if)")]),t._v(" 指令之间的内容将被忽略。什么意思呢？举个例子：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  aaaaa\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-else-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("b"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  bbbbb\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-else")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("c"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上代码中的文本 "),s("code",[this._v("aaaaa")]),this._v(" 和 "),s("code",[this._v("bbbbb")]),this._v(" 都将被忽略。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("到目前为止，我们大概粗略地过了一遍 "),s("code",[this._v("start")]),this._v(" 钩子函数的内容，接下来我们做一些总结，以使得我们的思路更加清晰：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、"),a("code",[t._v("start")]),t._v(" 钩子函数是当解析 "),a("code",[t._v("html")]),t._v(" 字符串遇到开始标签时被调用的。")]),a("li",[t._v("2、模板中禁止使用 "),a("code",[t._v("<style>")]),t._v(" 标签和那些没有指定 "),a("code",[t._v("type")]),t._v(" 属性或 "),a("code",[t._v("type")]),t._v(" 属性值为 "),a("code",[t._v("text/javascript")]),t._v(" 的 "),a("code",[t._v("<script>")]),t._v(" 标签。")]),a("li",[t._v("3、在 "),a("code",[t._v("start")]),t._v(" 钩子函数中会调用前置处理函数，这些前置处理函数都放在 "),a("code",[t._v("preTransforms")]),t._v(" 数组中，这么做的目的是为不同平台提供对应平台下的解析工作。")]),a("li",[t._v("4、前置处理函数执行完之后会调用一系列 "),a("code",[t._v("process*")]),t._v(" 函数继续对元素描述对象进行加工。")]),a("li",[t._v("5、通过判断 "),a("code",[t._v("root")]),t._v(" 是否存在来判断当前解析的元素是否为根元素。")]),a("li",[t._v("6、"),a("code",[t._v("slot")]),t._v(" 标签和 "),a("code",[t._v("template")]),t._v(" 标签不能作为根元素，并且根元素不能使用 "),a("code",[t._v("v-for")]),t._v(" 指令。")]),a("li",[t._v("7、可以定义多个根元素，但必须使用 "),a("code",[t._v("v-if")]),t._v("、"),a("code",[t._v("v-else-if")]),t._v(" 以及 "),a("code",[t._v("v-else")]),t._v(" 保证有且仅有一个根元素被渲染。")]),a("li",[t._v("8、构建 "),a("code",[t._v("AST")]),t._v(" 并建立父子级关系是在 "),a("code",[t._v("start")]),t._v(" 钩子函数中完成的，每当遇到非一元标签，会把它存到 "),a("code",[t._v("currentParent")]),t._v(" 变量中，当解析该标签的子节点时通过访问 "),a("code",[t._v("currentParent")]),t._v(" 变量获取父级元素。")]),a("li",[t._v("9、如果一个元素使用了 "),a("code",[t._v("v-else-if")]),t._v(" 或 "),a("code",[t._v("v-else")]),t._v(" 指令，则该元素不会作为子节点，而是会被添加到相符的使用了 "),a("code",[t._v("v-if")]),t._v(" 指令的元素描述对象的 "),a("code",[t._v("ifConditions")]),t._v(" 数组中。")]),a("li",[t._v("10、如果一个元素使用了 "),a("code",[t._v("slot-scope")]),t._v(" 特性，则该元素也不会作为子节点，它会被添加到父级元素描述对象的 "),a("code",[t._v("scopedSlots")]),t._v(" 属性中。")]),a("li",[t._v("11、对于没有使用条件指令或 "),a("code",[t._v("slot-scope")]),t._v(" 特性的元素，会正常建立父子级关系。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上的总结就是 "),a("code",[t._v("start")]),t._v(" 钩子函数在处理开始标签时所做的事情，实际上由于开始标签中包含了大量指令信息(如 "),a("code",[t._v("v-if")]),t._v(" 等)或特性信息(如 "),a("code",[t._v("slot-scope")]),t._v(" 等)，所以在生产 "),a("code",[t._v("AST")]),t._v(" 过程中，大部分工作都是由 "),a("code",[t._v("start")]),t._v(" 函数来完成的，接下来我们将更加细致的去讲解解析过程中的每一个细节。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"处理使用了v-pre指令的元素及其子元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理使用了v-pre指令的元素及其子元素","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理使用了v-pre指令的元素及其子元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("回到 "),s("code",[this._v("start")]),this._v(" 钩子函数中，我们开始对 "),s("code",[this._v("start")]),this._v(" 钩子函数内的代码做细致的分析，首先找到如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processPre")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inVPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了讲解的流畅性，同时也为了大家更容易理解，想要看明白如上代码的作用，我们首先需要了解一下 "),s("code",[this._v("processPre")]),this._v(" 函数的作用，如下是 "),s("code",[this._v("processPre")]),this._v(" 函数的源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processPre")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-pre'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("processPre")]),t._v(" 函数接收元素描述对象作为参数，在 "),a("code",[t._v("processPre")]),t._v(" 函数内部首先通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数并使用其返回值与 "),a("code",[t._v("null")]),t._v(" 做比较，如果 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数的返回值不等于 "),a("code",[t._v("null")]),t._v(" 则执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，即在元素描述对象上添加 "),a("code",[t._v(".pre")]),t._v(" 属性并将其值设置为 "),a("code",[t._v("true")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("大家猜测一下 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数的作用是什么？根据传递给该函数的两个参数：第一个参数是元素描述对象，第二个参数是一个字符串 "),a("code",[t._v("'v-pre'")]),t._v("。我们大概可以猜测到 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数应该能够获取给定元素的某个属性的值，那么如上代码就应该是获取给定元素的 "),a("code",[t._v("v-pre")]),t._v(" 属性的值。实际上我们的猜测是正确的，不过只正确了一部分，实际上 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数还会做更多事情，"),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数来自于 "),a("code",[t._v("src/compiler/helpers.js")]),t._v(" 文件，如下是其代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  removeFromMap"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("string "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" val\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" list "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        list"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("splice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("removeFromMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("getAndRemoveAttr")]),t._v(" 接收三个参数，其中第三个参数 "),a("code",[t._v("removeFromMap")]),t._v(" 是一个可选参数，并且它应该是一个布尔值，第一个参数 "),a("code",[t._v("el")]),t._v(" 为元素描述对象，第二个参数为要获取属性的名字。在 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数内部首先定义了 "),a("code",[t._v("val")]),t._v(" 变量，紧接着是一个 "),a("code",[t._v("if")]),t._v(" 条件语句块，其判断条件为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由此可知变量 "),a("code",[t._v("val")]),t._v(" 保存的是要获取属性的值，并且获取属性的值的方式是通过读取元素描述对象的 "),a("code",[t._v(".attrsMap")]),t._v(" 属性对象中与给定属性名字("),a("code",[t._v("name")]),t._v(")同名的属性值来实现的，我们知道元素描述对象的 "),a("code",[t._v(".attrsMap")]),t._v(" 对象是该元素所有属性的名值对应表。获取到属性值并赋值给 "),a("code",[t._v("val")]),t._v(" 变量后，会使用该属性值与 "),a("code",[t._v("null")]),t._v(" 做比较，如果不相等则说明属性值存在，此时会执行 "),a("code",[t._v("if")]),t._v(" 语句块的代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" list "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    list"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("splice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("if")]),t._v(" 语句块内遍历了元素描述对象的 "),a("code",[t._v("el.attrsList")]),t._v(" 数组，并通过属性名("),a("code",[t._v("name")]),t._v(")找到相应的数组元素，目的是使用数组的 "),a("code",[t._v("splice")]),t._v(" 方法将该数组元素从元素描述对象的 "),a("code",[t._v("attrsList")]),t._v(" 数组中移除。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着 "),s("code",[this._v("getAndRemoveAttr")]),this._v(" 函数还会做一件事情，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("removeFromMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果第三个参数为真，那么还会将该属性从属性名值表("),a("code",[t._v("attrsMap")]),t._v(")中移除。最后 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数会将属性值 "),a("code",[t._v("val")]),t._v(" 返回，当然啦如果属性不存在的话，则 "),a("code",[t._v("val")]),t._v(" 变量的值为 "),a("code",[t._v("undefined")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("举个例子直观感受一下 "),s("code",[this._v("getAndRemoveAttr")]),this._v(" 的作用，假设我们有如下模板：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("display"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上 "),s("code",[this._v("div")]),this._v(" 标签的元素描述对象为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略其他属性")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'display'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'display'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("假设我们现在使用 "),s("code",[this._v("getAndRemoveAttr")]),this._v(" 函数获取该元素的 "),s("code",[this._v("v-if")]),this._v(" 属性的值：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("则该函数的返回值为字符串 "),a("code",[t._v("'display'")]),t._v("，同时会将 "),a("code",[t._v("v-if")]),t._v(" 属性从 "),a("code",[t._v("attrsList")]),t._v(" 数组中移除，所以经过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数处理之后元素的描述对象将变为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略其他属性")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'display'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到 "),s("code",[this._v("attrsList")]),this._v(" 属性变为一个空数组，如果传递给 "),s("code",[this._v("getAndRemoveAttr")]),this._v(" 函数的第三个参数为真：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么除了将 "),s("code",[this._v("v-if")]),this._v(" 属性从 "),s("code",[this._v("attrsList")]),this._v(" 数组中移除之外，也会将其从 "),s("code",[this._v("attrsMap")]),this._v(" 中移除，此时元素描述对象将变为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略其他属性")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是 "),s("code",[this._v("getAndRemoveAttr")]),this._v(" 函数的作用，除了获取给定属性的值之外，还会将该属性从 "),s("code",[this._v("attrsList")]),this._v(" 数组中移除，并可以选择性地将该属性从 "),s("code",[this._v("attrsMap")]),this._v(" 对象中移除。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们回到 "),s("code",[this._v("processPre")]),this._v(" 函数中：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processPre")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-pre'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("现在来看 "),a("code",[t._v("processPre")]),t._v(" 函数的逻辑就很容易理解了，可知 "),a("code",[t._v("processPre")]),t._v(" 函数获取给定元素 "),a("code",[t._v("v-pre")]),t._v(" 属性的值，如果 "),a("code",[t._v("v-pre")]),t._v(" 属性的值不等于 "),a("code",[t._v("null")]),t._v(" 则会在元素描述对象上添加 "),a("code",[t._v(".pre")]),t._v(" 属性，并将其值设置为 "),a("code",[t._v("true")]),t._v("。这里简单提一下，由于使用 "),a("code",[t._v("v-pre")]),t._v(" 指令时不需要指定属性值，所以使用 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数获取到的属性值为空字符串，由于 "),a("code",[t._v("'' != null")]),t._v(" 成立，所以以上判断条件成立。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("了解了 "),s("code",[this._v("precessPre")]),this._v(" 函数的作用之后，我们再回到 "),s("code",[this._v("start")]),this._v(" 钩子函数中，如下高亮的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processPre")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    inVPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("高亮的代码判断了元素对象的 "),a("code",[t._v(".pre")]),t._v(" 属性是否为真，我们知道假如一个标签使用了 "),a("code",[t._v("v-pre")]),t._v(" 指令，那么经过 "),a("code",[t._v("processPre")]),t._v(" 函数处理之后，该元素描述对象的 "),a("code",[t._v(".pre")]),t._v(" 属性值为 "),a("code",[t._v("true")]),t._v("，这时会将 "),a("code",[t._v("inVPre")]),t._v(" 变量的值也设置为 "),a("code",[t._v("true")]),t._v("。当 "),a("code",[t._v("inVPre")]),t._v(" 变量为真时，意味着"),a("strong",[t._v("后续的所有解析工作都处于 "),a("code",[t._v("v-pre")]),t._v(" 环境下")]),t._v("，编译器会跳过拥有 "),a("code",[t._v("v-pre")]),t._v(" 指令元素以及其子元素的编译过程，所以后续的编译逻辑需要 "),a("code",[t._v("inVPre")]),t._v(" 变量作为标识才行。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外如上代码中我们要注意判断条件："),s("code",[this._v("if (!inVPre)")]),this._v("，该条件保证了如果当前解析工作已经处于 "),s("code",[this._v("v-pre")]),this._v(" 环境下了，则不需要再次执行该 "),s("code",[this._v("if")]),this._v(" 语句块内的代码。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下我们要讲的是 "),s("code",[this._v("start")]),this._v(" 钩子函数中的如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("platformIsPreTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  inPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码相对来说要简单一些，使用 "),a("code",[t._v("platformIsPreTag")]),t._v(" 函数判断当前元素是否是 "),a("code",[t._v("<pre>")]),t._v(" 标签，如果是 "),a("code",[t._v("<pre>")]),t._v(" 标签则将 "),a("code",[t._v("inPre")]),t._v(" 变量设置为 "),a("code",[t._v("true")]),t._v("。实际上 "),a("code",[t._v("inPre")]),t._v(" 变量与 "),a("code",[t._v("inVPre")]),t._v(" 变量的作用相同，都是用来作为一个标识，只不过 "),a("code",[t._v("inPre")]),t._v(" 变量标识着当前解析环境是否在 "),a("code",[t._v("<pre>")]),t._v(" 标签内，因为 "),a("code",[t._v("<pre>")]),t._v(" 标签内的解析行为与其他 "),a("code",[t._v("html")]),t._v(" 标签是不同。具体不同体现在：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、"),a("code",[t._v("<pre>")]),t._v(" 标签会对其所包含的 "),a("code",[t._v("html")]),t._v(" 字符实体进行解码")]),a("li",[t._v("2、"),a("code",[t._v("<pre>")]),t._v(" 标签会保留 "),a("code",[t._v("html")]),t._v(" 字符串编写时的空白")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRawAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// structural directives")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// element-scope stuff")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码是一个 "),a("code",[t._v("if...elseif")]),t._v(" 语句块，其中 "),a("code",[t._v("if")]),t._v(" 语句块内的代码会在判断条件 "),a("code",[t._v("inVPre")]),t._v(" 为真的情况下执行，"),a("code",[t._v("inVPre")]),t._v(" 为真说明当前解析环境是在 "),a("code",[t._v("v-pre")]),t._v(" 环境下。我们知道使用 "),a("code",[t._v("v-pre")]),t._v(" 指令的标签及其子标签的解析行为是不一致的，编译器会跳过使用了 "),a("code",[t._v("v-pre")]),t._v(" 指令元素及其子元素的编译工作。具体是如何跳过的呢？通过如上代码可知如果当前元素的解析处于 "),a("code",[t._v("v-pre")]),t._v(" 环境，则直接使用 "),a("code",[t._v("processRawAttrs")]),t._v(" 函数对元素描述对象进行加工。同时我们注意 "),a("code",[t._v("elseif")]),t._v(" 分支内的代码，可以看到如果当前元素的解析没有处于 "),a("code",[t._v("v-pre")]),t._v(" 环境，那么会调用一系列 "),a("code",[t._v("process*")]),t._v(" 函数来处理该元素的描述对象。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在假设我们要解析的标签使用了 "),s("code",[this._v("v-pre")]),this._v(" 指令，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-pre")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token namespace"}},[t._v("v-on:")]),t._v("click")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClick"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当解析如上 "),a("code",[t._v("html")]),t._v(" 字符串时首先会遇到 "),a("code",[t._v("div")]),t._v(" 开始标签，由于该 "),a("code",[t._v("div")]),t._v(" 开始标签使用了 "),a("code",[t._v("v-pre")]),t._v(" 指令，所以此时 "),a("code",[t._v("inVPre")]),t._v(" 的值为真，所以 "),a("code",[t._v("processRawAttrs")]),t._v(" 函数将被执行，如下是 "),a("code",[t._v("processRawAttrs")]),t._v(" 函数的源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processRawAttrs")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" attrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// non root node in pre blocks with no attributes")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("processRawAttrs")]),t._v(" 函数接收元素描述对象作为参数，其作用是将该元素所有属性全部作为原生的属性("),a("code",[t._v("attr")]),t._v(")处理。在 "),a("code",[t._v("processRawAttrs")]),t._v(" 函数内部首先定义了 "),a("code",[t._v("l")]),t._v(" 常量，它是元素描述对象属性数组 "),a("code",[t._v("el.attrsList")]),t._v(" 的长度，接着使用一个 "),a("code",[t._v("if")]),t._v(" 语句判断 "),a("code",[t._v("l")]),t._v(" 是否为真，如果为真说明该元素的开始标签上有属性，此时会执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，在 "),a("code",[t._v("if")]),t._v(" 语句块内首先定义了 "),a("code",[t._v("attrs")]),t._v(" 常量，它与 "),a("code",[t._v("el.attrs")]),t._v(" 属性有着相同的引用，初始值是长度为 "),a("code",[t._v("l")]),t._v(" 的数组。接着使用 "),a("code",[t._v("for")]),t._v(" 循环遍历 "),a("code",[t._v("el.attrsList")]),t._v(" 数组中的每一个属性，并将这些属性挪移到 "),a("code",[t._v("attrs")]),t._v(" 数组中：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到 "),a("code",[t._v("attrs")]),t._v(" 数组的每个元素与 "),a("code",[t._v("el.attrsList")]),t._v(" 数组中的元素相同，都是一个带有 "),a("code",[t._v("name")]),t._v(" 属性和 "),a("code",[t._v("value")]),t._v(" 属性的对象，其中 "),a("code",[t._v("name")]),t._v(" 属性存储着属性的名字，"),a("code",[t._v("value")]),t._v(" 属性存储着属性的值，这里大家注意 "),a("code",[t._v("value")]),t._v(" 的值：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里的 "),a("code",[t._v("JSON.stringify")]),t._v(" 函数很重要，实际上 "),a("code",[t._v("el.attrsList[i].value")]),t._v(" 本身就已经是一个字符串了，在字符串的基础上继续 "),a("code",[t._v("JSON.stringify")]),t._v("，为什么这么做呢？举个例子大家就明白了，如下是两个使用了 "),a("code",[t._v("new Function()")]),t._v(" 创建函数的例子：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fn1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'console.log(1)'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fn2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'console.log(1)'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面代码中定义了两个函数 "),a("code",[t._v("fn1")]),t._v(" 和 "),a("code",[t._v("fn2")]),t._v("，它们的区别在于 "),a("code",[t._v("fn2")]),t._v(" 的参数使用了 "),a("code",[t._v("JSON.stringify")]),t._v("，实际上上面的代码等价于：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("fn1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("fn2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'console.log(1)'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到 "),a("code",[t._v("fn1")]),t._v(" 函数的执行能够通过 "),a("code",[t._v("console.log")]),t._v(" 语句打印数字 "),a("code",[t._v("1")]),t._v("，而 "),a("code",[t._v("fn2")]),t._v(" 函数体内的 "),a("code",[t._v("console.log")]),t._v(" 语句是一个字符串。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("同样的，这里使用 "),a("code",[t._v("JSON.stringify")]),t._v(" 实际上就是保证最终生成的代码中 "),a("code",[t._v("el.attrsList[i].value")]),t._v(" 属性始终被作为普通的字符串处理。通过以上代码的讲解我们知道了，如果一个标签的解析处于 "),a("code",[t._v("v-pre")]),t._v(" 环境，则会将该标签的属性全部添加到元素描述对象的 "),a("code",[t._v(".attrs")]),t._v(" 数组中，并且 "),a("code",[t._v(".attrs")]),t._v(" 数组与 "),a("code",[t._v(".attrsList")]),t._v(" 数组几乎相同，唯一不同的是在 "),a("code",[t._v(".attrs")]),t._v(" 数组中每个对象的 "),a("code",[t._v("value")]),t._v(" 属性值都是通过 "),a("code",[t._v("JSON.stringify")]),t._v(" 处理过的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("注意 "),s("code",[this._v("processRawAttrs")]),this._v(" 函数还没完，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processRawAttrs")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// non root node in pre blocks with no attributes")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("假如 "),a("code",[t._v("el.attrsList")]),t._v(" 数组的长度为 "),a("code",[t._v("0")]),t._v("，则会进入 "),a("code",[t._v("else...if")]),t._v(" 分支的判断，检查该元素是否使用了 "),a("code",[t._v("v-pre")]),t._v(" 指令，如果没有使用 "),a("code",[t._v("v-pre")]),t._v(" 指令才会执行 "),a("code",[t._v("else...if")]),t._v(" 语句块的代码。思考一下，首先我们有一个大前提，即 "),a("code",[t._v("processRawAttrs")]),t._v(" 函数的执行说明当前解析必然处于 "),a("code",[t._v("v-pre")]),t._v(" 环境，要么是使用 "),a("code",[t._v("v-pre")]),t._v(" 指令的标签自身，要么就是其子节点。同时 "),a("code",[t._v("el.attrsList")]),t._v(" 数组的长度为 "),a("code",[t._v("0")]),t._v(" 说明该元素没有任何属性，而且 "),a("code",[t._v("else...if")]),t._v(" 条件的成立也说明该元素没有使用 "),a("code",[t._v("v-pre")]),t._v(" 指令，这说明该元素一定是使用了 "),a("code",[t._v("v-pre")]),t._v(" 指令的标签的子标签，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-pre")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上 "),a("code",[t._v("html")]),t._v(" 字符串所示，当解析 "),a("code",[t._v("span")]),t._v(" 标签时，由于 "),a("code",[t._v("span")]),t._v(" 标签没有任何属性，并且 "),a("code",[t._v("span")]),t._v(" 标签也没有使用 "),a("code",[t._v("v-pre")]),t._v(" 指令，所以此时会在 "),a("code",[t._v("span")]),t._v(" 标签的元素描述对象上添加 "),a("code",[t._v(".plain")]),t._v(" 属性并将其设置为 "),a("code",[t._v("true")]),t._v("，用来标识该元素是纯的，在代码生成的部分我们将看到一个被标识为 "),a("code",[t._v("plain")]),t._v(" 的元素将有哪些不同。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后我们对使用了 "),s("code",[this._v("v-pre")]),this._v(" 指令的标签所生成的元素描述对象做一个总结：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、如果标签使用了 "),a("code",[t._v("v-pre")]),t._v(" 指令，则该标签的元素描述对象的 "),a("code",[t._v("element.pre")]),t._v(" 属性将为 "),a("code",[t._v("true")]),t._v("。")]),a("li",[t._v("2、对于使用了 "),a("code",[t._v("v-pre")]),t._v(" 指令的标签及其子代标签，它们的任何属性都将会被作为原始属性处理，即使用 "),a("code",[t._v("processRawAttrs")]),t._v(" 函数处理之。")]),a("li",[t._v("3、经过 "),a("code",[t._v("processRawAttrs")]),t._v(" 函数的处理，会在元素的描述对象上添加 "),a("code",[t._v("element.attrs")]),t._v(" 属性，它与 "),a("code",[t._v("element.attrsList")]),t._v(" 数组结构相同，不同的是 "),a("code",[t._v("element.attrs")]),t._v(" 数组中每个对象的 "),a("code",[t._v("value")]),t._v(" 值会经过 "),a("code",[t._v("JSON.stringify")]),t._v(" 函数处理。")]),a("li",[t._v("4、如果一个标签没有任何属性，并且该标签是使用了 "),a("code",[t._v("v-pre")]),t._v(" 指令标签的子代标签，那么该标签的元素描述对象将被添加 "),a("code",[t._v("element.plain")]),t._v(" 属性，并且其值为 "),a("code",[t._v("true")]),t._v("。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是在生成 "),s("code",[this._v("AST")]),this._v(" 过程中对于使用了 "),s("code",[this._v("v-pre")]),this._v(" 指令标签的元素描述对象的处理。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"处理使用了v-for指令的元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理使用了v-for指令的元素","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理使用了v-for指令的元素")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果一个标签使用了 "),a("code",[t._v("v-pre")]),t._v(" 指令，那么该标签及其子标签的解析都会由 "),a("code",[t._v("if")]),t._v(" 语句块内的 "),a("code",[t._v("processRawAttrs")]),t._v(" 函数来完成。反之将会执行 "),a("code",[t._v("else...if")]),t._v(" 条件语句的判断，可以看到其判断条件为 "),a("code",[t._v("!element.processed")]),t._v("，这里要补充一下元素描述对象的 "),a("code",[t._v("element.processed")]),t._v(" 属性是一个布尔值，它标识着当前元素是否已经被解析过了，或许大家会对 "),a("code",[t._v("element.processed")]),t._v(" 属性有疑问，实际上 "),a("code",[t._v("element.processed")]),t._v(" 属性是在元素描述对象应用 "),a("code",[t._v("preTransforms")]),t._v(" 数组中的处理函数时被添加的，我们可以打开 "),a("code",[t._v("src/platforms/web/compiler/modules/model.js")]),t._v(" 文件找到 "),a("code",[t._v("preTransformNode")]),t._v(" 函数，该函数中有这样一段代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("addRawAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'checkbox'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// prevent it from double-processed")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("由于我们还没有对 "),s("code",[this._v("preTransforms")]),this._v(" 前置处理函数进行讲解，所以大家看不明白如上代码没关系，你只需知道经过如上代码的处理之后由于元素已经被处理过了，所以这里会通过 "),s("code",[this._v(".processed")]),this._v(" 做一个标识，以防止被重复处理。再回到如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// structural directives")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果元素没有被处理过，那么 "),s("code",[this._v("else...if")]),this._v(" 语句块内的代码将被执行，可以看到对元素描述对象应用的第一个处理函数是 "),s("code",[this._v("processFor")]),this._v(" 函数，接下来我们的目标就是研究 "),s("code",[this._v("processFor")]),this._v(" 函数对元素描述对象做了怎样的处理。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("找到 "),s("code",[this._v("processFor")]),this._v(" 函数，如下是其源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" exp\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Invalid v-for expression: ")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("exp"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("processFor")]),t._v(" 函数接收元素描述对象作为参数，在 "),a("code",[t._v("processFor")]),t._v(" 函数内部首先定义了 "),a("code",[t._v("exp")]),t._v(" 变量，接着是一个 "),a("code",[t._v("if")]),t._v(" 条件语句块。在判断条件中首先通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数从元素描述对象中获取 "),a("code",[t._v("v-for")]),t._v(" 属性对应的属性值，并将值赋值给 "),a("code",[t._v("exp")]),t._v(" 变量，如果标签的 "),a("code",[t._v("v-for")]),t._v(" 属性值存在则会执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，否则什么都不会做。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于 "),s("code",[this._v("getAndRemoveAttr")]),this._v(" 函数前面我们已经讲过了这里就不做补充了。现在假如我们当前元素是一个使用了 "),s("code",[this._v("v-for")]),this._v(" 指令的 "),s("code",[this._v("div")]),this._v(" 标签，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("div v"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"obj in list"')]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那么 "),a("code",[t._v("exp")]),t._v(" 变量的值将是字符串 "),a("code",[t._v("'obj in list'")]),t._v("，此时 "),a("code",[t._v("if")]),t._v(" 语句块内的代码将会执行，在 "),a("code",[t._v("if")]),t._v(" 语句块内一上来就通过 "),a("code",[t._v("parseFor")]),t._v(" 函数对 "),a("code",[t._v("v-for")]),t._v(" 属性的值做解析，我们把目光转移到 "),a("code",[t._v("parseFor")]),t._v(" 函数上，看一看 "),a("code",[t._v("parseFor")]),t._v(" 函数是如何解析字符串 "),a("code",[t._v("'obj in list'")]),t._v(" 的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("parseFor")]),this._v(" 函数的源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("ForParseResult "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" inMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forAliasRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("inMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" inMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" alias "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" inMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stripParensRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iteratorMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" alias"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forIteratorRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iteratorMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alias "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" alias"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forIteratorRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" iteratorMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iteratorMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" iteratorMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alias "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" alias\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("parseFor")]),t._v(" 函数接收 "),a("code",[t._v("v-for")]),t._v(" 指令的值作为参数，现在我们假设参数 "),a("code",[t._v("exp")]),t._v(" 的值为字符串 "),a("code",[t._v("'obj in list'")]),t._v("。在 "),a("code",[t._v("parseFor")]),t._v(" 函数开头首先使用字符串 "),a("code",[t._v("exp")]),t._v(" 去匹配正则 "),a("code",[t._v("forAliasRE")]),t._v("，并将匹配的结果保存在 "),a("code",[t._v("inMatch")]),t._v(" 常量中，该正则的作用我们在本章的开头讲过，所以这里不做过多说明，如果 "),a("code",[t._v("exp")]),t._v(" 字符串为 "),a("code",[t._v("'obj in list'")]),t._v("，那么最终 "),a("code",[t._v("inMatch")]),t._v(" 常量则是一个数组，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" inMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'obj in list'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'obj'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'list'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果匹配失败则 "),a("code",[t._v("inMatch")]),t._v(" 常量的值将为 "),a("code",[t._v("null")]),t._v("。可以看到在 "),a("code",[t._v("parseFor")]),t._v(" 函数内部如果匹配失败则函数直接返回 "),a("code",[t._v("undefined")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("ForParseResult "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" inMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forAliasRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("inMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们可以回到 "),s("code",[this._v("processFor")]),this._v(" 函数，注意如下高亮的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" exp\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),t._v("      "),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Invalid v-for expression: ")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("exp"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到在 "),a("code",[t._v("processFor")]),t._v(" 函数内部定义了 "),a("code",[t._v("res")]),t._v(" 常量接收 "),a("code",[t._v("parseFor")]),t._v(" 函数对 "),a("code",[t._v("exp")]),t._v(" 字符串的解析结果，如果解析失败则 "),a("code",[t._v("res")]),t._v(" 常量的值将为 "),a("code",[t._v("undefined")]),t._v("，所以在非生产环境下会打印警告信息提示开发者所编写的 "),a("code",[t._v("v-for")]),t._v(" 指令的值为无效的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再回到 "),s("code",[this._v("parseFor")]),this._v(" 函数中，如果对 "),s("code",[this._v("exp")]),this._v(" 字符串解析成功，则如下高亮的两句代码将被执行：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("ForParseResult "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" inMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forAliasRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("inMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" inMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("定义了 "),a("code",[t._v("res")]),t._v(" 常量，它的初始值为一个空对象，可以看到最后 "),a("code",[t._v("parseFor")]),t._v(" 函数会将 "),a("code",[t._v("res")]),t._v(" 对象作为返回值返回。接着在 "),a("code",[t._v("res")]),t._v(" 对象上添加 "),a("code",[t._v("res.for")]),t._v(" 属性，它的值为 "),a("code",[t._v("inMatch")]),t._v(" 数组的第三个元素，假如 "),a("code",[t._v("exp")]),t._v(" 字符串的值为 "),a("code",[t._v("'obj in list'")]),t._v("，则 "),a("code",[t._v("res.for")]),t._v(" 属性的值将是字符串 "),a("code",[t._v("'list'")]),t._v("，所以大家应该能够猜测到 "),a("code",[t._v("res.for")]),t._v(" 属性所存储的值应该是被遍历的目标变量的名字。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("ForParseResult "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" inMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" alias "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" inMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stripParensRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iteratorMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" alias"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forIteratorRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("定义了 "),a("code",[t._v("alias")]),t._v(" 常量，它的值比较复杂，我们一点点来看，假设字符串 "),a("code",[t._v("exp")]),t._v(" 的值为 "),a("code",[t._v("'obj in list'")]),t._v("，则 "),a("code",[t._v("inMatch[1]")]),t._v(" 的值应该是字符串 "),a("code",[t._v("'obj'")]),t._v("，如果 "),a("code",[t._v("exp")]),t._v(" 字符串的值是 "),a("code",[t._v("'(obj, index) in list'")]),t._v("，那么 "),a("code",[t._v("inMatch[1]")]),t._v(" 的值应该是字符串 "),a("code",[t._v("'(obj, index)'")]),t._v("，当然啦如果你在编写 "),a("code",[t._v("v-for")]),t._v(" 指令时存在多余的空格，比如：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("  obj in list"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("则 "),a("code",[t._v("exp")]),t._v(" 字符串也会有多余的空格："),a("code",[t._v("' obj in list'")]),t._v("，这时就会导致 "),a("code",[t._v("inMatch[1]")]),t._v(" 的值中也会包含多余的空格："),a("code",[t._v("' obj'")]),t._v("。理想的做法是此时我们将多余的空格去掉，然后再做下一步处理，这就是为什么 "),a("code",[t._v("parseFor")]),t._v(" 函数中要对 "),a("code",[t._v("inMatch[1]")]),t._v(" 字符串使用 "),a("code",[t._v("trim()")]),t._v(" 函数的原因。去掉空格之后，可以看到紧接着使用该字符串的 "),a("code",[t._v("replace")]),t._v(" 方法匹配正则 "),a("code",[t._v("stripParensRE")]),t._v("，并将匹配的内容替换为空字符串，最终的结果是将 "),a("code",[t._v("inMatch[1]")]),t._v(" 中的左右圆括号移除，本章的开头讲解了正则 "),a("code",[t._v("stripParensRE")]),t._v(" 的作用，它用来匹配字符串中的左右圆括号。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如下是 "),s("code",[this._v("v-for")]),this._v(" 指令的值与 "),s("code",[this._v("alias")]),this._v(" 常量值的对应关系：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、如果 "),a("code",[t._v("v-for")]),t._v(" 指令的值为 "),a("code",[t._v("'obj in list'")]),t._v("，则 "),a("code",[t._v("alias")]),t._v(" 的值为字符串 "),a("code",[t._v("'obj'")])]),a("li",[t._v("2、如果 "),a("code",[t._v("v-for")]),t._v(" 指令的值为 "),a("code",[t._v("'(obj, index) in list'")]),t._v("，则 "),a("code",[t._v("alias")]),t._v(" 的值为字符串 "),a("code",[t._v("'obj, index'")])]),a("li",[t._v("3、如果 "),a("code",[t._v("v-for")]),t._v(" 指令的值为 "),a("code",[t._v("'(obj, key, index) in list'")]),t._v("，则 "),a("code",[t._v("alias")]),t._v(" 的值为字符串 "),a("code",[t._v("'obj, key, index'")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("了解了 "),s("code",[this._v("alias")]),this._v(" 常量的值之后，我们再来看如下这句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iteratorMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" alias"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forIteratorRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里定义了 "),a("code",[t._v("iteratorMatch")]),t._v(" 常量，它的值是使用 "),a("code",[t._v("alias")]),t._v(" 字符串的 "),a("code",[t._v("match")]),t._v(" 方法匹配正则 "),a("code",[t._v("forIteratorRE")]),t._v(" 得到的，其中正则 "),a("code",[t._v("forIteratorRE")]),t._v(" 我们也已经在前面的章节中讲过了，这里总结一下对于不同的 "),a("code",[t._v("alias")]),t._v(" 字符串其对应的匹配结果：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、如果 "),a("code",[t._v("alias")]),t._v(" 字符串的值为 "),a("code",[t._v("'obj'")]),t._v("，则匹配结果 "),a("code",[t._v("iteratorMatch")]),t._v(" 常量的值为 "),a("code",[t._v("null")])]),a("li",[t._v("2、如果 "),a("code",[t._v("alias")]),t._v(" 字符串的值为 "),a("code",[t._v("'obj, index'")]),t._v("，则匹配结果 "),a("code",[t._v("iteratorMatch")]),t._v(" 常量的值是一个包含两个元素的数组："),a("code",[t._v("[', index', 'index']")])]),a("li",[t._v("3、如果 "),a("code",[t._v("alias")]),t._v(" 字符串的值为 "),a("code",[t._v("'obj, key, index'")]),t._v("，则匹配结果 "),a("code",[t._v("iteratorMatch")]),t._v(" 常量的值是一个包含三个元素的数组："),a("code",[t._v("[', key, index', 'key'， 'index']")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("明白了这些我们继续看 "),s("code",[this._v("parseFor")]),this._v(" 函数的代码，接下来要看的是如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("ForParseResult "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iteratorMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" alias"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forIteratorRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iteratorMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alias "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" alias"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forIteratorRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" iteratorMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iteratorMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" iteratorMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alias "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" alias\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮的代码所示，我们知道如果 "),a("code",[t._v("alias")]),t._v(" 常量的值为字符串 "),a("code",[t._v("'obj'")]),t._v(" 时，则匹配结果 "),a("code",[t._v("iteratorMatch")]),t._v(" 常量的值会是 "),a("code",[t._v("null")]),t._v("，所以此时 "),a("code",[t._v("if")]),t._v(" 条件语句判断失败，"),a("code",[t._v("else")]),t._v(" 语句块的代码将被执行，即在 "),a("code",[t._v("res")]),t._v(" 对象上添加 "),a("code",[t._v("res.alias")]),t._v(" 属性，其值就是 "),a("code",[t._v("alias")]),t._v(" 常量的值，也就是字符串 "),a("code",[t._v("'obj'")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果 "),a("code",[t._v("alias")]),t._v(" 常量的值为字符串 "),a("code",[t._v("'obj, index'")]),t._v("，则匹配结果 "),a("code",[t._v("iteratorMatch")]),t._v(" 常量将会是一个拥有两个元素的数组，此时 "),a("code",[t._v("if")]),t._v(" 语句块内的代码将被执行，在 "),a("code",[t._v("if")]),t._v(" 语句块内首先执行的是如下这句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alias "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" alias"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forIteratorRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("使用 "),a("code",[t._v("alias")]),t._v(" 字符串的 "),a("code",[t._v("replace")]),t._v(" 方法去匹配正则 "),a("code",[t._v("forIteratorRE")]),t._v("，并将匹配到的内容替换为空字符串，最后将结果赋值给 "),a("code",[t._v("res.alias")]),t._v(" 属性。如果字符串 "),a("code",[t._v("alias")]),t._v(" 的值为 "),a("code",[t._v("'obj, index'")]),t._v("，则替换后的结果应该为字符串 "),a("code",[t._v("'obj'")]),t._v("。所以 "),a("code",[t._v("res.alias")]),t._v(" 属性的值就是字符串 "),a("code",[t._v("'obj'")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" iteratorMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("res")]),t._v(" 对象上定义 "),a("code",[t._v("res.iterator1")]),t._v(" 属性，它的值是匹配结果 "),a("code",[t._v("iteratorMatch")]),t._v(" 数组第二个元素去除前后空白之后的值。假设 "),a("code",[t._v("alias")]),t._v(" 字符串为 "),a("code",[t._v("'obj, index'")]),t._v("，则 "),a("code",[t._v("res.iterator1")]),t._v(" 的值应该为字符串 "),a("code",[t._v("'index'")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下会进入另外一个 "),s("code",[this._v("if")]),this._v(" 条件语句：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iteratorMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" iteratorMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于 "),a("code",[t._v("alias")]),t._v(" 字符串的值为 "),a("code",[t._v("'obj, index'")]),t._v("，对应的匹配结果 "),a("code",[t._v("iteratorMatch")]),t._v(" 数组只有两个元素，所以 "),a("code",[t._v("iteratorMatch[2]")]),t._v(" 的值为 "),a("code",[t._v("undefined")]),t._v("，此时如上 "),a("code",[t._v("if")]),t._v(" 语句块内的代码不会被执行。但是如果 "),a("code",[t._v("alias")]),t._v(" 字符串的值为 "),a("code",[t._v("'obj, key, index'")]),t._v("，则匹配结果 "),a("code",[t._v("iteratorMatch[2]")]),t._v(" 的值将会是字符串 "),a("code",[t._v("'index'")]),t._v("，此时 "),a("code",[t._v("if")]),t._v(" 语句块内的代码将被执行，可以看到在 "),a("code",[t._v("res")]),t._v(" 对象上定义了 "),a("code",[t._v("res.iterator2")]),t._v(" 属性，其值就是字符串 "),a("code",[t._v("iteratorMatch[2]")]),t._v(" 去掉前后空白后的结果。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是 "),s("code",[this._v("parseFor")]),this._v(" 函数的全部实现，它的作用是解析 "),s("code",[this._v("v-for")]),this._v(" 指令的值，并创建一个包含解析结果的对象，最后将该对象返回。我们来做一个简短的总结：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、如果 "),s("code",[this._v("v-for")]),this._v(" 指令的值为字符串 "),s("code",[this._v("'obj in list'")]),this._v("，则 "),s("code",[this._v("parseFor")]),this._v(" 函数的返回值为：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'list'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  alias"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("2、如果 "),s("code",[this._v("v-for")]),this._v(" 指令的值为字符串 "),s("code",[this._v("'(obj, index) in list'")]),this._v("，则 "),s("code",[this._v("parseFor")]),this._v(" 函数的返回值为：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'list'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  alias"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  iterator1"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'index'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("2、如果 "),s("code",[this._v("v-for")]),this._v(" 指令的值为字符串 "),s("code",[this._v("'(obj, key, index) in list'")]),this._v("，则 "),s("code",[this._v("parseFor")]),this._v(" 函数的返回值为：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'list'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  alias"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  iterator1"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'key'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  iterator2"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'index'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后我们再回到 "),s("code",[this._v("processFor")]),this._v(" 函数，来看如下高亮的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" exp\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Invalid v-for expression: ")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("exp"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到如果 "),a("code",[t._v("parseFor")]),t._v(" 函数对 "),a("code",[t._v("v-for")]),t._v(" 指令的值解析成功，则会将解析结果保存在 "),a("code",[t._v("res")]),t._v(" 常量中，并使用 "),a("code",[t._v("extend")]),t._v(" 函数将 "),a("code",[t._v("res")]),t._v(" 常量中的属性混入当前元素的描述对象中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是解析器对于使用了 "),s("code",[this._v("v-for")]),this._v(" 指令的标签的解析过程，以及对该元素描述对象的补充。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"处理使用条件指令和v-once指令的元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理使用条件指令和v-once指令的元素","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理使用条件指令和v-once指令的元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在使用 "),s("code",[this._v("processFor")]),this._v(" 函数处理完元素描述对象之后，紧接着使用了 "),s("code",[this._v("processIf")]),this._v(" 函数继续对元素的描述对象进行处理，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRawAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// structural directives")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("processIf")]),t._v(" 函数用来处理那些使用了条件指令的标签的元素描述对象，所谓条件指令指的是 "),a("code",[t._v("v-if")]),t._v("、"),a("code",[t._v("v-else-if")]),t._v(" 以及 "),a("code",[t._v("v-else")]),t._v(" 这三个指令。我们找到 "),a("code",[t._v("processIf")]),t._v(" 函数，看一下它对元素描述对象都做了哪些处理，如下是其源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" exp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp\n    "),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" el\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-else'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" elseif "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-else-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elseif"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" elseif\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("processIf")]),t._v(" 函数接收元素描述对象作为参数，在 "),a("code",[t._v("processIf")]),t._v(" 函数内部首先通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数从该元素描述对象的 "),a("code",[t._v("attrsList")]),t._v(" 属性中获取并移除 "),a("code",[t._v("v-if")]),t._v(" 指令的值，并将属性值赋值给 "),a("code",[t._v("exp")]),t._v(" 常量，这里大家要注意的是如何判断是否使用了 "),a("code",[t._v("v-if")]),t._v(" 指令，如上代码中是这样判断的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" exp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上这种比较方式实际上是把 "),a("code",[t._v("v-if")]),t._v(" 指令的值与 "),a("code",[t._v("null")]),t._v(" 做对比，只要值不等于 "),a("code",[t._v("null")]),t._v(" 则该条件就会成立，所以如果你在编写 "),a("code",[t._v("v-if")]),t._v(" 指令时没有写属性值，则通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数获取到的 "),a("code",[t._v("v-if")]),t._v(" 属性值将是一个空字符串，由于空字符串不等于 "),a("code",[t._v("null")]),t._v("，所以如上条件会成立。但是源码中的比较方式不会这样，如果你在编写 "),a("code",[t._v("v-if")]),t._v(" 指令时没有写属性值，则 "),a("code",[t._v("exp")]),t._v(" 常量就是空字符串，所以 "),a("code",[t._v("if")]),t._v(" 条件语句不会被执行。哪一种更合理呢？实际上是源码的实现方式更合理，源码的逻辑是只要你没有写 "),a("code",[t._v("v-if")]),t._v(" 指令的属性值，那么就当做你根本没有使用 "),a("code",[t._v("v-if")]),t._v(" 指令，不然的话该元素将永远不会被渲染。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("假设我们读取到了 "),s("code",[this._v("v-if")]),this._v(" 指令的值，此时 "),s("code",[this._v("if")]),this._v(" 语句块内的代码将被执行，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" exp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp")]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" el")]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("if")]),t._v(" 语句块内首先在元素描述对象上定义了 "),a("code",[t._v("el.if")]),t._v(" 属性，并且该属性的值就是 "),a("code",[t._v("v-if")]),t._v(" 指令的属性值，注意目前我们所说的属性值都指的是字符串，比如如果你的 "),a("code",[t._v("html")]),t._v(" 字符串如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("a && b"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("则该元素描述对象的 "),a("code",[t._v("el.if")]),t._v(" 的值为字符串 "),a("code",[t._v("'a && b'")]),t._v("。在设置完 "),a("code",[t._v("el.if")]),t._v(" 属性之后，紧接着调用了 "),a("code",[t._v("addIfCondition")]),t._v(" 函数，可以看到第一个参数就是当前元素描述对象本身，所以如果一个元素使用了 "),a("code",[t._v("v-if")]),t._v(" 指令，那么它会把自身作为一个"),a("strong",[t._v("条件对象")]),t._v("添加到自身元素描述对象的 "),a("code",[t._v("ifConditions")]),t._v(" 数组中，补充一下这里所说的"),a("strong",[t._v("条件对象")]),t._v("指的是形如 "),a("code",[t._v("addIfCondition")]),t._v(" 函数第二个参数的对象结构：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" el\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这一点我们在前面分析 "),s("code",[this._v("processIfConditions")]),this._v(" 函数时有提到过。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们再回到 "),s("code",[this._v("processIf")]),this._v(" 函数中，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" exp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-else'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" elseif "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-else-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elseif"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" elseif\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果没有获取到 "),a("code",[t._v("v-if")]),t._v(" 指令的属性值，则 "),a("code",[t._v("else")]),t._v(" 语句块的代码将被执行，可以看到在 "),a("code",[t._v("else")]),t._v(" 语句块内分别处理了 "),a("code",[t._v("v-else")]),t._v(" 指令以及 "),a("code",[t._v("v-else-if")]),t._v(" 指令。我们首先来看对于 "),a("code",[t._v("v-else")]),t._v(" 指令的处理，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-else'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数获取并移除元素描述对象的 "),a("code",[t._v("attrsList")]),t._v(" 数组中名字为 "),a("code",[t._v("v-else")]),t._v(" 的属性值，可以看到与 "),a("code",[t._v("v-if")]),t._v(" 指令的判断条件不同，这里是将属性值与 "),a("code",[t._v("null")]),t._v(" 作比较，这说明使用 "),a("code",[t._v("v-else")]),t._v(" 指令时即使不写属性值那么也会当做使用了 "),a("code",[t._v("v-else")]),t._v(" 指令，很显然 "),a("code",[t._v("v-else")]),t._v(" 指令根本就不需要属性值。如果该元素使用了 "),a("code",[t._v("v-else")]),t._v(" 指令则会在该元素的描述对象上添加 "),a("code",[t._v("el.else")]),t._v(" 属性，并将其值设置为 "),a("code",[t._v("true")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着还要处理使用了 "),s("code",[this._v("v-else-if")]),this._v(" 指令的标签，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" elseif "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-else-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elseif"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" elseif\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("很简单，与处理 "),s("code",[this._v("v-if")]),this._v(" 指令的方式相同，唯一不同的就是此时会在元素描述对象上添加 "),s("code",[this._v("el.elseif")]),this._v(" 属性，并且它的值为 "),s("code",[this._v("v-else-if")]),this._v(" 的属性值。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("最后大家注意一件事情，就是对于使用了 "),a("code",[t._v("v-else")]),t._v(" 和 "),a("code",[t._v("v-else-if")]),t._v(" 这两个条件指令的标签，经过 "),a("code",[t._v("processIf")]),t._v(" 函数的处理之后仅仅是在元素描述对象上添加了 "),a("code",[t._v("el.else")]),t._v(" 属性和 "),a("code",[t._v("el.elseif")]),t._v(" 属性，并没有做额外的工作。但是我们在前面分析 "),a("code",[t._v("processIfConditions")]),t._v(" 函数时能够知道，当一个元素描述对象存在 "),a("code",[t._v("el.else")]),t._v(" 属性或 "),a("code",[t._v("el.elseif")]),t._v(" 属性时，该元素描述对象不会作为 "),a("code",[t._v("AST")]),t._v(" 中的一个普通节点，而是会被添加到与之相符的带有 "),a("code",[t._v("v-if")]),t._v(" 指令的元素描述对象的 "),a("code",[t._v("ifConditions")]),t._v(" 数组中。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、如果标签使用了 "),a("code",[t._v("v-if")]),t._v(" 指令，则该标签的元素描述对象的 "),a("code",[t._v("el.if")]),t._v(" 属性存储着 "),a("code",[t._v("v-if")]),t._v(" 指令的属性值")]),a("li",[t._v("2、如果标签使用了 "),a("code",[t._v("v-else")]),t._v(" 指令，则该标签的元素描述对象的 "),a("code",[t._v("el.else")]),t._v(" 属性值为 "),a("code",[t._v("true")])]),a("li",[t._v("3、如果标签使用了 "),a("code",[t._v("v-else-if")]),t._v(" 指令，则该标签的元素描述对象的 "),a("code",[t._v("el.elseif")]),t._v(" 属性存储着 "),a("code",[t._v("v-else-if")]),t._v(" 指令的属性值")]),a("li",[t._v("4、如果标签使用了 "),a("code",[t._v("v-if")]),t._v(" 指令，则该标签的元素描述对象的 "),a("code",[t._v("ifConditions")]),t._v(" 数组中包含“自己”")]),a("li",[t._v("5、如果标签使用了 "),a("code",[t._v("v-else")]),t._v(" 或 "),a("code",[t._v("v-else-if")]),t._v(" 指令，则该标签的元素描述对象会被添加到与之相符的带有 "),a("code",[t._v("v-if")]),t._v(" 指令的元素描述对象的 "),a("code",[t._v("ifConditions")]),t._v(" 数组中。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("讲解完 "),s("code",[this._v("processIf")]),this._v(" 函数之后，我们再来看一下在 "),s("code",[this._v("processIf")]),this._v(" 函数之后执行的 "),s("code",[this._v("processOnce")]),this._v(" 函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRawAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// structural directives")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// element-scope stuff")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("processOnce")]),this._v(" 函数用来处理使用了 "),s("code",[this._v("v-once")]),this._v(" 指令的标签，处理方式很简单，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processOnce")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" once "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-once'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("once "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("once "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数获取并移除元素描述对象的 "),a("code",[t._v("attrsList")]),t._v(" 数组中名字为 "),a("code",[t._v("v-once")]),t._v(" 的属性值，并将获取到的属性值赋值给 "),a("code",[t._v("once")]),t._v(" 常量，接着使用 "),a("code",[t._v("if")]),t._v(" 条件语句，如果 "),a("code",[t._v("once")]),t._v(" 常量不等于 "),a("code",[t._v("null")]),t._v("，则说明使用了 "),a("code",[t._v("v-once")]),t._v(" 指令，此时会在元素描述对象上添加 "),a("code",[t._v("el.once")]),t._v(" 属性并将其值设置为 "),a("code",[t._v("true")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"处理使用了key属性的元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理使用了key属性的元素","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理使用了key属性的元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下我们要讲解的就应该是 "),s("code",[this._v("processElement")]),this._v(" 函数了，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRawAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// structural directives")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// element-scope stuff")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上 "),s("code",[this._v("processElement")]),this._v(" 函数是其他一系列 "),s("code",[this._v("process*")]),this._v(" 函数的集合，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processKey")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// determine whether this is a plain element after")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// removing structural attributes")]),t._v("\n  element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRef")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processSlot")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processComponent")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上是 "),a("code",[t._v("processElement")]),t._v(" 函数的全部代码，可以看到在 "),a("code",[t._v("processElement")]),t._v(" 函数内确实调用了很多其他的 "),a("code",[t._v("process*")]),t._v(" 函数，除此之外在 "),a("code",[t._v("processComponent")]),t._v(" 函数与 "),a("code",[t._v("processAttrs")]),t._v(" 函数之间应用了 "),a("code",[t._v("transforms")]),t._v(" 数组中的转换函数，我们不着急, 一点点来分析，首先来看 "),a("code",[t._v("processElement")]),t._v(" 函数内执行的第一个函数，即 "),a("code",[t._v("processKey")]),t._v(" 函数，如下是 "),a("code",[t._v("processKey")]),t._v(" 函数的源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processKey")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" exp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'key'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'template'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`<template> cannot be keyed. Place the key on real elements instead.`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("processKey")]),t._v(" 函数接收元素的描述对象作为参数，在 "),a("code",[t._v("processKey")]),t._v(" 函数内部首先调用了 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数，这个函数目前我们还是第一次遇到，大家尽管将它当做与 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数的作用相同即可，后面我们会仔细讲解。"),a("code",[t._v("getBindingAttr")]),t._v(" 函数与 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数接收的前两个参数是一样的并且也会返回第二个参数指定的属性的值，所以如上代码中通过 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数从元素描述对象的 "),a("code",[t._v("attrsList")]),t._v(" 数组中获取到属性名字为 "),a("code",[t._v("key")]),t._v(" 的属性值，并将值赋值给 "),a("code",[t._v("exp")]),t._v(" 常量。接着用一个 "),a("code",[t._v("if")]),t._v(" 条件语句检查 "),a("code",[t._v("exp")]),t._v(" 是否存在，如果不存在则说明没有为该标签的 "),a("code",[t._v("key")]),t._v(" 属性指定属性值，如果属性值存在则会为元素描述对象添加 "),a("code",[t._v("el.key")]),t._v(" 属性，且它的值就是 "),a("code",[t._v("key")]),t._v(" 属性的值。另外我们能够看到在为 "),a("code",[t._v("el.key")]),t._v(" 属性赋值之前还有一个 "),a("code",[t._v("if")]),t._v(" 条件语句，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'template'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`<template> cannot be keyed. Place the key on real elements instead.`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在非生产环境下会检测该标签是否是 "),a("code",[t._v("<template>")]),t._v(" 标签，如果是 "),a("code",[t._v("<template>")]),t._v(" 标签则会提示开发者不要在 "),a("code",[t._v("<template>")]),t._v(" 标签上使用 "),a("code",[t._v("key")]),t._v(" 属性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以下是对使用了 "),s("code",[this._v("key")]),this._v(" 属性的标签的解析总结：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、"),a("code",[t._v("key")]),t._v(" 属性不能被应用到 "),a("code",[t._v("<template>")]),t._v(" 标签。")]),a("li",[t._v("2、使用了 "),a("code",[t._v("key")]),t._v(" 属性的标签，其元素描述对象的 "),a("code",[t._v("el.key")]),t._v(" 属性保存着 "),a("code",[t._v("key")]),t._v(" 属性的值。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"获取绑定的属性值以及过滤器的解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取绑定的属性值以及过滤器的解析","aria-hidden":"true"}},[this._v("#")]),this._v(" 获取绑定的属性值以及过滤器的解析")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在讲解 "),a("code",[t._v("processKey")]),t._v(" 函数时我们遇到了 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数，当时我们没有仔细讲解，并且让大家理解为它的作用与 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数的作用相同。接下来我们就仔细研究一下 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数，如下是其源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  getStatic"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("string "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dynamicValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("':'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-bind:'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dynamicValue "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFilters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dynamicValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("getStatic "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" staticValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticValue "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("大家观察一下如上代码，可以发现在 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数内部多次调用了 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数。实际上 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数的作用就像它的名字一样，用来获取绑定属性的值。什么是绑定属性呢？绑定属性就是通过 "),a("code",[t._v("v-bind:")]),t._v(" 或其缩写 "),a("code",[t._v(":")]),t._v(" 所定义的属性。"),a("code",[t._v("getBindingAttr")]),t._v(" 函数接收三个参数，前两个参数与 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数相同，分别是元素的描述对象和要获取的属性的名字。在 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数内部首先执行的是如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dynamicValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("':'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-bind:'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到这段代码首先通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数获取名字为 "),a("code",[t._v("':' + name")]),t._v(" 的属性值，如果传递给 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数的第二个参数为字符串 "),a("code",[t._v("'key'")]),t._v("，则表达式 "),a("code",[t._v("':' + name")]),t._v(" 的值就是 "),a("code",[t._v("':key'")]),t._v("，如果获取不到属性名为 "),a("code",[t._v(":key")]),t._v(" 的属性的值，则会继续使用 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 获取 "),a("code",[t._v("v-bind:key")]),t._v(" 属性的值，这是因为你没法保证开发者到底通过 "),a("code",[t._v("v-bind:")]),t._v(" 还是通过其缩写 "),a("code",[t._v(":")]),t._v(" 来绑定属性，所以两种方式都要尝试。最后将获取到的属性值赋值给 "),a("code",[t._v("dynamicValue")]),t._v(" 常量。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dynamicValue "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFilters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dynamicValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("getStatic "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" staticValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticValue "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码是一段 "),a("code",[t._v("if...elseif")]),t._v(" 添加语句块，这里再次强调 "),a("code",[t._v("if")]),t._v(" 语句的条件是在判断绑定的属性是否存在，而非判断属性值 "),a("code",[t._v("dynamicValue")]),t._v(" 是否存在，因为即使获取到的属性值为空字符串，但由于空字符串不与 "),a("code",[t._v("null")]),t._v(" 相等，所以 "),a("code",[t._v("if")]),t._v(" 条件语句成立。只有当绑定属性本身就不存在时，此时获取到的属性值为 "),a("code",[t._v("undefined")]),t._v("，与 "),a("code",[t._v("null")]),t._v(" 相等，这时才会执行 "),a("code",[t._v("elseif")]),t._v(" 分支的判断。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("假设成功得到了获取绑定的属性值，那么 "),a("code",[t._v("if")]),t._v(" 语句块内的代码将被执行，可以看到在 "),a("code",[t._v("if")]),t._v(" 语句块内直接调用了 "),a("code",[t._v("parseFilters")]),t._v(" 函数并将该函数的返回值作为 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数的返回值。其中 "),a("code",[t._v("parseFilters")]),t._v(" 函数是我们接下来将要重点讲解的函数，不过现在我们仍需要将目光聚焦在 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数上。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果获取绑定的值失败，则会执行 "),a("code",[t._v("elseif")]),t._v(" 分支的判断，可以看到 "),a("code",[t._v("elseif")]),t._v(" 分支检测了 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数的第三个参数 "),a("code",[t._v("getStatic")]),t._v(" 是否与 "),a("code",[t._v("false")]),t._v(" 不全等，这里的关键是一定要不全等才行，也就是说如果调用 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数时不传递第三个参数，则参数 "),a("code",[t._v("getStatic")]),t._v(" 的值为 "),a("code",[t._v("undefined")]),t._v("，它不全等于 "),a("code",[t._v("false")]),t._v("，所以可以理解为当不传递第三个参数时 "),a("code",[t._v("elseif")]),t._v(" 分支的条件默认成立。"),a("code",[t._v("elseif")]),t._v(" 语句块内代码的作用是用来获取非绑定的属性值，因为代码既然执行到了 "),a("code",[t._v("elseif")]),t._v(" 分支，则说明此时获取绑定的属性值失败，我们知道当我们为元素或组件添加属性时，这个属性可以是绑定的也可以是非绑定的，所以当获取绑定的属性失败时，我们不能够武断的认为开发者没有编写该属性，而是应该继续尝试获取非绑定的属性值，如下高亮的代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dynamicValue "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFilters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dynamicValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("getStatic "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" staticValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticValue "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("非绑定属性值的获取方式同样是使用 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数，只不过此时传递给该函数的第二个参数是原始的属性名字，不带有 "),a("code",[t._v("v-bind:")]),t._v(" 或 "),a("code",[t._v(":")]),t._v("。同时将获取结果保存在 "),a("code",[t._v("staticValue")]),t._v(" 常量中，接着进入一个条件判断，如果属性值存在则使用 "),a("code",[t._v("JSON.stringify")]),t._v(" 函数对属性值进行处理后将其返回。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("大家注意 "),s("code",[this._v("JSON.stringify")]),this._v(" 函数对属性值的处理至关重要，这么做能够保证对于非绑定的属性来讲，总是会将该属性的值作为字符串处理。为了让大家更好地理解，我们举个例子。我们知道编译器所生成的渲染函数其实是字符串形式的渲染函数，该字符串要通过 "),s("code",[this._v("new Function(str)")]),this._v(" 之后才能变成真正的函数，对比如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 代码一")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fn1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'console.log(1)'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 代码二")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fn2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'console.log(1)'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当你执行 "),s("code",[this._v("f1()")]),this._v(" 函数时，在控制台会得到输出数字 "),s("code",[this._v("1")]),this._v("，而当你执行 "),s("code",[this._v("fn2")]),this._v(" 函数时则不会得到任何输出，实际上下面的代码与如上代码等价：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 代码一")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("fn1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 代码二")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("fn2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'console.log(1)'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上 "),s("code",[this._v("JSON.stringify('console.log(1)')")]),this._v(" 的结果等价于 "),s("code",[this._v("\"'console.log(1)'\"")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在你应该明白了为什么对于非绑定的属性，要使用 "),s("code",[this._v("JSON.stringify")]),this._v(" 函数处理其属性值的原因，目的就是确保将非绑定的属性值作为字符串处理，而不是变量或表达式。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dynamicValue "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFilters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dynamicValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("getStatic "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" staticValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticValue "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可见，对于绑定的属性值需要通过 "),s("code",[this._v("parseFilters")]),this._v(" 函数处理，并将处理后的值作为最终的返回结果。"),s("code",[this._v("parseFilters")]),this._v(" 函数的作用就像它的名字一样，是用来解析过滤器的，换句话说在编写绑定的属性时可以使用过滤器，也许大家在平时开发中使用过滤器更多的场景是如下这种方式：：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{ date | format('yy-mm-dd') }}"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id | featId"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不过这只是从技术上讲，实际开发中更合适的方案是使用计算属性。总之对于绑定的属性值，为了让其拥有使用过滤器的能力，就需要使用 "),s("code",[this._v("parseFilters")]),this._v(" 函数处理。"),s("code",[this._v("parseFilters")]),this._v(" 函数来自于 "),s("code",[this._v("src/compiler/parser/filter-parser.js")]),this._v(" 文件，它的作用简单地说就是用来将绑定的值分为两部分，一部分称之为表达式，另外一部分则是过滤器函数，然后将这两部分结合在一起，举个例子，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id | featId"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上 "),s("code",[this._v("div")]),this._v(" 标签拥有一个绑定的属性 "),s("code",[this._v("key")]),this._v("，它的值为 "),s("code",[this._v("id | featId")]),this._v("。对于这个值我们可以把它分为两部分：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第一部分，表达式："),s("code",[this._v("id")])]),s("li",[this._v("第二部分，过滤器："),s("code",[this._v("featId")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在假如给你一个字符串 "),s("code",[this._v("'id | featId'")]),this._v("，如何将这个字符串分成如上两个部分呢？有的同学可能会说这还不简单吗，以管道符 "),s("code",[this._v("|")]),this._v(" 为分界，左边的是表达式，右边的就是过滤器函数了呗。那我们再看如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("id | featId"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上代码与之前相比，不同的地方在于绑定属性 "),s("code",[this._v("key")]),this._v(" 的值就是一个单纯的字符串，它没有过滤器，因为管道符是在单引号 "),s("code",[this._v("'")]),this._v(" 之内的。不仅仅是单引号，以下代码中出现的管道符都不应该被作为过滤器的分界线：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("id | featId"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 单引号内的管道符 --\x3e")]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id | featId"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v("'")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 双引号内的管道符 --\x3e")]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("`id | featId`"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 模板字符串内的管道符 --\x3e")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/id|featId/.test(id).toString()"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 正则表达式内的管道符 --\x3e")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上代码中绑定属性 "),s("code",[this._v("key")]),this._v(" 的属性值是一个表达式："),s("code",[this._v("/id|featId/.test(id).toString()")]),this._v("，该表达式存在一个正则，我们知道正则表达式中管道符是有特殊用途的，所以在解析字符串 "),s("code",[this._v("'/id|featId/.test(id).toString()'")]),this._v(" 时不能单纯的认为管道符为表达式与过滤器的分界线。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id || featId"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 逻辑或运算符内的管道符 --\x3e")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上代码所示，绑定属性 "),s("code",[this._v("key")]),this._v(" 的属性值是一个表达式，该表达式里的 "),s("code",[this._v("||")]),this._v(" 符号代表的是逻辑或运算符，而逻辑或运算符是由两个管道符 "),s("code",[this._v("|")]),this._v(" 组成的，所以我们不能把这两个管道符中的任何一个作为过滤器的分界线。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上除了以上五种情况之外，管道符存在歧义的地方还有"),s("strong",[this._v("按位或")]),this._v("运算符，它是位运算中的一个运算符，该运算符就是由一个管道符组成，所以它与过滤器的分界线完全一样，这时我们必须做出选择：既然你希望管道符用来作为过滤器的分界线那就抛弃它按位或运算符的意义。有的同学会说，这不是得不到完全的语言能力了吗？实际上问题一点都不大，因为任何绑定属性的值理论上你都可以通过计算属性实现，而不是直接将表达式写在属性值的位置。话虽然这么说但是我们还是应该做一些基本的处理，比如以上列出的五种管道符存在歧义的地方我们是有能力处理的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("id | featId"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 单引号内的管道符 --\x3e")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们的思路是如果发现管道符存在于由两个单引号组成的字符串内，则认为其只是一个普通字符而非过滤器的分界线。对于双引号("),s("code",[this._v('"')]),this._v(")和模板字符串("),s("code",[this._v("`")]),this._v(")内的管道符也是同样的道理。所以问题的关键在于我们要能够识别单引号、双引号、模板字符串才行，这部分内容我们放到具体分析 "),s("code",[this._v("parseFilters")]),this._v(" 函数时再仔细讲解。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/id|featId/.test(id).toString()"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 正则表达式内的管道符 --\x3e")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这种情况会比较复杂，因为我们要有能力识别出管道符是否存在于正则表达中才行，难点就在于如何识别正则表达式，我们知道正则表达式由斜杠("),s("code",[this._v("/")]),this._v(")开头，并以斜杠("),s("code",[this._v("/")]),this._v(")结尾，但不要忘了斜杠在 "),s("code",[this._v("js")]),this._v(" 这门语言中还被用作除法运算符。所以归根结底难点在于我们需要识别一个斜杠它所代表的意义到底是除法还是正则。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上这是一个相当复杂的事情，引用 "),s("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-language-lexical-grammar",target:"_blank",rel:"noopener noreferrer"}},[this._v("ECMA 规范")]),this._v(" 中的一段例子：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" b\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("hi"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("g"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("大家思考一个问题，上面代码段中第二句代码开头的斜杠("),s("code",[this._v("/")]),this._v(")是除法运算符还是正则表达式的开头？答案是除法，因为如上代码等价于：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" hi "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" g"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 第一段代码")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("f")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token regex"}},[t._v("/1/g")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第二段代码")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token regex"}},[t._v("/1/g")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上两段代码所示，这两段代码具有相同的特点，即第一句代码的最后一个字符为 "),s("code",[this._v("}")]),this._v("，第二句代码的第一个字符为 "),s("code",[this._v("/")]),this._v("。大家思考一下哪一段代码中的斜杠是除法运算符，哪一段代码中的斜杠是正则表达式的开头？实际上第一段代码中的斜杠是正则，因为该斜杠之前的语境是函数定义，而第二段代码中的斜杠是除法，因为该斜杠之前的语境为表达式并且花括号("),s("code",[this._v("{}")]),this._v(")的意义为对象字面量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上判断一个斜杠到底代表什么意义，应该综合考虑上下文语境，"),s("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-language-lexical-grammar",target:"_blank",rel:"noopener noreferrer"}},[this._v("ECMA 规范中")]),this._v(" 中清楚的已经告诉大家需要多种标志符号类型("),s("code",[this._v("goal symbols")]),this._v(")来综合判断，并且还要考虑 "),s("code",[this._v("javascript")]),this._v(" 这门语言的自动插入分号机制，以及其他可能产生歧义的地方。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果要实现一个完整的能够精确识别斜杠意义的解析器需要花费大量的精力并且编写大量的代码，但对于 "),a("code",[t._v("Vue")]),t._v(" 来讲，去实现一个完整的解析器是一个收入与回报完全不对等的事情。后面我们在分析 "),a("code",[t._v("parseFilters")]),t._v(" 函数时可以看到，"),a("code",[t._v("parseFilters")]),t._v(" 函数对于正则的处理仅仅考虑了很小的一部分，但对于 "),a("code",[t._v("Vue")]),t._v(" 来说，这已经足够了。还是那句话："),a("strong",[t._v("为什么一定要在绑定的表达式中写正则呢？用计算属性就可以了啊")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是我们对 "),s("code",[this._v("parseFilters")]),this._v(" 函数的作用和一些基本实现思路的讲解，接下来我们就具体到 "),s("code",[this._v("parseFilters")]),this._v(" 函数中去，看看它真正的实现和最终的结果。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("打开 "),s("code",[this._v("src/compiler/parser/filter-parser.js")]),this._v(" 文件找到 "),s("code",[this._v("parseFilters")]),this._v(" 函数，如下是其函数签名：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFilters")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("parseFilters")]),this._v(" 函数接收绑定的属性值作为参数，在 "),s("code",[this._v("parseFilters")]),this._v(" 函数的开头定义了一些变量，我们先来看如下这组变量：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" inSingle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" inDouble "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" inTemplateString "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" inRegex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里定义了四个变量，分别是 "),a("code",[t._v("inSingle")]),t._v("、"),a("code",[t._v("inDouble")]),t._v("、"),a("code",[t._v("inTemplateString")]),t._v(" 以及 "),a("code",[t._v("inRegex")]),t._v("，并且它们的初始值都为 "),a("code",[t._v("false")]),t._v("。这些变量的作用是什么呢？首先大家应该知道的是，大部分解析器在解析一段字符串的时候，都会把字符串当做一个字符流，从头到尾逐个字符读取。"),a("code",[t._v("parseFilters")]),t._v(" 函数也不例外，"),a("code",[t._v("parseFilters")]),t._v(" 函数会把接收到的字符串从头到尾逐个字符依次读取，当读取到字符 "),a("code",[t._v("'")]),t._v(" 并且该字符串的前一个字符不是 "),a("code",[t._v("\\")]),t._v(" 时，则会将这个单引号字符作为字符串的开始，这时会把 "),a("code",[t._v("inSingle")]),t._v(" 变量设置为 "),a("code",[t._v("true")]),t._v("，代表当前解析进入了由单引号包裹的字符串。所以对于后续读取的任何字符来讲，由于 "),a("code",[t._v("inSingle")]),t._v(" 变量的值为真，所以这些字符都会被当做普通字符串的一部分来处理，直到解析器遇到了下一个能够代表字符串结束的单引号为止，此时会重新将 "),a("code",[t._v("inSingle")]),t._v(" 变量的值设置为 "),a("code",[t._v("false")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以我们可以理解为 "),s("code",[this._v("inSingle")]),this._v(" 变量的作用是用来标识当前读取的字符是否在由单引号包裹的字符串中。同样的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("inDouble")]),t._v(" 变量是用来标识当前读取的字符是否在由 "),a("strong",[t._v("双引号")]),t._v(" 包裹的字符串中。")]),a("li",[a("code",[t._v("inTemplateString")]),t._v(" 变量是用来标识当前读取的字符是否在 "),a("strong",[t._v("模板字符串")]),t._v(" 中。")]),a("li",[a("code",[t._v("inRegex")]),t._v(" 变量是用来标识当前读取的字符是否在 "),a("strong",[t._v("正则表达式")]),t._v(" 中。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" curly "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" square "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" paren "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上三个变量的初始值都为 "),s("code",[this._v("0")]),this._v("，其作用如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("在解析绑定的属性值时，每遇到一个左花括号("),a("code",[t._v("{")]),t._v(")，则 "),a("code",[t._v("curly")]),t._v(" 变量的值就会加一，每遇到一个右花括号("),a("code",[t._v("}")]),t._v(")，则 "),a("code",[t._v("curly")]),t._v(" 变量的值就会减一。")]),a("li",[t._v("在解析绑定的属性值时，每遇到一个左方括号("),a("code",[t._v("[")]),t._v(")，则 "),a("code",[t._v("square")]),t._v(" 变量的值就会加一，每遇到一个右方括号("),a("code",[t._v("]")]),t._v(")，则 "),a("code",[t._v("square")]),t._v(" 变量的值就会减一。")]),a("li",[t._v("在解析绑定的属性值时，每遇到一个左圆括号("),a("code",[t._v("(")]),t._v(")，则 "),a("code",[t._v("paren")]),t._v(" 变量的值就会加一，每遇到一个右圆括号("),a("code",[t._v(")")]),t._v(")，则 "),a("code",[t._v("paren")]),t._v(" 变量的值就会减一。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当 "),s("code",[this._v("parseFilters")]),this._v(" 函数在解析属性值字符串并遇到一个管道符时，该管道符应不应该作为过滤器的分界线还要看以上三个变量是否为 "),s("code",[this._v("0")]),this._v("，如果以上三个变量至少有一个不为 "),s("code",[this._v("0")]),this._v("，则说明该管道符存在于花括号或方括号或圆括号之内，这时该管道符是不会被作为过滤器的分界线的，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("(aa | bb)"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上代码中绑定属性 "),s("code",[this._v("key")]),this._v(" 的属性值中包含一个管道符，但是由于该管道符存在于圆括号内，所以它不会被作为过滤器的分界线。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" lastFilterIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prev"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expression"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filters\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里简单介绍一下这些变量的作用，更具体的将会在源码中讲解。"),a("code",[t._v("lastFilterIndex")]),t._v(" 变量的初始值为 "),a("code",[t._v("0")]),t._v("，它的值是属性值字符串中字符的索引，将会被用来确定过滤器的位置。变量 "),a("code",[t._v("c")]),t._v(" 为当前字符对应的 "),a("code",[t._v("ASCII")]),t._v(" 码，我们知道在解析属性值时会以字符流的方式逐个字符读入，而变量 "),a("code",[t._v("c")]),t._v(" 就是当前读入字符所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码。变量 "),a("code",[t._v("prev")]),t._v(" 保存的则是当前字符的前一个字符所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码。变量 "),a("code",[t._v("i")]),t._v(" 为当前读入字符的位置索引。变量 "),a("code",[t._v("expression")]),t._v(" 将是 "),a("code",[t._v("parseFilters")]),t._v(" 函数的返回值。变量 "),a("code",[t._v("filters")]),t._v(" 将来会是一个数组，它保存着所有过滤器函数名。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下将进入一个 "),s("code",[this._v("for")]),this._v(" 循环：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个 "),s("code",[this._v("for")]),this._v(" 循环是整个 "),s("code",[this._v("parseFilters")]),this._v(" 函数的核心，它的作用就是将属性值字符串作为字符流读入，从第一个字符开始一直读到字符串的末尾，在 "),s("code",[this._v("for")]),this._v(" 循环的开头执行的是如下两句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  prev "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" c")]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  c "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到每次循环的开始，都会将上一次读取的字符所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码赋值给 "),a("code",[t._v("prev")]),t._v(" 变量，然后再将变量 "),a("code",[t._v("c")]),t._v(" 的值设置为当前读取字符所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码。所以我们说 "),a("code",[t._v("prev")]),t._v(" 变量中保存的是上一个字符的 "),a("code",[t._v("ASCII")]),t._v(" 码。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在这两句代码的下面是一连串的 "),s("code",[this._v("if...elseif...else")]),this._v(" 语句，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prev "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" c\n  c "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inSingle"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 如果当前读取的字符存在于由单引号包裹的字符串内，则会执行这里的代码")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inDouble"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 如果当前读取的字符存在于由双引号包裹的字符串内，则会执行这里的代码")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inTemplateString"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 如果当前读取的字符存在于模板字符串内，则会执行这里的代码")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inRegex"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 如果当前读取的字符存在于正则表达式内，则会执行这里的代码")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    c "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7C")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// pipe")]),t._v("\n    exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7C")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7C")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("curly "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("square "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("paren\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 如果当前读取的字符是过滤器的分界线，则会执行这里的代码")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 当不满足以上条件时，执行这里的代码")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先来看第一段 "),s("code",[this._v("if")]),this._v(" 条件语句的判断：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inSingle"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x27")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" prev "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x5C")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" inSingle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该判断条件检测了 "),a("code",[t._v("inSingle")]),t._v(" 变量是否为真，如果为真则说明当前读入的字符存在于由单引号包裹的字符串内，此时会执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，可以看到在 "),a("code",[t._v("if")]),t._v(" 条件语句块内同样是一个 "),a("code",[t._v("if")]),t._v(" 判断语句，它的判断条件为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("c "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x27")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" prev "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x5C")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这个判断条件是什么意思呢？可以看到如上判断条件中有两个十六进制的数字："),a("code",[t._v("0x27")]),t._v(" 和 "),a("code",[t._v("0x5C")]),t._v("，这两个十六进制的数字实际上就是字符的 "),a("code",[t._v("ASCII")]),t._v(" 码，其中 "),a("code",[t._v("0x27")]),t._v(" 为字符单引号("),a("code",[t._v("'")]),t._v(")所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码，而 "),a("code",[t._v("0x5C")]),t._v(" 则是字符反斜杠("),a("code",[t._v("\\")]),t._v(")所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码。所以如上判断条件翻译过来就是：当前字符是单引号("),a("code",[t._v("'")]),t._v(")，并且当前字符的前一个字符不是反斜杠("),a("code",[t._v("\\")]),t._v(")，也就是说当前字符("),a("code",[t._v("单引号")]),t._v(")就是字符串的结束。该判断条件的关键在于不仅要当前字符是单引号("),a("code",[t._v("'")]),t._v(")，同时前一个字符也一定不能是反斜杠才行，这是因为反斜杠在字符串内具有转义的作用。如果判断条件成立，则将 "),a("code",[t._v("inSingle")]),t._v(" 变量的值设置为 "),a("code",[t._v("false")]),t._v("，代表接下来的解析工作已经不处于由单引号所包裹的字符串环境中了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再来看下一个 "),s("code",[this._v("elseif")]),this._v(" 判断分支：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inDouble"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x22")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" prev "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x5C")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" inDouble "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("与单引号的情况类似，该 "),a("code",[t._v("elseif")]),t._v(" 条件语句检查了变量 "),a("code",[t._v("inDouble")]),t._v(" 是否为真，如果为真则说明当前字符处于由双引号包裹的字符串中，此时会检查当前字符所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码是否等于 "),a("code",[t._v("0x22")]),t._v("，这里的数字 "),a("code",[t._v("0x22")]),t._v(" 就是字符双引号("),a("code",[t._v('"')]),t._v(")所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码。所以如上判断语句成立则等价于：当前字符是双引号，并且前一个字符不是转义字符("),a("code",[t._v("\\")]),t._v(")。这说明当前字符("),a("code",[t._v("双引号")]),t._v(")就应该是字符串的结束，此时会将变量 "),a("code",[t._v("inDouble")]),t._v(" 的值设置为 "),a("code",[t._v("false")]),t._v("，代表接下来的解析工作已经不处于由双引号所包裹的字符串环境中了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再接着是如下判断分支，它同时是一个 "),s("code",[this._v("elseif")]),this._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inTemplateString"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x60")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" prev "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x5C")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" inTemplateString "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这个判断语句与前两个判断语句类似，如果该 "),a("code",[t._v("elseif")]),t._v(" 语句的条件成立，则说明当前字符处在模板字符串中，此时会继续检测当前字符所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码是否等于 "),a("code",[t._v("0x60")]),t._v("，这里的数字 "),a("code",[t._v("0x60")]),t._v(" 就是字符 "),a("code",[t._v("`")]),t._v(" 所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码。所以如上判断语句成立则等价于：当前字符是 "),a("code",[t._v("`")]),t._v("，并且前一个字符不是转义字符("),a("code",[t._v("\\")]),t._v(")。这说明当前字符("),a("code",[t._v("`")]),t._v(")就应该是模板字符串的结束，此时会将变量 "),a("code",[t._v("inTemplateString")]),t._v(" 的值设置为 "),a("code",[t._v("false")]),t._v("，代表接下来的解析工作已经不处于模板字符串环境中了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再来看下一个 "),s("code",[this._v("elseif")]),this._v(" 条件语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inRegex"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x2f")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" prev "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x5C")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" inRegex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果该 "),a("code",[t._v("elseif")]),t._v(" 语句的条件成立，则说明当前字符处在正则表达式中，此时会继续检测当前字符所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码是否等于 "),a("code",[t._v("0x2f")]),t._v("，这里的数字 "),a("code",[t._v("0x2f")]),t._v(" 就是字符 "),a("code",[t._v("/")]),t._v(" 所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码。所以如上判断语句成立则等价于：当前字符是 "),a("code",[t._v("/")]),t._v("，并且前一个字符不是转义字符("),a("code",[t._v("\\")]),t._v(")。这说明当前字符("),a("code",[t._v("/")]),t._v(")就应该是正则表达式的结束，此时会将变量 "),a("code",[t._v("inRegex")]),t._v(" 的值设置为 "),a("code",[t._v("false")]),t._v("，代表接下来的解析工作已经不处于正则表达式的环境中了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下的一个 "),s("code",[this._v("elseif")]),this._v(" 条件语句的判断条件稍微复杂一些，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  c "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7C")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// pipe")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7C")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7C")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("curly "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("square "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("paren\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上判断条件中的数字 "),s("code",[this._v("0x7C")]),this._v(" 为管道符("),s("code",[this._v("|")]),this._v(")所对应的 "),s("code",[this._v("ASCII")]),this._v(" 码，如果以上条件成立，则说明当前字符为管道符，实际上这个判断条件是用来检测当前遇到的管道符是否是过滤器的分界线。如果一个管道符是过滤器的分界线则必须满足以上条件，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、当前字符所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码必须是 "),a("code",[t._v("0x7C")]),t._v("，即当前字符必须是管道符。")]),a("li",[t._v("2、该字符的后一个字符不能是管道符。")]),a("li",[t._v("3、该字符的前一个字符不能是管道符。")]),a("li",[t._v("4、该字符不能处于花括号、方括号、圆括号之内")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果一个字符满足以上条件，则说明该字符就是用来作为过滤器分界线的管道符。此时该 "),s("code",[this._v("elseif")]),this._v(" 语句块内的代码将被执行，不过我们暂时跳过，来看最后一个 "),s("code",[this._v("else")]),this._v(" 语句。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当以上所有判断分支全部无效之后，代码会来到 "),s("code",[this._v("else")]),this._v(" 分支，假设我们有如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("id"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此时传递给 "),a("code",[t._v("parseFilters")]),t._v(" 函数的字符串就应该是 "),a("code",[t._v("'id'")]),t._v("，该字符串有四个字符，第一个字符为单引号，我们尝试按照 "),a("code",[t._v("parseFilters")]),t._v(" 函数的执行过程对该字符串进行解析。首先读取该字符串的第一个字符，即单引号 "),a("code",[t._v("’")]),t._v("，接着会判断 "),a("code",[t._v("inSingle")]),t._v(" 变量是否为真，由于 "),a("code",[t._v("inSingle")]),t._v(" 变量的初始值为 "),a("code",[t._v("false")]),t._v("，所以会继续判断下一个条件分支，同样的由于 "),a("code",[t._v("inDouble")]),t._v("、"),a("code",[t._v("inTemplateString")]),t._v("、"),a("code",[t._v("inRegex")]),t._v(" 等变量的初始值都为 "),a("code",[t._v("false")]),t._v("，并且该字符是单引号而不是管道符，所以接下来的任何一个 "),a("code",[t._v("elseif")]),t._v(" 分支语句块内的代码都不会被执行。所以最终 "),a("code",[t._v("else")]),t._v(" 语句块内的代码将被执行。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("else")]),this._v(" 语句块内，首先执行的是一段 "),s("code",[this._v("switch")]),this._v(" 语句，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x22")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" inDouble "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("         "),a("span",{attrs:{class:"token comment"}},[t._v('// "')]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x27")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" inSingle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("         "),a("span",{attrs:{class:"token comment"}},[t._v("// '")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x60")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" inTemplateString "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// `")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x28")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" paren"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("                 "),a("span",{attrs:{class:"token comment"}},[t._v("// (")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x29")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" paren"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("                 "),a("span",{attrs:{class:"token comment"}},[t._v("// )")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x5B")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" square"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("                "),a("span",{attrs:{class:"token comment"}},[t._v("// [")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x5D")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" square"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("                "),a("span",{attrs:{class:"token comment"}},[t._v("// ]")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7B")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" curly"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("                 "),a("span",{attrs:{class:"token comment"}},[t._v("// {")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7D")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" curly"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("                 "),a("span",{attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段 "),s("code",[this._v("switch")]),this._v(" 语句的作用总结如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("如果当前字符为双引号("),a("code",[t._v('"')]),t._v(")，则将 "),a("code",[t._v("inDouble")]),t._v(" 变量的值设置为 "),a("code",[t._v("true")]),t._v("。")]),a("li",[t._v("如果当前字符为单引号("),a("code",[t._v("‘")]),t._v(")，则将 "),a("code",[t._v("inSingle")]),t._v(" 变量的值设置为 "),a("code",[t._v("true")]),t._v("。")]),a("li",[t._v("如果当前字符为模板字符串的定义字符("),a("code",[t._v("`")]),t._v(")，则将 "),a("code",[t._v("inTemplateString")]),t._v(" 变量的值设置为 "),a("code",[t._v("true")]),t._v("。")]),a("li",[t._v("如果当前字符是左圆括号("),a("code",[t._v("(")]),t._v(")，则将 "),a("code",[t._v("paren")]),t._v(" 变量的值加一。")]),a("li",[t._v("如果当前字符是右圆括号("),a("code",[t._v(")")]),t._v(")，则将 "),a("code",[t._v("paren")]),t._v(" 变量的值减一。")]),a("li",[t._v("如果当前字符是左方括号("),a("code",[t._v("[")]),t._v(")，则将 "),a("code",[t._v("square")]),t._v(" 变量的值加一。")]),a("li",[t._v("如果当前字符是右方括号("),a("code",[t._v("]")]),t._v(")，则将 "),a("code",[t._v("square")]),t._v(" 变量的值减一。")]),a("li",[t._v("如果当前字符是左花括号("),a("code",[t._v("{")]),t._v(")，则将 "),a("code",[t._v("curly")]),t._v(" 变量的值加一。")]),a("li",[t._v("如果当前字符是右花括号("),a("code",[t._v("}")]),t._v(")，则将 "),a("code",[t._v("curly")]),t._v(" 变量的值减一。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("假设我们还是解析字符串 "),a("code",[t._v("'id'")]),t._v("，该字符串的第一个字符为单引号，我们知道当解析该字符串的第一个字符时会执行 "),a("code",[t._v("else")]),t._v(" 语句块内的代码，所以如上 "),a("code",[t._v("switch")]),t._v(" 语句将被执行，并且 "),a("code",[t._v("inSingle")]),t._v(" 变量的值将被设置为 "),a("code",[t._v("true")]),t._v("。接着会解析第二个字符 "),a("code",[t._v("i")]),t._v("，由于此时 "),a("code",[t._v("inSingle")]),t._v(" 变量的值已经为真，所以如下代码将被执行：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inSingle"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x27")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" prev "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x5C")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" inSingle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("但是很显然字符 "),a("code",[t._v("i")]),t._v(" 所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码不等于 "),a("code",[t._v("0x27")]),t._v("，所以这等于什么都没做，直接跳过解析下一个字符。下一个字符是 "),a("code",[t._v("d")]),t._v("，它的情况与字符 "),a("code",[t._v("i")]),t._v(" 一样，也会被跳过。直到遇到最后一个字符 "),a("code",[t._v("'")]),t._v("，该字符同样是单引号，所以此时会将 "),a("code",[t._v("inSingle")]),t._v(" 变量的值设置为 "),a("code",[t._v("false")]),t._v("，意味着由单引号包裹的字符串结束了。所以通过以上分析我们得知一件事情，即只要存在于由单引号包裹的字符串内的字符都将被跳过。这么做的目的就是为了避免误把存在于字符串中的管道符当做过滤器的分界线，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("id|featId"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可看到绑定属性 "),s("code",[this._v("key")]),this._v(" 的属性值为 "),s("code",[this._v("'id|featId'")]),this._v("，由于管道符 "),s("code",[this._v("|")]),this._v(" 存在于由单引号所包裹的字符串内，所以该管道符不会被作为过滤器的分界线，这是非常合理的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("同样的道理，对于存在于由双引号包裹的字符串中或模板字符串中或正则表达式中的管道符，也不会被作为过滤器的分界线。对于双引号和模板字符串的判断是很容易的，它们的原理与单引号类似。难点在于如何判断正则，或者换句话说我们应该在什么情况下才能将 "),s("code",[this._v("inRegex")]),this._v(" 变量的值设置为 "),s("code",[this._v("true")]),this._v("。如下是 "),s("code",[this._v("else")]),this._v(" 语句块内用来判断是否即将进入正则环境的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x2f")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// /")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// find first non-whitespace prev char")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    p "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("charAt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("p "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("validDivisionCharRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inRegex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码是一个 "),a("code",[t._v("if")]),t._v(" 判断语句，它用来判断当前字符所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码是否等于数字 "),a("code",[t._v("0x2f")]),t._v("，其中数字 "),a("code",[t._v("0x2f")]),t._v(" 就是字符 "),a("code",[t._v("/")]),t._v(" 所对应的 "),a("code",[t._v("ASCII")]),t._v(" 码。我们知道正则表达式就是以字符 "),a("code",[t._v("/")]),t._v(" 开头的，所以当遇到字符 "),a("code",[t._v("/")]),t._v(" 时，则说明该字符有可能是正则的开始。但至于到底是不是正则的开始还真不一定，前面我们已经提到过了，字符 "),a("code",[t._v("/")]),t._v(" 还有除法的意义。而判断字符 "),a("code",[t._v("/")]),t._v(" 到底是正则的开始还是除法却是一件不容易的事情。实际上如上代码根本不足以保证所遇到的字符 "),a("code",[t._v("/")]),t._v(" 就是正则表达式，但还是那句话，这对于 "),a("code",[t._v("Vue")]),t._v(" 而言已经足够了，我们没必要花大力气在收益很小的地方。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那我们就来看看如上代码是如何来确定字符 "),a("code",[t._v("/")]),t._v(" 是正则的开始的，首先我们要明确如果上面这段 "),a("code",[t._v("if")]),t._v(" 条件语句成立，则说明当前字符为 "),a("code",[t._v("/")]),t._v("，此时 "),a("code",[t._v("if")]),t._v(" 语句块内的代码将被执行，在 "),a("code",[t._v("if")]),t._v(" 语句块内定义了变量 "),a("code",[t._v("j")]),t._v("，它的值为 "),a("code",[t._v("i - 1")]),t._v("，也就是说变量 "),a("code",[t._v("j")]),t._v(" 是 "),a("code",[t._v("/")]),t._v(" 字符的前一个字符的索引。然后又定义了变量 "),a("code",[t._v("p")]),t._v("，接着开启一个 "),a("code",[t._v("for")]),t._v(" 循环，这个 "),a("code",[t._v("for")]),t._v(" 循环的作用是找到 "),a("code",[t._v("/")]),t._v(" 字符之前第一个不为空的字符。如果没找到则说明字符 "),a("code",[t._v("/")]),t._v(" 之前的所有字符都是空格，或根本就没有字符，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/a/.test("),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("abc"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v(")"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("      "),a("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 第一个 `/` 之前就没有字符  --\x3e")]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("    /a/.test("),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("abc"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v(")"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 第一个 `/` 之前都是空格  --\x3e")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以以上两种情况，第一个 "),s("code",[this._v("/")]),this._v(" 都应该是正则的开始，而非除法。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("但是假如字符 "),a("code",[t._v("/")]),t._v(" 之前有非空的字符，则只有在该字符不满足正则 "),a("code",[t._v("validDivisionCharRE")]),t._v(" 的情况下，才会认为字符 "),a("code",[t._v("/")]),t._v(" 为正则的开始。来看一下正则常量 "),a("code",[t._v("validDivisionCharRE")]),t._v("，该正则常量定义在 "),a("code",[t._v("parseFilters")]),t._v(" 函数的前面，如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("const")]),this._v(" validDivisionCharRE "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token regex"}},[this._v("/[\\w).+\\-_$\\]]/")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该正则用来匹配一个字符，这个字符应该是字母、数字、"),a("code",[t._v(")")]),t._v("、"),a("code",[t._v(".")]),t._v("、"),a("code",[t._v("+")]),t._v("、"),a("code",[t._v("-")]),t._v("、"),a("code",[t._v("_")]),t._v("、"),a("code",[t._v("$")]),t._v("、"),a("code",[t._v("]")]),t._v(" 之一。再来看如下高亮的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x2f")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// /")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// find first non-whitespace prev char")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    p "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("charAt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("p "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("validDivisionCharRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    inRegex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("}")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到如果条件 "),a("code",[t._v("!validDivisionCharRE.test(p)")]),t._v(" 成立则也会认为当前字符 "),a("code",[t._v("/")]),t._v(" 是正则的开始。条件 "),a("code",[t._v("!validDivisionCharRE.test(p)")]),t._v(" 成立说明字符 "),a("code",[t._v("/")]),t._v(" 之前的字符不能是正则 "),a("code",[t._v("validDivisionCharRE")]),t._v(" 所匹配的任何一个字符，否则当前字符 "),a("code",[t._v("/")]),t._v(" 就不被认为是正则的开始。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上是 "),s("code",[this._v("Vue")]),this._v(" 的做法，但我们已经说过了，这不足以对字符 "),s("code",[this._v("/")]),this._v(" 的意义做出准确的判断，但是对 "),s("code",[this._v("Vue")]),this._v(" 而言足够了。其实我们可以很容易的找出反例，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("a + /a/.test("),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("abc"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v(")"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("实际上在表达式 "),a("code",[t._v("a + /a/.test('abc')")]),t._v(" 中出现的斜杠("),a("code",[t._v("/")]),t._v(")的确是定义了正则，但 "),a("code",[t._v("Vue")]),t._v(" 却不认为它是正则，因为第一个斜杠之前的第一个不为空的字符为加号 "),a("code",[t._v("+")]),t._v("。加号存在于正则 "),a("code",[t._v("validDivisionCharRE")]),t._v(" 中，所以 "),a("code",[t._v("Vue")]),t._v(" 不认为这里的斜杠是正则的定义。但实际上如上代码简直就是没有任何意义的，假如你非得这么写，那你也完全可以使用计算属性替代。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("了解了这些，我们发现 "),s("code",[this._v("else")]),this._v(" 语句块内的代码就是用来检查环境的，这里的环境指的是字符串环境或正则环境，或圆括号、方括号以及花括号等环境，这些环境信息将会被用到其他判断分支的条件语句。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们来看一下之前没有讲解的一段 "),s("code",[this._v("elseif")]),this._v(" 条件语句块，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  c "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7C")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// pipe")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7C")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7C")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("curly "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("square "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("paren\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// first filter, end of expression")]),t._v("\n    lastFilterIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n    expression "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("pushFilter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在本节的前面，我们已经讲解过了该条件语句块的判断条件，如果以上条件成立，则说明当前字符为管道符，并且该管道符就是过滤器的分界线。接着来看 "),a("code",[t._v("elseif")]),t._v(" 语句块内的代码，首先判断了 "),a("code",[t._v("expression")]),t._v(" 变量是否存在，我们知道 "),a("code",[t._v("expression")]),t._v(" 变量的初始值为 "),a("code",[t._v("undefined")]),t._v("，所以当程序在解析字符串时第一次遇到作为过滤器分界线的管道符时，将会执行如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// first filter, end of expression")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  lastFilterIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  expression "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮的两句代码所示，首先将变量 "),a("code",[t._v("lastFilterIndex")]),t._v(" 的值设置为 "),a("code",[t._v("i + 1")]),t._v("，变量 "),a("code",[t._v("i")]),t._v(" 就是当前遇到的管道符的位置索引，所以 "),a("code",[t._v("i + 1")]),t._v(" 就应该是管道符下一个字符的位置索引，所以我们可以把 "),a("code",[t._v("lastFilterIndex")]),t._v(" 变量理解为过滤器的开始。接着对字符串 "),a("code",[t._v("exp")]),t._v(" 进行截取，其截取的位置恰好是索引为 "),a("code",[t._v("i")]),t._v(" 的字符，也就是管道符，当然了截取后生成的新字符串是不包含管道符的，同时对截取后生成的新字符串使用 "),a("code",[t._v("trim")]),t._v(" 方法去除前后空格，最后将处理后的结果赋值给 "),a("code",[t._v("expression")]),t._v(" 表达式。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了更直观地理解 "),s("code",[this._v("lastFilterIndex")]),this._v(" 变量和 "),s("code",[this._v("expression")]),this._v(" 变量，我们举个例子。假设我们有如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id | featId"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("对于字符串 "),a("code",[t._v("'id | featId'")]),t._v(" 来讲，其中的管道符是过滤器的分界线，其位置索引为 "),a("code",[t._v("3")]),t._v("，所以 "),a("code",[t._v("lastFilterIndex")]),t._v(" 的值应该是管道符后一个字符的位置索引 "),a("code",[t._v("4")]),t._v("。此时 "),a("code",[t._v("expression")]),t._v(" 变量的值就应该是 "),a("code",[t._v("exp.slice(0, 3).trim()")]),t._v("，所以 "),a("code",[t._v("expression")]),t._v(" 的值就应该是字符串 "),a("code",[t._v("'id'")]),t._v("，这样就把表达式提取了出来，并使用 "),a("code",[t._v("expression")]),t._v(" 变量保存。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此时对于管道符的解析工作就结束了，"),a("code",[t._v("for")]),t._v(" 循环开始解析下一个字符，直到所有字符解析完毕。当 "),a("code",[t._v("for")]),t._v(" 循环结束时，变量 "),a("code",[t._v("i")]),t._v(" 的值应该是字符串的长度。同时 "),a("code",[t._v("expression")]),t._v(" 变量中保存着过滤器分界线之前的字符串，也就是表达式。但是过滤器怎么办呢？接着来看 "),a("code",[t._v("for")]),t._v(" 循环之后的这段代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  expression "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastFilterIndex "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("pushFilter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("for")]),this._v(" 循环结束之后将会执行如上代码，这段代码由 "),s("code",[this._v("if...elseif")]),this._v(" 条件语句块组成，首先检查 "),s("code",[this._v("expression")]),this._v(" 是否存在，还是拿如下这个例子来说：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id | featId"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们知道在解析字符串 "),a("code",[t._v("'id | featId'")]),t._v(" 之后，"),a("code",[t._v("expression")]),t._v(" 的值应该是字符串 "),a("code",[t._v("'id'")]),t._v("，所以 "),a("code",[t._v("if")]),t._v(" 条件语句块的内容不会被执行，此时会进入 "),a("code",[t._v("elseif")]),t._v(" 条件语句的判断，即："),a("code",[t._v("lastFilterIndex !== 0")]),t._v("，还是拿上例来说，此时 "),a("code",[t._v("lastFilterIndex")]),t._v(" 变量的值应该是作为过滤器分界线的管道符后一个字符的位置索引，所以 "),a("code",[t._v("lastFilterIndex")]),t._v(" 变量的值为 "),a("code",[t._v("4")]),t._v("，由于它不等于 "),a("code",[t._v("0")]),t._v("，所以 "),a("code",[t._v("elseif")]),t._v(" 语句块内的代码将被执行，可以看到在 "),a("code",[t._v("elseif")]),t._v(" 语句块内直接调用了 "),a("code",[t._v("pushFilter")]),t._v(" 函数。该函数的源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pushFilter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filters "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filters "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastFilterIndex"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  lastFilterIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先检查变量 "),a("code",[t._v("filters")]),t._v(" 是否存在，如果不存在则将其初始化为空数组，接着使用 "),a("code",[t._v("slice")]),t._v(" 方法对字符串 "),a("code",[t._v("exp")]),t._v(" 进行截取，截取的开始和结束位置恰好是 "),a("code",[t._v("lastFilterIndex")]),t._v(" 和 "),a("code",[t._v("i")]),t._v("。还是拿之前的例子来说，下图展示了此时变量 "),a("code",[t._v("lastFilterIndex")]),t._v(" 和 变量 "),a("code",[t._v("i")]),t._v(" 所指向的字符：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://7xlolm.com1.z0.glb.clouddn.com/2018-07-08-153103.png",alt:""}})])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("其中 "),a("code",[t._v("lastFilterIndex")]),t._v(" 指向的是管道符后面的空格，这里大家需要注意的是变量 "),a("code",[t._v("i")]),t._v(" 指向的既不是字符 "),a("code",[t._v("d")]),t._v(" 也不是引号 "),a("code",[t._v('"')]),t._v("，而是字符 "),a("code",[t._v("d")]),t._v(" 后面的字符，这个字符是不存在的。知道了这些，我们就可以知道如下表达式的值：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastFilterIndex"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该表达式的值就应该是字符串 "),a("code",[t._v("'featId'")]),t._v("，而这个字符串就代表着过滤器函数的名字，它将被添加到数组 "),a("code",[t._v("filters")]),t._v(" 中。不过我们可以看到 "),a("code",[t._v("pushFilter")]),t._v(" 函数的第二句代码："),a("code",[t._v("lastFilterIndex = i + 1")]),t._v("，这里又将 "),a("code",[t._v("lastFilterIndex")]),t._v(" 变量的值设置为 "),a("code",[t._v("i + 1")]),t._v("，为什么要这么做呢？实际上我们之前所举的例子不足以体现出这句代码的作用，我们来看接下来的例子：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id | featId | featId2"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码所示，我们不仅仅拥有一个过滤器，而是有两个过滤器，分别是 "),a("code",[t._v("featId")]),t._v(" 和 "),a("code",[t._v("featId2")]),t._v("。当 "),a("code",[t._v("parseFilters")]),t._v(" 函数在解析字符串 "),a("code",[t._v("'id | featId | featId2'")]),t._v(" 时，会遇到两个被作为过滤器分界线的管道符，再来看如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  c "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7C")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// pipe")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7C")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x7C")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("curly "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("square "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("paren\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// first filter, end of expression")]),t._v("\n    lastFilterIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n    expression "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("pushFilter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当遇到第一个管道符时 "),a("code",[t._v("lastFilterIndex")]),t._v(" 变量是第一个管道符后一个字符的索引。当遇到第二个管道符时由于此时变量 "),a("code",[t._v("expression")]),t._v(" 已经保存了表达式字符串 "),a("code",[t._v("'id'")]),t._v("，所以将会执行 "),a("code",[t._v("else")]),t._v(" 分支的代码，即调用 "),a("code",[t._v("pushFilter")]),t._v(" 函数，要知道此时变量 "),a("code",[t._v("i")]),t._v(" 已经是第二个管道符的位置索引了。我们再来看 "),a("code",[t._v("pushFilter")]),t._v(" 函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pushFilter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filters "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filters "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastFilterIndex"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  lastFilterIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("pushFilter")]),t._v(" 函数内会先将字符串 "),a("code",[t._v("'featId'")]),t._v(" 添加到数组，接着设置 "),a("code",[t._v("lastFilterIndex")]),t._v(" 变量的值为 "),a("code",[t._v("i + 1")]),t._v("，由于此时变量 "),a("code",[t._v("i")]),t._v(" 已经是第二个管道符的位置索引，所以 "),a("code",[t._v("i + 1")]),t._v(" 就应该是第二个管道符后一个字符串的位置索引，如下是此时的 "),a("code",[t._v("lastFilterIndex")]),t._v(" 变量的索引指向：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://7xlolm.com1.z0.glb.clouddn.com/2018-07-08-155227.png",alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着，解析工作会继续进行，直到解析结束，当解析结束时变量 "),s("code",[this._v("i")]),this._v(" 的值就应该是字符串的长度。此时 "),s("code",[this._v("for")]),this._v(" 循环也将结束，会继续执行 "),s("code",[this._v("for")]),this._v(" 循环之后的代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  expression "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastFilterIndex "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("pushFilter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此时代码依然会执行 "),a("code",[t._v("elseif")]),t._v(" 分支，再次调用 "),a("code",[t._v("pushFilter")]),t._v(" 函数，我们知道到目前为止我们只将字符串 "),a("code",[t._v("'featId'")]),t._v(" 添加到了 "),a("code",[t._v("filters")]),t._v(" 数组中，但我们有两个过滤器，所以还需要将字符串 "),a("code",[t._v("'featId2'")]),t._v(" 也添加到 "),a("code",[t._v("filters")]),t._v(" 数组才行，所以这里需要再次执行 "),a("code",[t._v("pushFilter")]),t._v(" 函数，不过不同的是，此时在 "),a("code",[t._v("pushFilter")]),t._v(" 函数中，"),a("code",[t._v("lastFilterIndex")]),t._v(" 变量已经指向了第二个管道符的后一个字符，而变量 "),a("code",[t._v("i")]),t._v(" 的值也变成了字符串的长度，所以此时被添加到 "),a("code",[t._v("filters")]),t._v(" 数组的字符串将会是 "),a("code",[t._v("'featId2'")]),t._v("。这样两个过滤器的名字就都被添加到 "),a("code",[t._v("filters")]),t._v(" 数组了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("经过以上代码的处理，对我们来讲最重要的两个变量分别是 "),s("code",[this._v("expression")]),this._v(" 和 "),s("code",[this._v("filters")]),this._v("，前者保存着表达式，后者则保存着所有过滤器的名字，假设我们有如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id | a | b | c"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那么经过解析，变量 "),a("code",[t._v("expression")]),t._v(" 的值将是字符串 "),a("code",[t._v("'id'")]),t._v("，且 "),a("code",[t._v("filters")]),t._v(" 数组中将包含三个元素："),a("code",[t._v("['a', 'b', 'c']")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filters"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" filters"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    expression "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("wrapFilter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filters"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码检查了 "),a("code",[t._v("filters")]),t._v(" 是否存在，实际上如果绑定的值没有过滤器，则整个字符串都会被作为表达式的值，此时变量 "),a("code",[t._v("filters")]),t._v(" 将为 "),a("code",[t._v("undefined")]),t._v("，代表着没有过滤器。当有过滤器时，该 "),a("code",[t._v("if")]),t._v(" 语句块内的代码将被执行，在 "),a("code",[t._v("if")]),t._v(" 语句块内使用 "),a("code",[t._v("for")]),t._v(" 循环对 "),a("code",[t._v("filters")]),t._v(" 数组进行了遍历，在循环内部调用了 "),a("code",[t._v("wrapFilter")]),t._v(" 函数，如下是该函数的源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("wrapFilter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filter"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" filter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'('")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// _f: resolveFilter")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`_f("')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("filter"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('")(')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("exp"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")`")])]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" filter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" args "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" filter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`_f("')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('")(')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("exp"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("args "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("')'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("','")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" args "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" args"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("wrapFilter")]),this._v(" 函数接收两个参数，第一个参数是表达式字符串，第二个参数过滤器名字，假设我们有如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id | a | b"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此时表达式字符串应该是 "),a("code",[t._v("'id'")]),t._v("，并且 "),a("code",[t._v("wrapFilter")]),t._v(" 应该会被调用两次，第一次被调用时过滤器的名字为 "),a("code",[t._v("'a'")]),t._v("，来看 "),a("code",[t._v("wrapFilter")]),t._v(" 函数内的第一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("wrapFilter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filter"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" filter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'('")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("使用 "),a("code",[t._v("indexOf")]),t._v(" 方法检查过滤器的名字中是否包含左圆括号，我们知道过滤器函数是可以以函数调用的方式编写的，并且可以为其传递参数，但上例中我们的两个过滤器 "),a("code",[t._v("a")]),t._v(" 和 "),a("code",[t._v("b")]),t._v(" 都不是函数调用，所以此时变量 "),a("code",[t._v("i")]),t._v(" 等于 "),a("code",[t._v("-1")]),t._v("，这时 "),a("code",[t._v("if")]),t._v(" 语句块内的代码将被执行，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("wrapFilter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filter"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" filter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'('")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// _f: resolveFilter")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`_f("')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("filter"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('")(')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("exp"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")`")])])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可知 "),a("code",[t._v("wrapFilter")]),t._v(" 函数返回了字符串："),a("code",[t._v("'_f(\"a\")(id)'")]),t._v("。接着会进行第二次对 "),a("code",[t._v("wrapFilter")]),t._v(" 函数的调用，此时传递给 "),a("code",[t._v("wrapFilter")]),t._v(" 函数的参数都会有变化，其中表达式字符串 "),a("code",[t._v("exp")]),t._v(" 已经变成了 "),a("code",[t._v("'_f(\"a\")(id)'")]),t._v("，为什么会变成该字符串呢？注意如下高亮的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filters"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" filters"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    expression "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("wrapFilter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filters"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到表达式字符串 "),a("code",[t._v("expression")]),t._v(" 每次都会被 "),a("code",[t._v("wrapFilter")]),t._v(" 函数的返回值重写，所以当第二次调用 "),a("code",[t._v("wrapFilter")]),t._v(" 函数时，第一个参数已经变成了 "),a("code",[t._v("'_f(\"a\")(id)'")]),t._v("，并且第二个应该是 "),a("code",[t._v("'b'")]),t._v("，由于字符 "),a("code",[t._v("'b'")]),t._v(" 依然不是函数调用，所以会继续执行 "),a("code",[t._v("wrapFilter")]),t._v(" 函数内的 "),a("code",[t._v("if")]),t._v(" 条件语句块，这时 "),a("code",[t._v("wrapFilter")]),t._v(" 将会返回字符串 "),a("code",[t._v("'_f('b')(_f(\"a\")(id))'")]),t._v("，以此类推如果还有第三个过滤器 "),a("code",[t._v("c")]),t._v("，则最终生成的表达式应该是 "),a("code",[t._v("'_f('c')(_f('b')(_f(\"a\")(id)))")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上 "),s("code",[this._v("_f")]),this._v(" 函数来自于 "),s("code",[this._v("src/core/instance/render-helpers/resolve-filter.js")]),this._v(" 文件，这个函数的作用就是接收一个过滤器的名字作为参数，然后找到相应的过滤器函数，这些内容我们放到后面会仔细讲解。当找到相应的过滤器函数之后会将表达式的值作为参数传递给该过滤器函数，同时该过滤器会返回经过处理之后的值，这个处理之后的值将作为下一个过滤器函数的参数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最终表达式字符串 "),s("code",[this._v("expression")]),this._v(" 的值就应该是一个类似 "),s("code",[this._v("'_f('c')(_f('b')(_f(\"a\")(id)))")]),this._v(" 的一个字符串。当然啦这是在存在过滤器的情况，假如没有过滤器的话，则 "),s("code",[this._v("expression")]),this._v(" 变量的值就是表达式字符串本身，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码中没有使用过滤器，所以此时 "),a("code",[t._v("expression")]),t._v(" 变量的值就是字符串 "),a("code",[t._v("'id'")]),t._v("。最后 "),a("code",[t._v("parseFilters")]),t._v(" 函数会将 "),a("code",[t._v("expression")]),t._v(" 变量作为返回值返回：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFilters")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" expression")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是对 "),s("code",[this._v("parseFilters")]),this._v(" 函数的讲解，它的作用是用来解析模板中出现的表达式与过滤器，并将它们处理成合适的表达式字符串。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们再回到 "),s("code",[this._v("getBindingAttr")]),this._v(" 函数，看如下高亮的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  getStatic"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("string "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dynamicValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("':'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-bind:'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dynamicValue "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFilters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dynamicValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("getStatic "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" staticValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticValue "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可知 "),s("code",[this._v("getBindingAttr")]),this._v(" 函数会先获取绑定属性的属性值，如果获取成功，则会使用 "),s("code",[this._v("parseFilters")]),this._v(" 函数解析该属性值，并将 "),s("code",[this._v("parseFilters")]),this._v(" 函数处理后的结果作为整个函数的返回值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着我们再回到 "),s("code",[this._v("processKey")]),this._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processKey")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" exp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'key'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'template'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`<template> cannot be keyed. Place the key on real elements instead.`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp")]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上高亮代码所示，如果一个标签使用了 "),s("code",[this._v("key")]),this._v(" 属性，则该标签的元素描述对象上将被添加 "),s("code",[this._v("el.key")]),this._v(" 属性，为了让大家更直观地理解 "),s("code",[this._v("el.key")]),this._v(" 属性的值，我们来做一些总结：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("例子一：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上例中 "),s("code",[this._v("div")]),this._v(" 标签的属性 "),s("code",[this._v("key")]),this._v(" 是非绑定属性，所以会将它的值作为普通字符串处理，这时 "),s("code",[this._v("el.key")]),this._v(" 属性的值为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("例子二：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上例中 "),s("code",[this._v("div")]),this._v(" 标签的属性 "),s("code",[this._v("key")]),this._v(" 是绑定属性，所以会将它的值作为表达式处理，而非普通字符串，这时 "),s("code",[this._v("el.key")]),this._v(" 属性的值为：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("el"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("key "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token string"}},[this._v("'id'")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("例子三：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":key")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("id | featId"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上例中 "),s("code",[this._v("div")]),this._v(" 标签的属性 "),s("code",[this._v("key")]),this._v(" 是绑定属性，并且应用了过滤器，所以会将它的值与过滤器整合在一起产生一个新的表达式，这时 "),s("code",[this._v("el.key")]),this._v(" 属性的值为：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("el"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("key "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token string"}},[this._v("'_f(\"featId\")(id)'")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是 "),s("code",[this._v("el.key")]),this._v(" 属性的所有可能值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"处理使用了ref属性的元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理使用了ref属性的元素","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理使用了ref属性的元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们讲解对于使用了 "),s("code",[this._v("ref")]),this._v(" 属性的标签是如何处理的，即 "),s("code",[this._v("processRef")]),this._v(" 函数，如下高亮的代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processKey")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// determine whether this is a plain element after")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// removing structural attributes")]),t._v("\n  element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processRef")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processSlot")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processComponent")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不过在讲解 "),s("code",[this._v("processRef")]),this._v(" 函数之前，我们注意到在该函数的上面，有这样一句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// determine whether this is a plain element after")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// removing structural attributes")]),t._v("\nelement"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("根据注释可知，这句代码的作用是："),a("strong",[t._v("当结构化的属性("),a("code",[t._v("structural attributes")]),t._v(")被移除之后，检查该元素是否是“纯”的")]),t._v("。什么是结构化的属性呢？我们来看一下 "),a("code",[t._v("parseHTML")]),t._v(" 函数中 "),a("code",[t._v("start")]),t._v(" 钩子函数内的一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRawAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// structural directives")])]),t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// element-scope stuff")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("注意如上代码中高亮的那句注释，可知 "),a("code",[t._v("v-for")]),t._v("、"),a("code",[t._v("v-if/v-else-if/v-else")]),t._v("、"),a("code",[t._v("v-once")]),t._v(" 等指令会被认为是结构化的指令("),a("code",[t._v("structural directives")]),t._v(")。这些指令在经过 "),a("code",[t._v("processFor")]),t._v("、"),a("code",[t._v("processIf")]),t._v(" 以及 "),a("code",[t._v("processOnce")]),t._v(" 等函数处理之后，会把这些指令从元素描述对象的 "),a("code",[t._v("attrsList")]),t._v(" 数组中移除。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// determine whether this is a plain element after")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// removing structural attributes")]),t._v("\nelement"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码判断了元素描述对象的 "),a("code",[t._v("key")]),t._v(" 属性是否存在，同时检查了元素描述对象的 "),a("code",[t._v("attrsList")]),t._v(" 数组是否为空。通过如上条件可知，"),a("strong",[t._v("只有当标签没有使用 "),a("code",[t._v("key")]),t._v(" 属性，并且标签只使用了结构化指令的情况下才被认为是“纯”的")]),t._v("，此时会将元素描述对象的 "),a("code",[t._v("plain")]),t._v(" 属性设置为 "),a("code",[t._v("true")]),t._v("。我们暂且记住这一点，当后面讲解静态优化和代码生成时我们会看到 "),a("code",[t._v("plain")]),t._v(" 属性的作用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着我们回到 "),s("code",[this._v("processRef")]),this._v(" 函数，如下是 "),s("code",[this._v("processRef")]),this._v(" 函数的源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processRef")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ref "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'ref'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ref"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ref\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("refInFor "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("checkInFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("processRef")]),t._v(" 函数接收元素描述对象作为参数，在 "),a("code",[t._v("processRef")]),t._v(" 函数内部首先通过 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数解析并获取元素 "),a("code",[t._v("ref")]),t._v(" 属性的值，则将结果赋值给 "),a("code",[t._v("ref")]),t._v(" 常量，如果解析并获取成功则会执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，在 "),a("code",[t._v("if")]),t._v(" 语句块内为元素的描述对象添加了 "),a("code",[t._v("el.ref")]),t._v(" 属性，它的值就是通过 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数解析后最终生成的表达式。由于在讲解 "),a("code",[t._v("el.key")]),t._v(" 属性时我们已经详细讲解过 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数可能产生的返回值，这里就不做过多解释了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("除了在元素描述对象上添加 "),a("code",[t._v("el.ref")]),t._v(" 属性，还会在元素描述对象上添加 "),a("code",[t._v("el.refInFor")]),t._v(" 属性，该属性是一个布尔值，标识着这个使用了 "),a("code",[t._v("ref")]),t._v(" 属性的标签是否存在于 "),a("code",[t._v("v-for")]),t._v(" 指令之内。检查方式是通过调用 "),a("code",[t._v("checkInFor")]),t._v(" 函数，如下是 "),a("code",[t._v("checkInFor")]),t._v(" 的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("checkInFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("checkInFor")]),t._v(" 函数接收元素的描述对象作为参数，在具体讲解 "),a("code",[t._v("checkInFor")]),t._v(" 函数的实现之前，我们需要确定的是：什么情况下应该认为 "),a("code",[t._v("ref")]),t._v(" 属性的使用是在 "),a("code",[t._v("v-for")]),t._v(" 指令之内？如下两段代码中的 "),a("code",[t._v("ref")]),t._v(" 属性都被认为是在 "),a("code",[t._v("v-for")]),t._v(" 指令之内的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 代码段一 --\x3e")]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("obj of list"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":ref")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("obj.id"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 代码段二 --\x3e")]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("obj of list"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":ref")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("obj.id"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以发现，如果一个标签使用了 "),a("code",[t._v("ref")]),t._v(" 属性，并且该标签或该标签的父代标签使用 "),a("code",[t._v("v-for")]),t._v(" 指令，则认为 "),a("code",[t._v("ref")]),t._v(" 属性是在 "),a("code",[t._v("v-for")]),t._v(" 指令之内的。所以要想判断 "),a("code",[t._v("ref")]),t._v(" 属性是否在 "),a("code",[t._v("v-for")]),t._v(" 指令之内，就需要从当前元素的描述对象开始一直遍历到根节点元素的描述对象，一旦发现存在某个标签，其元素描述对象的 "),a("code",[t._v("for")]),t._v(" 属性存在，则说明该标签使用 "),a("code",[t._v("v-for")]),t._v(" 指令。明白了这些再来看如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("checkInFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到，如上代码通过 "),a("code",[t._v("while")]),t._v(" 循环，从当前元素的描述对象开始，逐层向父级节点遍历，直到根节点为止，如果发现某标签的元素描述对象的 "),a("code",[t._v("for")]),t._v(" 属性不为 "),a("code",[t._v("undefined")]),t._v("，则函数返回 "),a("code",[t._v("true")]),t._v("，意味着当前元素所使用的 "),a("code",[t._v("ref")]),t._v(" 属性存在于 "),a("code",[t._v("v-for")]),t._v(" 指令之内。否则 "),a("code",[t._v("checkInFor")]),t._v(" 函数会返回 "),a("code",[t._v("false")]),t._v("，代表当前元素所使用的 "),a("code",[t._v("ref")]),t._v(" 属性不在 "),a("code",[t._v("v-for")]),t._v(" 指令之内。最终会在当前元素描述对象上添加 "),a("code",[t._v("el.refInFor")]),t._v(" 属性来保存该标识。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("由以上分析可知，如果一个标签使用了 "),s("code",[this._v("ref")]),this._v(" 属性，则：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、该标签的元素描述对象会被添加 "),a("code",[t._v("el.ref")]),t._v(" 属性，该属性为解析后生成的表达式字符串，与 "),a("code",[t._v("el.key")]),t._v(" 类似。")]),a("li",[t._v("2、该标签的元素描述对象会被添加 "),a("code",[t._v("el.refInFor")]),t._v(" 属性，它是一个布尔值，用来标识当前元素的 "),a("code",[t._v("ref")]),t._v(" 属性是否在 "),a("code",[t._v("v-for")]),t._v(" 指令之内使用。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("大家也许会有一个疑问，即为什么要检查 "),a("code",[t._v("ref")]),t._v(" 属性是否在 "),a("code",[t._v("v-for")]),t._v(" 指令之内使用呢？很简单，如果 "),a("code",[t._v("ref")]),t._v(" 属性存在于 "),a("code",[t._v("v-for")]),t._v(" 指令之内，我们需要创建一个组件实例或DOM节点的引用数组，而不是单一引用，这个时候就需要 "),a("code",[t._v("el.refInFor")]),t._v(" 属性来区分了。这些内容会在讲解 "),a("code",[t._v("$ref")]),t._v(" 属性的实现时详细阐述。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"处理-作用域-插槽"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理-作用域-插槽","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理(作用域)插槽")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们下一个要讲解的将是 "),s("code",[this._v("processSlot")]),this._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processKey")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// determine whether this is a plain element after")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// removing structural attributes")]),t._v("\n  element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRef")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processSlot")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processComponent")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("processSlot")]),this._v(" 函数用来处理插槽或作用域插槽相关的内容，关于插槽的使用，"),s("code",[this._v("Vue")]),this._v(" 文档讲的已经很明白了，这里不做赘述。但这里还是强调一下与插槽相关的使用形式：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、默认插槽：")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token punctuation"}},[this._v("<")]),this._v("slot")]),s("span",{attrs:{class:"token punctuation"}},[this._v(">")])]),s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token punctuation"}},[this._v("</")]),this._v("slot")]),s("span",{attrs:{class:"token punctuation"}},[this._v(">")])]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("2、具名插槽")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("slot")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("header"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("slot")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("3、插槽内容")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("slot")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("header"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("title"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("4、作用域插槽 - slot-scope")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("slot")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("header"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("slot-scope")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("slotProps"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{slotProps}}"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("5、作用域插槽 - scope")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("slot")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("header"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("scope")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("slotProps"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{slotProps}}"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("scope")]),t._v(" 只能使用在 "),a("code",[t._v("template")]),t._v(" 标签上，并且在 "),a("code",[t._v("2.5.0+")]),t._v(" 版本中已经被 "),a("code",[t._v("slot-scope")]),t._v(" 特性替代。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("实际上 "),a("code",[t._v("processSlot")]),t._v(" 函数就是用来解析以上标签并为这些标签的描述对象添加相应属性的，"),a("code",[t._v("processSlot")]),t._v(" 函数由一个 "),a("code",[t._v("if...else")]),t._v(" 语句块组成，我们先来看 "),a("code",[t._v("if")]),t._v(" 条件语句块内的代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processSlot")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'slot'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotName "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'name'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\`key\\` does not work on <slot> because slots are abstract outlets `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`and can possibly expand into multiple elements. `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Use the key on a wrapping element instead.`")])]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过 "),a("code",[t._v("if")]),t._v(" 语句的条件："),a("code",[t._v("el.tag === 'slot'")]),t._v("，可知 "),a("code",[t._v("if")]),t._v(" 语句块内的代码是用来处理 "),a("code",[t._v("<slot>")]),t._v(" 插槽标签的，所以如果当前标签是 "),a("code",[t._v("<slot>")]),t._v(" 标签，则 "),a("code",[t._v("if")]),t._v(" 语句块内的代码将会被执行，在 "),a("code",[t._v("if")]),t._v(" 语句块内，首先通过 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数获取标签的 "),a("code",[t._v("name")]),t._v(" 属性值，并将获取到的值赋值给元素描述对象的 "),a("code",[t._v("el.slotName")]),t._v(" 属性。举个例子，如果我们的 "),a("code",[t._v("<slot>")]),t._v(" 标签如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("slot")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("header"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("slot")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("则 "),s("code",[this._v("el.slotName")]),this._v(" 属性的值为 "),s("code",[this._v("JSON.stringify('header')")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果我们的 "),s("code",[this._v("<slot>")]),this._v(" 标签如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token punctuation"}},[this._v("<")]),this._v("slot")]),s("span",{attrs:{class:"token punctuation"}},[this._v(">")])]),s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token punctuation"}},[this._v("</")]),this._v("slot")]),s("span",{attrs:{class:"token punctuation"}},[this._v(">")])]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("则 "),s("code",[this._v("el.slotName")]),this._v(" 属性的值为 "),s("code",[this._v("undefined")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\`key\\` does not work on <slot> because slots are abstract outlets `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`and can possibly expand into multiple elements. `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Use the key on a wrapping element instead.`")])]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在非生产环境下，如果发现在 "),a("code",[t._v("<slot>")]),t._v(" 标签中使用 "),a("code",[t._v("key")]),t._v(" 属性，则会打印警告信息，提示开发者 "),a("code",[t._v("key")]),t._v(" 属性不能使用在 "),a("code",[t._v("slot")]),t._v(" 标签上，另外大家应该还记得，在前面的分析中我们也知道 "),a("code",[t._v("key")]),t._v(" 属性同样不能使用在 "),a("code",[t._v("<template>")]),t._v(" 标签上。大家可以发现 "),a("code",[t._v("<slot>")]),t._v(" 标签和 "),a("code",[t._v("<template>")]),t._v(" 标签的共同点就是他们都是抽象组件，抽象组件的特点是要么不渲染真实DOM，要么会被不可预知的DOM元素替代。这就是在这些标签上不能使用 "),a("code",[t._v("key")]),t._v(" 属性的原因。对于 "),a("code",[t._v("<slot>")]),t._v(" 标签的处理就是如上这些内容，接着我们再来看 "),a("code",[t._v("processSlot")]),t._v(" 函数内 "),a("code",[t._v("else")]),t._v(" 分支的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processSlot")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'slot'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" slotScope")]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'template'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      slotScope "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'scope'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" slotScope"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`the "scope" attribute for scoped slots have been deprecated and `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`replaced by "slot-scope" since 2.5. The new "slot-scope" attribute `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`can also be used on plain elements in addition to <template> to `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`denote scoped slots.`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("          "),a("span",{attrs:{class:"token boolean"}},[t._v("true")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotScope "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" slotScope "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'slot-scope'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slotScope "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'slot-scope'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果代码走到了 "),a("code",[t._v("else")]),t._v(" 分支，则说明当前解析的标签不是 "),a("code",[t._v("<slot>")]),t._v(" 标签。如上高亮的代码所示，首先定义了 "),a("code",[t._v("slotScope")]),t._v(" 变量，接着是一段 "),a("code",[t._v("if")]),t._v(" 条件语句块，该 "),a("code",[t._v("if")]),t._v(" 条件判断了当前解析的标签是否是 "),a("code",[t._v("<template>")]),t._v(" 标签，如果是则通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数获取标签 "),a("code",[t._v("scope")]),t._v(" 属性的值，并将获取到的值赋值给 "),a("code",[t._v("slotScope")]),t._v(" 变量。接着我们再来看 "),a("code",[t._v("if")]),t._v(" 条件语句块的最后一句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotScope "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" slotScope "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'slot-scope'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这句代码在元素描述对象上添加了 "),a("code",[t._v("el.slotScope")]),t._v(" 属性，如果 "),a("code",[t._v("slotScope")]),t._v(" 变量的值存在，则使用 "),a("code",[t._v("slotScope")]),t._v(" 变量的值，否则通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数获取当前标签 "),a("code",[t._v("slot-scope")]),t._v(" 属性的值作为 "),a("code",[t._v("el.slotScope")]),t._v(" 属性的值。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过以上逻辑，我们能够发现，如果一个标签是 "),a("code",[t._v("<template>")]),t._v(" 标签，则会为该标签的元素描述对象添加 "),a("code",[t._v("el.slotScope")]),t._v(" 属性，并且该属性的值取自标签的 "),a("code",[t._v("scope")]),t._v(" 属性，但是如果该 "),a("code",[t._v("<template>")]),t._v(" 标签没有使用 "),a("code",[t._v("scope")]),t._v(" 属性则会导致取不到值，此时会尝试获取标签 "),a("code",[t._v("slot-scope")]),t._v(" 属性的值作为 "),a("code",[t._v("el.slotScope")]),t._v(" 的值。另外大家注意如上代码中，无论是获取 "),a("code",[t._v("scope")]),t._v(" 属性的值还是获取 "),a("code",[t._v("slot-scope")]),t._v(" 属性的值，都是通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数完成的，这意味着 "),a("code",[t._v("scope")]),t._v(" 属性和 "),a("code",[t._v("slot-scope")]),t._v(" 属性是不能写成绑定的属性的，如下是错误的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":slot-scope")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("slotProps"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外我们注意到，在 "),s("code",[this._v("if")]),this._v(" 语句块内存在如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("slotScope "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'scope'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" slotScope"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`the "scope" attribute for scoped slots have been deprecated and `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`replaced by "slot-scope" since 2.5. The new "slot-scope" attribute `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`can also be used on plain elements in addition to <template> to `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`denote scoped slots.`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在非生产环境下，如果 "),a("code",[t._v("slotScope")]),t._v(" 变量存在，则说明 "),a("code",[t._v("<template>")]),t._v(" 标签中使用了 "),a("code",[t._v("scope")]),t._v(" 属性，但是这个属性已经在 "),a("code",[t._v("2.5.0+")]),t._v(" 的版本中被 "),a("code",[t._v("slot-scope")]),t._v(" 属性替代了，所以现在更推荐使用 "),a("code",[t._v("slot-scope")]),t._v(" 属性，好处是 "),a("code",[t._v("slot-scope")]),t._v(" 属性不受限于 "),a("code",[t._v("<template>")]),t._v(" 标签。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processSlot")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'slot'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" slotScope\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'template'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slotScope "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'slot-scope'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Ambiguous combined usage of slot-scope and v-for on <")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("> `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(v-for takes higher priority). Use a wrapper <template> for the `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`scoped slot to make it clearer.`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("          "),a("span",{attrs:{class:"token boolean"}},[t._v("true")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotScope "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" slotScope")]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，这是一个 "),a("code",[t._v("elseif")]),t._v(" 条件语句块，该语句块的内容基本与 "),a("code",[t._v("if")]),t._v(" 语句块内的代码相同，区别就在于此时不需要去尝试获取标签的 "),a("code",[t._v("scope")]),t._v(" 属性值了，而是直接获取 "),a("code",[t._v("slot-scope")]),t._v(" 属性的值，并将值赋值给 "),a("code",[t._v("slotScope")]),t._v(" 变量，如果成功取到值，则 "),a("code",[t._v("elseif")]),t._v(" 语句内的代码将被执行，注意该语句块的最后一句代码，直接将 "),a("code",[t._v("slotScope")]),t._v(" 变量的值赋值给元素描述对象的 "),a("code",[t._v("el.slotScope")]),t._v(" 属性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外我们发现 "),s("code",[this._v("elseif")]),this._v(" 语句块内同样存在一个 "),s("code",[this._v("if")]),this._v(" 判断语句：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Ambiguous combined usage of slot-scope and v-for on <")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("> `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(v-for takes higher priority). Use a wrapper <template> for the `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`scoped slot to make it clearer.`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在非生产环境下，会检查当前元素是否使用了 "),s("code",[this._v("v-for")]),this._v(" 属性，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("slot-scope")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("slotProps"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item of slotProps.list"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上这句代码中，"),a("code",[t._v("slot-scope")]),t._v(" 属性与 "),a("code",[t._v("v-for")]),t._v(" 指令共存，这会造成什么影响呢？由于 "),a("code",[t._v("v-for")]),t._v(" 具有更高的优先级，所以 "),a("code",[t._v("v-for")]),t._v(" 绑定的状态将会是父组件作用域的状态，而不是子组件通过作用域插槽传递的状态。并且这么使用很容易让人感到困惑。更好的方式是像如下代码这样：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("slot-scope")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("slotProps"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item of slotProps.list"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这样就不会有任何歧义，"),s("code",[this._v("v-for")]),this._v(" 指令绑定的状态就是作用域插槽传递的状态。而上面代码的警告信息，大概就是这个意思。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("到目前为止，我们发现无论是 "),s("code",[this._v("<template>")]),this._v(" 标签，还是其他元素标签，只要该标签使用了 "),s("code",[this._v("slot-scope")]),this._v(" 属性，则该标签的元素描述对象将被添加 "),s("code",[this._v("el.slotScope")]),this._v(" 属性。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processSlot")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'slot'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" slotTarget "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'slot'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slotTarget"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotTarget "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" slotTarget "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\"\"'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\"default\"'")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" slotTarget")]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token comment"}},[t._v("// preserve slot as an attribute for native shadow DOM compat")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token comment"}},[t._v("// only for non-scoped slots.")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'template'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotScope"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        "),a("span",{attrs:{class:"token function"}},[t._v("addAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'slot'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" slotTarget"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上这段代码是 "),a("code",[t._v("processSlot")]),t._v(" 函数的最后一段代码，这段代码主要用来处理标签的 "),a("code",[t._v("slot")]),t._v(" 属性，首先使用 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数获取元素 "),a("code",[t._v("slot")]),t._v(" 属性的值，并将获取到的值赋值给 "),a("code",[t._v("slotTarget")]),t._v(" 常量，注意这里使用的是 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数，这意味着 "),a("code",[t._v("slot")]),t._v(" 属性是可以绑定的。接着进入一个 "),a("code",[t._v("if")]),t._v(" 条件语句的判断，如果 "),a("code",[t._v("slotTarget")]),t._v(" 存在，则会执行如下这句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotTarget "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" slotTarget "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\"\"'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\"default\"'")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" slotTarget\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这句代码检测了 "),a("code",[t._v("slotTarget")]),t._v(" 变量是否为字符串 "),a("code",[t._v("'\"\"'")]),t._v("，这种情况出现在标签虽然使用了 "),a("code",[t._v("slot")]),t._v(" 属性，但却没有为 "),a("code",[t._v("slot")]),t._v(" 属性指定相应的值，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("slot")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这时通过 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数获取 "),a("code",[t._v("slot")]),t._v(" 属性的值时，会得到字符串 "),a("code",[t._v('""')]),t._v("，此时会将 "),a("code",[t._v("el.slotTarget")]),t._v(" 属性的值设置为字符串 "),a("code",[t._v("'\"default\"'")]),t._v("，否则直接将 "),a("code",[t._v("slotTarget")]),t._v(" 变量的值赋值给 "),a("code",[t._v("el.slotTarget")]),t._v(" 属性。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// preserve slot as an attribute for native shadow DOM compat")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// only for non-scoped slots.")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'template'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slotScope"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("addAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'slot'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" slotTarget"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("注释已经写的很清楚了，实际上这段代码的作用就是用来保存原生影子DOM("),a("code",[t._v("shadow DOM")]),t._v(")的 "),a("code",[t._v("slot")]),t._v(" 属性，当然啦既然是原生影子DOM的 "),a("code",[t._v("slot")]),t._v(" 属性，那么首先该元素必然应该是原生DOM，所以 "),a("code",[t._v("el.tag !== 'template'")]),t._v(" 必须成立，同时对于作用域插槽是不会保留原生 "),a("code",[t._v("slot")]),t._v(" 属性的。关于原生影子DOM的 "),a("code",[t._v("slot")]),t._v(" 属性，更详细的内容大家可以阅读 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Element/slot",target:"_blank",rel:"noopener noreferrer"}},[t._v("Element.slot")]),t._v("。你会发现 "),a("code",[t._v("Vue")]),t._v(" 的实现是在一定程度上参考了标准的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("回到如上代码，保留原生 "),s("code",[this._v("slot")]),this._v(" 属性的方式，就是调用 "),s("code",[this._v("addAttr")]),this._v(" 函数，我们知道该函数会将属性的名字和值以对象的形式添加到元素描述对象的 "),s("code",[this._v("el.attrs")]),this._v(" 数组中。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、对于 "),a("code",[t._v("<slot>")]),t._v(" 标签，会为其元素描述对象添加 "),a("code",[t._v("el.slotName")]),t._v(" 属性，属性值为该标签 "),a("code",[t._v("name")]),t._v(" 属性的值，并且 "),a("code",[t._v("name")]),t._v(" 属性可以是绑定的。")]),a("li",[t._v("2、对于 "),a("code",[t._v("<template>")]),t._v(" 标签，会优先获取并使用该标签 "),a("code",[t._v("scope")]),t._v(" 属性的值，如果获取不到则会获取 "),a("code",[t._v("slot-scope")]),t._v(" 属性的值，并将获取到的值赋值给元素描述对象的 "),a("code",[t._v("el.slotScope")]),t._v(" 属性，注意 "),a("code",[t._v("scope")]),t._v(" 属性和 "),a("code",[t._v("slot-scope")]),t._v(" 属性不能是绑定的。")]),a("li",[t._v("3、对于其他标签，会尝试获取 "),a("code",[t._v("slot-scope")]),t._v(" 属性的值，并将获取到的值赋值给元素描述对象的 "),a("code",[t._v("el.slotScope")]),t._v(" 属性。")]),a("li",[t._v("4、对于非 "),a("code",[t._v("<slot>")]),t._v(" 标签，会尝试获取该标签的 "),a("code",[t._v("slot")]),t._v(" 属性，并将获取到的值赋值给元素描述对象的 "),a("code",[t._v("el.slotTarget")]),t._v(" 属性。如果一个标签使用了 "),a("code",[t._v("slot")]),t._v(" 属性但却没有给定相应的值，则该标签元素描述对象的 "),a("code",[t._v("el.slotTarget")]),t._v(" 属性值为字符串 "),a("code",[t._v("'\"default\"'")]),t._v("。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"处理使用了is或inline-template属性的元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理使用了is或inline-template属性的元素","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理使用了is或inline-template属性的元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下，我们将来到 "),s("code",[this._v("processComponent")]),this._v(" 函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processKey")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// determine whether this is a plain element after")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// removing structural attributes")]),t._v("\n  element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRef")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processSlot")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processComponent")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("processComponent")]),this._v(" 函数的源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processComponent")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" binding\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'is'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("component "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" binding\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'inline-template'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inlineTemplate "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们知道 "),a("code",[t._v("Vue")]),t._v(" 内置了 "),a("code",[t._v("component")]),t._v(" 组件，并且该组件接收两个 "),a("code",[t._v("prop")]),t._v(" 分别是："),a("code",[t._v("is")]),t._v(" 和 "),a("code",[t._v("inline-template")]),t._v("。而 "),a("code",[t._v("processComponent")]),t._v(" 函数就是用来处理 "),a("code",[t._v("is")]),t._v(" 属性和 "),a("code",[t._v("inline-template")]),t._v(" 属性的。在 "),a("code",[t._v("processComponent")]),t._v(" 函数内部，首先执行的是如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" binding\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'is'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("component "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" binding\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("定义了 "),a("code",[t._v("binding")]),t._v(" 变量，它的值是通过 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数获取元素的 "),a("code",[t._v("is")]),t._v(" 属性值得到的，如果获取成功，则会将取到的值赋值给元素描述对象的 "),a("code",[t._v("el.component")]),t._v(" 属性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("例子一：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("is")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上例中的 "),s("code",[this._v("is")]),this._v(" 属性是非绑定的，并且没有任何值，则最终如上标签经过处理后其元素描述对象的 "),s("code",[this._v("el.component")]),this._v(" 属性值为空字符串：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("el"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("component "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token string"}},[this._v("''")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("例子二：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("is")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("child"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上例中的 "),s("code",[this._v("is")]),this._v(" 属性是非绑定的，但是有一个字符串值，则最终如上标签经过处理后其元素描述对象的 "),s("code",[this._v("el.component")]),this._v(" 属性值为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("component "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'child'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("例子三：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":is")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("child"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上例中的 "),s("code",[this._v("is")]),this._v(" 属性是绑定的，并且有一个字符串值，则最终如上标签经过处理后其元素描述对象的 "),s("code",[this._v("el.component")]),this._v(" 属性值为：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("el"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("component "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token string"}},[this._v("'child'")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着我们再来看 "),s("code",[this._v("processComponent")]),this._v(" 函数中如下的这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'inline-template'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inlineTemplate "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码是用来处理 "),a("code",[t._v("inline-template")]),t._v(" 属性的，首先通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 属性获取 "),a("code",[t._v("inline-template")]),t._v(" 属性的值，如果获取成功，则将元素描述对象的 "),a("code",[t._v("el.inlineTemplate")]),t._v(" 属性设置为 "),a("code",[t._v("true")]),t._v("，代表着该标签使用了 "),a("code",[t._v("inline-template")]),t._v(" 属性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是 "),s("code",[this._v("processComponent")]),this._v(" 函数所做的事情。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"前置处理、中置处理、后置处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前置处理、中置处理、后置处理","aria-hidden":"true"}},[this._v("#")]),this._v(" 前置处理、中置处理、后置处理")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们回到 "),s("code",[this._v("processElement")]),this._v(" 函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processKey")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// determine whether this is a plain element after")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// removing structural attributes")]),t._v("\n  element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRef")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processSlot")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processComponent")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element")]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，这段代码是一段 "),a("code",[t._v("for")]),t._v(" 循环，用来遍历 "),a("code",[t._v("transforms")]),t._v(" 数组，我们前面曾经遇到过对于 "),a("code",[t._v("preTransforms")]),t._v(" 数组的遍历，我们当时说这是在应用“前置处理”，而 "),a("code",[t._v("transforms")]),t._v(" 则可以称为“中置处理”，实际上还有“后置处理”，“后置处理”的代码存在于 "),a("code",[t._v("closeElement")]),t._v(" 函数中，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("closeElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// check pre state")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inVPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("platformIsPreTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// apply post-transforms")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" postTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    postTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，"),a("code",[t._v("closeElement")]),t._v(" 函数内部使用一个 "),a("code",[t._v("for")]),t._v(" 循环遍历了 "),a("code",[t._v("postTransforms")]),t._v(" 数组，这实际上就是在应用“后置处理”，为什么说这是“后置处理”呢？那是因为只有当遇到二元标签的结束标签或一元标签时才会调用 "),a("code",[t._v("closeElement")]),t._v(" 函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("由于这套文章只关注 "),s("code",[this._v("web")]),this._v(" 平台，所以后面会详细讲解 "),s("code",[this._v("web")]),this._v(" 平台下都应用了哪些前置处理，中置处理和后置处理，以及处理的目的。")])}],!1,null,null,null);s.default=e.exports}}]);
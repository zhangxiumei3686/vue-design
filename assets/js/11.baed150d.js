(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{74:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),a("p",[t._v("那么这句代码等价于：")]),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),t._m(22),t._m(23),a("p",[t._v("如上这句代码等价于：")]),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),t._m(34),t._m(35),t._m(36),t._m(37),t._m(38),t._m(39),t._m(40),t._m(41),t._m(42),t._m(43),t._m(44),t._m(45),t._m(46),t._m(47),t._m(48),t._m(49),t._m(50),t._m(51),t._m(52),t._m(53),t._m(54),t._m(55),t._m(56),t._m(57),t._m(58),t._m(59),a("p",[t._v("再回到如下这段代码，注意高亮的代码所示：")]),t._m(60),t._m(61),t._m(62),t._m(63),t._m(64),t._m(65),t._m(66),t._m(67),t._m(68),t._m(69),t._m(70),t._m(71),t._m(72),t._m(73),t._m(74),t._m(75),t._m(76),t._m(77),t._m(78),t._m(79),t._m(80),t._m(81),t._m(82),t._m(83),t._m(84),t._m(85),t._m(86),a("p",[t._v("有的同学可能会说，我直接写成驼峰不就可以了吗：")]),t._m(87),t._m(88),t._m(89),a("p",[t._v("最终渲染的真实DOM将是：")]),t._m(90),t._m(91),t._m(92),t._m(93),t._m(94),t._m(95),t._m(96),t._m(97),t._m(98),t._m(99),t._m(100),a("p",[t._v("这句代码等价于：")]),t._m(101),t._m(102),t._m(103),t._m(104),t._m(105),t._m(106),a("p",[t._v("通过如下代码我们就能够知道事件名称的构成：")]),t._m(107),t._m(108),t._m(109),t._m(110),a("p",[t._v("以上我们讲完了对于三个绑定属性可以使用的修饰符，接下来我们来看处理绑定属性的最后一段代码：")]),t._m(111),t._m(112),t._m(113),t._m(114),t._m(115),a("p",[t._v("首先 "),a("code",[t._v("el.component")]),t._v(" 必须为假，这个条件能够保证什么呢？我们知道 "),a("code",[t._v("el.component")]),t._v(" 属性保存的是标签 "),a("code",[t._v("is")]),t._v(" 属性的值，如果 "),a("code",[t._v("el.component")]),t._v(" 属性为假就能够保证标签没有使用 "),a("code",[t._v("is")]),t._v(" 属性。那么为什么需要这个保证呢？这是因为后边的 "),a("router-link",{attrs:{to:"../appendix/web-util.html#mustuseprop"}},[t._v("platformMustUseProp")]),t._v(" 函数，该函数的讲解可以在附录中查看，总结如下：")],1),t._m(116),t._m(117),t._m(118),t._m(119),t._m(120),t._m(121),t._m(122),t._m(123),t._m(124),t._m(125),t._m(126),t._m(127),t._m(128),t._m(129),t._m(130),t._m(131),t._m(132),a("p",[t._v("再往下是这样一段代码：")]),t._m(133),t._m(134),t._m(135),t._m(136),t._m(137),t._m(138),a("p",[t._v("等价于：")]),t._m(139),a("p",[t._v("再往下是如下这段代码：")]),t._m(140),t._m(141),t._m(142),t._m(143),t._m(144),t._m(145),t._m(146),t._m(147),t._m(148),t._m(149),a("p",[t._v("再往下是这样一段代码：")]),t._m(150),t._m(151),t._m(152),t._m(153),t._m(154),t._m(155),t._m(156),t._m(157),t._m(158),t._m(159),t._m(160),t._m(161),a("p",[t._v("现在我们来修改一下之前的模板，如下：")]),t._m(162),t._m(163),t._m(164),t._m(165),t._m(166),t._m(167),t._m(168),a("p",[t._v("这还没完，我们再次尝试修改我们的模板：")]),t._m(169),t._m(170),t._m(171),t._m(172),t._m(173),t._m(174),t._m(175),t._m(176),t._m(177),t._m(178),t._m(179),t._m(180),t._m(181),t._m(182),t._m(183),t._m(184),t._m(185),t._m(186),t._m(187),t._m(188),t._m(189),t._m(190),t._m(191),t._m(192),t._m(193),t._m(194),t._m(195),t._m(196),t._m(197),a("p",[t._v("再往下，将执行如下这句代码：")]),t._m(198),t._m(199),t._m(200),t._m(201),t._m(202),t._m(203),t._m(204),t._m(205),t._m(206),t._m(207),t._m(208),t._m(209),t._m(210),t._m(211),t._m(212),t._m(213),t._m(214),t._m(215),t._m(216),t._m(217),t._m(218),t._m(219),t._m(220),t._m(221),t._m(222),t._m(223),t._m(224),t._m(225),t._m(226),t._m(227),t._m(228),t._m(229),t._m(230),t._m(231),t._m(232),t._m(233),t._m(234),t._m(235),t._m(236),t._m(237),t._m(238),t._m(239),a("p",[t._v("其中字符串 "),a("code",[t._v('"'+t._s(t.isTrue?"a":"b")+'"')]),t._v(" 就称为字面量表达式，此时就会使用 "),a("code",[t._v("parseText")]),t._v(" 函数来解析这段字符串。至于 "),a("code",[t._v("parseText")]),t._v(" 函数是如何对这段字符串进行解析的，我们会在后面讲解处理文本节点时再来详细说明。这里大家只需要知道，如果使用 "),a("code",[t._v("parseText")]),t._v(" 函数能够成功解析某个非指令属性的属性值字符串，则说明该非指令属性的属性值使用了字面量表达式，就如同上面的模板中的 "),a("code",[t._v("id")]),t._v(" 属性一样。此时将会打印警告信息，提示开发者使用绑定属性作为替代，如下：")]),t._m(240),t._m(241),t._m(242),t._m(243),t._m(244),t._m(245),a("p",[t._v("实际上元素描述对象的 "),a("code",[t._v("el.attrs")]),t._v(" 数组中所存储的任何属性都会在由虚拟DOM创建真实DOM的过程中使用 "),a("code",[t._v("setAttribute")]),t._v(" 方法将属性添加到真实DOM元素上，而在火狐浏览器中存在无法通过DOM元素的 "),a("code",[t._v("setAttribute")]),t._v(" 方法为 "),a("code",[t._v("video")]),t._v(" 标签添加 "),a("code",[t._v("muted")]),t._v(" 属性的问题，所以如上代码就是为了解决该问题的，其方案是如果一个属性的名字是 "),a("code",[t._v("muted")]),t._v(" 并且该标签满足 "),a("router-link",{attrs:{to:"../appendix/web-util.html#mustuseprop"}},[t._v("platformMustUseProp")]),t._v(" 函数("),a("code",[t._v("video")]),t._v(" 标签满足)，则会额外调用 "),a("code",[t._v("addProp")]),t._v(" 函数将属性添加到元素描述对象的 "),a("code",[t._v("el.props")]),t._v(" 数组中。为什么这么做呢？这是因为元素描述对象的 "),a("code",[t._v("el.props")]),t._v(" 数组中所存储的任何属性都会在由虚拟DOM创建真实DOM的过程中直接使用真实DOM对象添加，也就是说对于 "),a("code",[t._v("<video>")]),t._v(" 标签的 "),a("code",[t._v("muted")]),t._v(" 属性的添加方式为："),a("code",[t._v("videoEl.muted = true")]),t._v("。另外如上代码的注释中已经提供了相应的 "),a("code",[t._v("issue")]),t._v(" 号："),a("code",[t._v("#6887")]),t._v("，感兴趣的同学可以去看一下。")],1),t._m(246),t._m(247),t._m(248),t._m(249),t._m(250),t._m(251),t._m(252),t._m(253),a("p",[t._v("我来说一说编译器选项中的 "),a("code",[t._v("modules")]),t._v("，在 "),a("router-link",{attrs:{to:"./art/80vue-compiler-start.html#理解编译器代码的组织方式"}},[t._v("理解编译器代码的组织方式")]),t._v(" 一节中我们知道编译器的选项来自于两部分，一部分是创建编译器时传递的基本选项("),a("code",[t._v("baseOptions")]),t._v(")，另一部分则是在使用编辑器编译模板时传递的选项参数。如下是创建编译器时的基本选项：")],1),t._m(254),a("p",[t._v("如上代码来自 "),a("code",[t._v("src/platforms/web/compiler/index.js")]),t._v(" 文件，可以看到 "),a("code",[t._v("baseOptions")]),t._v(" 导入自 "),a("code",[t._v("src/platforms/web/compiler/options.js")]),t._v(" 文件，对于基本选项的解析我们在 "),a("router-link",{attrs:{to:"./art/80vue-compiler-start.html#compile-的作用"}},[t._v("compile 的作用")]),t._v(" 一节中做了详细的讲解，并且整理了 "),a("router-link",{attrs:{to:"../appendix/compiler-options.html"}},[t._v("附录/编译器选项")]),t._v("，如果大家忘记了可以回头查看。")],1),t._m(255),t._m(256),t._m(257),t._m(258),t._m(259),t._m(260),t._m(261),t._m(262),t._m(263),t._m(264),t._m(265),t._m(266),t._m(267),t._m(268),t._m(269),t._m(270),t._m(271),t._m(272),t._m(273),t._m(274),t._m(275),t._m(276),t._m(277),t._m(278),t._m(279),t._m(280),t._m(281),t._m(282),a("p",[t._v("如上这句代码相当于：")]),t._m(283),t._m(284),t._m(285),t._m(286),t._m(287),t._m(288),t._m(289),t._m(290),t._m(291),t._m(292),a("p",[t._v("接下来我们看一下具体实现，首先是如下这段代码：")]),t._m(293),t._m(294),a("p",[t._v("假设有我们如下模板：")]),t._m(295),t._m(296),t._m(297),t._m(298),t._m(299),a("p",[t._v("再往下是如下这段代码：")]),t._m(300),t._m(301),t._m(302),t._m(303),t._m(304),t._m(305),t._m(306),t._m(307),t._m(308),t._m(309),t._m(310),t._m(311),t._m(312),t._m(313),a("p",[t._v("我们接着看代码，如下高亮代码所示：")]),t._m(314),t._m(315),t._m(316),t._m(317),t._m(318),a("p",[t._v("这么做就等价于把新克隆出来的标签视作：")]),t._m(319),t._m(320),a("p",[t._v("继续往下看代码，如下高亮代码所示：")]),t._m(321),t._m(322),t._m(323),t._m(324),a("p",[t._v("对于第一个克隆的元素描述对象来说，最后执行的将是如下高亮的代码：")]),t._m(325),t._m(326),t._m(327),a("p",[t._v("假设我们有如下模板：")]),t._m(328),t._m(329),t._m(330),t._m(331),a("p",[t._v("至此，对于第一个扩展出来的复选按钮就算告一段落了，我们接着看后面的代码，如下：")]),t._m(332),t._m(333),t._m(334),t._m(335),a("p",[t._v("再往下执行的是如下这段代码：")]),t._m(336),t._m(337),t._m(338),t._m(339),t._m(340),t._m(341),t._m(342),t._m(343),t._m(344),t._m(345),t._m(346),t._m(347),t._m(348),t._m(349),t._m(350),t._m(351),t._m(352),t._m(353),t._m(354),t._m(355),t._m(356),a("p",[t._v("再往下是这样一段代码：")]),t._m(357),t._m(358),t._m(359),t._m(360),t._m(361),t._m(362),t._m(363),t._m(364),t._m(365),t._m(366),t._m(367),t._m(368),t._m(369),t._m(370),t._m(371),t._m(372),t._m(373),t._m(374),t._m(375),t._m(376),t._m(377),t._m(378),t._m(379),t._m(380),t._m(381),t._m(382),t._m(383),t._m(384),t._m(385),t._m(386),t._m(387),t._m(388),t._m(389),t._m(390),t._m(391),t._m(392),t._m(393),t._m(394),t._m(395),t._m(396),t._m(397),t._m(398),t._m(399),t._m(400),t._m(401),t._m(402),t._m(403),t._m(404),t._m(405),t._m(406),t._m(407),t._m(408),t._m(409),t._m(410),t._m(411),t._m(412),t._m(413),t._m(414),t._m(415),t._m(416),t._m(417),t._m(418),t._m(419),t._m(420),t._m(421),t._m(422),t._m(423),t._m(424),t._m(425),t._m(426),t._m(427),t._m(428),a("p",[t._v("在 IE 浏览器中将得到如下字符串：")]),t._m(429),t._m(430),t._m(431),t._m(432),a("p",[t._v("再往下是这样一段代码：")]),t._m(433),t._m(434),t._m(435),t._m(436),t._m(437),t._m(438),a("p",[t._v("我们再回头来看一下这段代码：")]),t._m(439),t._m(440),a("p",[t._v("我们再来看如下高亮代码：")]),t._m(441),t._m(442),t._m(443),t._m(444),t._m(445),t._m(446),t._m(447),t._m(448),a("p",[t._v("我们来做一下总结：")]),t._m(449),t._m(450),t._m(451),t._m(452),t._m(453),t._m(454),t._m(455),t._m(456),t._m(457),t._m(458),t._m(459),a("p",[t._v("如上模板中存在一个文本节点，该节点的文本内容是字符串："),a("code",[t._v("'我的名字是："+t._s(t.name)+"'")]),t._v("，这个字符串并不是普通的字符串，它包含了 "),a("code",[t._v("Vue")]),t._v(" 语法中的字面量表达式，而 "),a("code",[t._v("parseText")]),t._v(" 函数的作用就是用来解析这段包含了字面量表达式的文本的，如果解析成功则说明该文本节点的内容确实包含字面量表达式，所以此时会执行以下代码创建一个类型为2("),a("code",[t._v("type = 2")]),t._v(")的元素描述对象：")]),t._m(460),t._m(461),t._m(462),t._m(463),t._m(464),t._m(465),t._m(466),t._m(467),t._m(468),a("p",[t._v("实际上以上分析并不足以让大家理解这么做的目的，但是我们综合思考就会容易得出如下结论：")]),t._m(469),t._m(470),t._m(471),t._m(472),t._m(473),t._m(474),t._m(475),t._m(476),t._m(477),t._m(478),t._m(479),t._m(480),t._m(481),t._m(482),t._m(483),t._m(484),t._m(485),t._m(486),t._m(487),t._m(488),t._m(489),t._m(490),t._m(491),a("p",[t._v("等价于：")]),t._m(492),a("p",[t._v("也就等价于：")]),t._m(493),t._m(494),t._m(495),t._m(496),t._m(497),t._m(498),t._m(499),t._m(500),t._m(501),t._m(502),a("p",[t._v("这里使用 "),a("code",[t._v("tagRE")]),t._v(" 正则匹配文本内容，并将匹配结果保存在 "),a("code",[t._v("match")]),t._v(" 变量中，直到匹配失败循环才会终止，这时意味着所有的字面量表达式都已经处理完毕了。那么匹配结果 "),a("code",[t._v("match")]),t._v(" 变量中保存着什么值呢？如果匹配成功则 "),a("code",[t._v("match")]),t._v(" 变量将会是一个数组，该数组的第一个元素为整个匹配的字符串，第二个元素是正则 "),a("code",[t._v("tagRE")]),t._v(" 捕获组所匹配的内容，假设我们的文本为 "),a("code",[t._v("'"+t._s(t.name)+"'")]),t._v("，则匹配成功后 "),a("code",[t._v("match")]),t._v(" 数组的值为：")]),t._m(503),a("p",[t._v("但 "),a("code",[t._v("match")]),t._v(" 并不是一个普通的数组，它还包含 "),a("code",[t._v("match.index")]),t._v(" 属性，该属性的值代表着匹配的字符串在整个字符串中的位置，假设我们有这样一段文本："),a("code",[t._v("'abc"+t._s(t.name)+"'")]),t._v("，则匹配成功后 "),a("code",[t._v("match.index")]),t._v(" 的值为 "),a("code",[t._v("3")]),t._v("，因为第一个做花括号("),a("code",[t._v("{")]),t._v(")在整个字符串中的索引是 "),a("code",[t._v("3")]),t._v("。明白了这些我们就可以继续看 "),a("code",[t._v("while")]),t._v(" 循环内的代码了，在 "),a("code",[t._v("while")]),t._v(" 循环内的开头是如下这段代码：")]),t._m(504),a("p",[t._v("这段代码首先使用 "),a("code",[t._v("index")]),t._v(" 变量保存了 "),a("code",[t._v("match.index")]),t._v(" 属性的值，接着是一个 "),a("code",[t._v("if")]),t._v(" 条件语句，它判断了变量 "),a("code",[t._v("index")]),t._v(" 的值是否大于 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值，大家思考一下什么情况下会出现变量 "),a("code",[t._v("index")]),t._v(" 的值大于 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值的情况？我们知道 "),a("code",[t._v("lastIndex")]),t._v(" 变量的初始值是 "),a("code",[t._v("0")]),t._v("，所以只要 "),a("code",[t._v("index")]),t._v(" 变量大于 "),a("code",[t._v("0")]),t._v(" 即可，换句话说只要 "),a("code",[t._v("match.index")]),t._v(" 变量的值大于 "),a("code",[t._v("0")]),t._v(" 即可，我们还是以这段文本为例："),a("code",[t._v("'abc"+t._s(t.name)+"'")]),t._v("，我们知道当匹配这段文本时，"),a("code",[t._v("match.index")]),t._v(" 的值将会为 "),a("code",[t._v("3")]),t._v("，它大于 "),a("code",[t._v("0")]),t._v("，所以此时如上 "),a("code",[t._v("if")]),t._v(" 条件语句的判断条件满足，此时将会执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，在 "),a("code",[t._v("if")]),t._v(" 语句块内有这样一句话，如下：")]),t._m(505),a("p",[t._v("如上这句代码中有这样一句代码：")]),t._m(506),t._m(507),t._m(508),t._m(509),t._m(510),t._m(511),t._m(512),t._m(513),t._m(514),a("p",[t._v("如上高亮代码所示，这段代码首先使用 "),a("code",[t._v("parseFilters")]),t._v(" 函数对匹配结果的捕获内容进行解析，假设文本内容为 "),a("code",[t._v("'abc"+t._s(t._f("someFilter")(t.name))+"'")]),t._v("，则 "),a("code",[t._v("match[1]")]),t._v(" 的值为字符串 "),a("code",[t._v("'name'")]),t._v("，所以如上高亮的这句代码相当于：")]),t._m(515),t._m(516),t._m(517),a("p",[t._v("这两句代码分别向 "),a("code",[t._v("tokens")]),t._v(" 数组和 "),a("code",[t._v("rawTokens")]),t._v(" 数组中添加了新的元素，假设我们的文本内容为 "),a("code",[t._v("'abc"+t._s(t._f("someFilter")(t.name))+"'")]),t._v("，则此时 "),a("code",[t._v("tokens")]),t._v(" 数组和 "),a("code",[t._v("rawTokens")]),t._v(" 数组的值已经为：")]),t._m(518),t._m(519),t._m(520),a("p",[t._v("这句代码使用的作用是更新 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值，可以看到 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值等于 "),a("code",[t._v("index")]),t._v(" 变量的值加上匹配的字符串的长度，我们以字符串 "),a("code",[t._v("'abc"+t._s(t.name)+"def'")]),t._v(" 为例，此时 "),a("code",[t._v("lastIndex")]),t._v(" 变量的初始值为 "),a("code",[t._v("0")]),t._v("；"),a("code",[t._v("index")]),t._v(" 变量的值为 "),a("code",[t._v("3")]),t._v("，指向第一左花括号("),a("code",[t._v("{")]),t._v(")；"),a("code",[t._v("match[0].length")]),t._v(" 的值为匹配的字符串 "),a("code",[t._v("'"+t._s(t.name)+"'")]),t._v(" 的长度，所以 "),a("code",[t._v("match[0].length")]),t._v(" 的值为 "),a("code",[t._v("8")]),t._v("，最终：")]),t._m(521),t._m(522),t._m(523),t._m(524),a("p",[t._v("这是一段 "),a("code",[t._v("if")]),t._v(" 条件语句，其对比了 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值和原始文本长度("),a("code",[t._v("text.length")]),t._v(")的大小，当 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值小于原始文本长度时该 "),a("code",[t._v("if")]),t._v(" 条件语句内的代码将被执行。那么什么情况下 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值小于原始文本长度呢？我们知道每当 "),a("code",[t._v("while")]),t._v(" 循环结束之前都会更新 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值并开始下一次循环，我们假设原始文本为 "),a("code",[t._v("'abc"+t._s(t.name)+"def'")]),t._v("，当第一次 "),a("code",[t._v("while")]),t._v(" 循环结束之前会更新 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值，使其指向字符 "),a("code",[t._v("'d'")]),t._v("，所以此时 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值为 "),a("code",[t._v("11")]),t._v("。然后开始下一次 "),a("code",[t._v("while")]),t._v(" 循环，但大家不要忘了 "),a("code",[t._v("while")]),t._v(" 循环的判断条件是："),a("code",[t._v("(match = tagRE.exec(text))")]),t._v("，由于第二次 "),a("code",[t._v("while")]),t._v(" 循环将会从字符 "),a("code",[t._v("'d'")]),t._v(" 开始向后匹配，即匹配剩余的字符串 "),a("code",[t._v("'def'")]),t._v("，很明显该字符串中不在包含字面量表达式，所以 "),a("code",[t._v("while")]),t._v(" 循环的判断条件会失败，循环终止。最终 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值停留在 "),a("code",[t._v("11")]),t._v("，而整个原始字符串的长度为 "),a("code",[t._v("14")]),t._v("，此时满足 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值小于原始字符串的长度，如上 "),a("code",[t._v("if")]),t._v(" 条件语句内的代码将被执行。很明显，如上代码的目的是为了截取剩余的普通文本并将其添加到 "),a("code",[t._v("rawTokens")]),t._v(" 和 "),a("code",[t._v("tokens")]),t._v(" 数组中。当原始字符串 "),a("code",[t._v("'abc"+t._s(t.name)+"def'")]),t._v(" 被解析完毕后，"),a("code",[t._v("rawTokens")]),t._v(" 和 "),a("code",[t._v("tokens")]),t._v(" 数组的值将是：")]),t._m(525),t._m(526),t._m(527),t._m(528),t._m(529),t._m(530),t._m(531),a("p",[t._v("接下来我们讲解一下当解析器遇到结束标签的时候，都会做哪些事情，如下代码所示：")]),t._m(532),t._m(533),t._m(534),t._m(535),t._m(536),t._m(537),t._m(538),t._m(539),t._m(540),t._m(541),t._m(542),t._m(543),t._m(544),t._m(545),t._m(546),t._m(547),t._m(548),t._m(549),t._m(550)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"句法分析-生成真正的ast-二"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#句法分析-生成真正的ast-二","aria-hidden":"true"}},[this._v("#")]),this._v(" 句法分析 - 生成真正的AST(二)")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("鉴于篇幅的原因，本章将继承上一章的内容，继续讲解 "),s("code",[this._v("AST")]),this._v(" 的生成。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"彻底理解解析属性值的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#彻底理解解析属性值的方式","aria-hidden":"true"}},[this._v("#")]),this._v(" 彻底理解解析属性值的方式")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接下来我们要讲解的就是 "),a("code",[t._v("processElement")]),t._v(" 函数中调用的最后一个 "),a("code",[t._v("process*")]),t._v(" 函数，它就是 "),a("code",[t._v("processAttrs")]),t._v(" 函数，这个函数是用来处理元素描述对象的 "),a("code",[t._v("el.attrsList")]),t._v(" 数组中剩余的所有属性的。到目前为止我们已经讲解过的属性有：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("v-pre")])]),a("li",[a("code",[t._v("v-for")])]),a("li",[a("code",[t._v("v-if")]),t._v("、"),a("code",[t._v("v-else-if")]),t._v("、"),a("code",[t._v("v-else")])]),a("li",[a("code",[t._v("v-once")])]),a("li",[a("code",[t._v("key")])]),a("li",[a("code",[t._v("ref")])]),a("li",[a("code",[t._v("slot")]),t._v("、"),a("code",[t._v("slot-scope")]),t._v("、"),a("code",[t._v("scope")]),t._v("、"),a("code",[t._v("name")])]),a("li",[a("code",[t._v("is")]),t._v("、"),a("code",[t._v("inline-template")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上这些属性的解析我们已经全部讲解过了，我们能够发现一些规律，比如在获取这些属性的值的时候，要么使用 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数，要么就使用 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数，但是无论使用哪个函数，其共同的行为是："),a("strong",[t._v("在获取到特定属性值的同时，还会将该属性从 "),a("code",[t._v("el.attrsList")]),t._v(" 数组中移除")]),t._v("。所以在调用 "),a("code",[t._v("processAttrs")]),t._v(" 函数的时候，以上列出来的属性都已经从 "),a("code",[t._v("el.attrsList")]),t._v(" 数组中移除了。但是 "),a("code",[t._v("el.attrsList")]),t._v(" 数组中仍然可能存在其他属性，所以这个时候就需要使用 "),a("code",[t._v("processAttrs")]),t._v(" 函数处理 "),a("code",[t._v("el.attrsList")]),t._v(" 数组中剩余的属性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在讲解 "),s("code",[this._v("processAttrs")]),this._v(" 函数之前，我们来回顾一下现在我们掌握的知识。以如上列出的属性为例，下表中总结了特定的属性与获取该属性值的方式：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),a("th",[t._v("获取属性值的方式")])])]),a("tbody",[a("tr",[a("td",[a("code",[t._v("v-pre")])]),a("td",[a("code",[t._v("getAndRemoveAttr")])])]),a("tr",[a("td",[a("code",[t._v("v-for")])]),a("td",[a("code",[t._v("getAndRemoveAttr")])])]),a("tr",[a("td",[a("code",[t._v("v-if")]),t._v("、"),a("code",[t._v("v-else-if")]),t._v("、"),a("code",[t._v("v-else")])]),a("td",[a("code",[t._v("getAndRemoveAttr")])])]),a("tr",[a("td",[a("code",[t._v("v-once")])]),a("td",[a("code",[t._v("getAndRemoveAttr")])])]),a("tr",[a("td",[a("code",[t._v("key")])]),a("td",[a("code",[t._v("getBindingAttr")])])]),a("tr",[a("td",[a("code",[t._v("ref")])]),a("td",[a("code",[t._v("getBindingAttr")])])]),a("tr",[a("td",[a("code",[t._v("name")])]),a("td",[a("code",[t._v("getBindingAttr")])])]),a("tr",[a("td",[a("code",[t._v("slot-scope")]),t._v("、"),a("code",[t._v("scope")])]),a("td",[a("code",[t._v("getAndRemoveAttr")])])]),a("tr",[a("td",[a("code",[t._v("slot")])]),a("td",[a("code",[t._v("getBindingAttr")])])]),a("tr",[a("td",[a("code",[t._v("is")])]),a("td",[a("code",[t._v("getBindingAttr")])])]),a("tr",[a("td",[a("code",[t._v("inline-template")])]),a("td",[a("code",[t._v("getAndRemoveAttr")])])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们发现凡是以 "),a("code",[t._v("v-")]),t._v(" 开头的属性，在获取属性值的时候都是通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数获取的。而对于没有 "),a("code",[t._v("v-")]),t._v(" 开头的特性，如 "),a("code",[t._v("key")]),t._v("、"),a("code",[t._v("ref")]),t._v(" 等，在获取这些属性的值时，是通过 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数获取的，不过 "),a("code",[t._v("slot-scope")]),t._v("、"),a("code",[t._v("scope")]),t._v(" 和 "),a("code",[t._v("inline-template")]),t._v(" 这三个属性虽然没有以 "),a("code",[t._v("v-")]),t._v(" 开头，但仍然使用 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数获取其属性值。但这并不是关键，关键的是我们要知道使用 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 和 "),a("code",[t._v("getBindingAttr")]),t._v(" 这两个函数获取属性值的时候到底有什么区别。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们知道类似于 "),a("code",[t._v("v-for")]),t._v(" 或 "),a("code",[t._v("v-if")]),t._v(" 这类以 "),a("code",[t._v("v-")]),t._v(" 开头的属性，在 "),a("code",[t._v("Vue")]),t._v(" 中我们称之为指令，并且这些属性的属性值是默认情况下被当做表达式处理的，比如：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("a && b"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码在执行的时候 "),a("code",[t._v("a")]),t._v(" 和 "),a("code",[t._v("b")]),t._v(" 都会被当做变量，并且 "),a("code",[t._v("a && b")]),t._v(" 是具有完整意义的表达式，而非普通字符串。并且在解析阶段，如上 "),a("code",[t._v("div")]),t._v(" 标签的元素描述对象的 "),a("code",[t._v("el.attrsList")]),t._v(" 属性将是如下数组：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'a && b'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这时，当使用 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数获取 "),a("code",[t._v("v-if")]),t._v(" 属性值时，得到的就是字符串 "),a("code",[t._v("'a && b'")]),t._v("，但不要忘了这个字符串最终是要运行在 "),a("code",[t._v("new Function()")]),t._v(" 函数中的，假设是如下代码：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("new")]),this._v(" "),s("span",{attrs:{class:"token class-name"}},[this._v("Function")]),s("span",{attrs:{class:"token punctuation"}},[this._v("(")]),s("span",{attrs:{class:"token string"}},[this._v("'a && b'")]),s("span",{attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到，此时的 "),s("code",[this._v("a && b")]),this._v(" 已经不再是普通字符串了，而是表达式。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这就意味着 "),s("code",[this._v("slot-scope")]),this._v("、"),s("code",[this._v("scope")]),this._v(" 和 "),s("code",[this._v("inline-template")]),this._v(" 这三个属性的值，最终也将会被作为表达式处理，而非普通字符串。如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("slot-scope")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("slotProps"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上代码是使用作用域插槽的典型例子，我们知道这里的 "),s("code",[this._v("slotProps")]),this._v(" 确实是变量，而非字符串。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那如果使用 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数获取 "),a("code",[t._v("slot-scope")]),t._v(" 属性的值会产生什么效果呢？由于 "),a("code",[t._v("slot-scope")]),t._v(" 并非 "),a("code",[t._v("v-bind:slot-scope")]),t._v(" 或 "),a("code",[t._v(":slot-scope")]),t._v("，所以在使用 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数获取 "),a("code",[t._v("slot-scope")]),t._v(" 属性值的时候，将会得到使用 "),a("code",[t._v("JSON.stringify")]),t._v(" 函数处理后的结果，即：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token constant"}},[this._v("JSON")]),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),s("span",{attrs:{class:"token function"}},[this._v("stringify")]),s("span",{attrs:{class:"token punctuation"}},[this._v("(")]),s("span",{attrs:{class:"token string"}},[this._v("'slotProps'")]),s("span",{attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个值就是字符串 "),s("code",[this._v("'\"slotProps\"'")]),this._v("，我们把这个字符串拿到 "),s("code",[this._v("new Function()")]),this._v(" 中，如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("new")]),this._v(" "),s("span",{attrs:{class:"token class-name"}},[this._v("Function")]),s("span",{attrs:{class:"token punctuation"}},[this._v("(")]),s("span",{attrs:{class:"token string"}},[this._v("'\"slotProps\"'")]),s("span",{attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v('"slotProps"')]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以发现此时函数体内只有一个字符串 "),s("code",[this._v('"slotProps"')]),this._v("，而非变量。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("但并不是说使用了 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数获取的属性值最终都是字符串，如果该属性是绑定的属性(使用 "),a("code",[t._v("v-bind")]),t._v(" 或 "),a("code",[t._v(":")]),t._v(")，则该属性的值仍然具有 "),a("code",[t._v("javascript")]),t._v(" 语言的能力。否则该属性的值就是一个普通的字符串。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"processattrs-处理剩余属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#processattrs-处理剩余属性","aria-hidden":"true"}},[this._v("#")]),this._v(" processAttrs 处理剩余属性")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("processAttrs")]),t._v(" 函数是 "),a("code",[t._v("processElement")]),t._v(" 函数中调用的最后一个 "),a("code",[t._v("process*")]),t._v(" 系列函数，在这之前已经调用了很多其他的 "),a("code",[t._v("process*")]),t._v(" 系列函数对元素进行了处理，并且每当处理一个属性时，都会将该属性从元素描述对象的 "),a("code",[t._v("el.attrsList")]),t._v(" 数组中移除，但 "),a("code",[t._v("el.attrsList")]),t._v(" 数组中仍然保存着剩余未被处理的属性，而 "),a("code",[t._v("processAttrs")]),t._v(" 函数就是用来处理这些剩余属性的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("既然 "),s("code",[this._v("processAttrs")]),this._v(" 函数用来处理剩余未被处理的属性，那么我们首先要确定的是 "),s("code",[this._v("el.attrsList")]),this._v(" 数组中都包含哪些剩余的属性，如下是前面已经处理过的属性：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("v-pre")])]),a("li",[a("code",[t._v("v-for")])]),a("li",[a("code",[t._v("v-if")]),t._v("、"),a("code",[t._v("v-else-if")]),t._v("、"),a("code",[t._v("v-else")])]),a("li",[a("code",[t._v("v-once")])]),a("li",[a("code",[t._v("key")])]),a("li",[a("code",[t._v("ref")])]),a("li",[a("code",[t._v("slot")]),t._v("、"),a("code",[t._v("slot-scope")]),t._v("、"),a("code",[t._v("scope")]),t._v("、"),a("code",[t._v("name")])]),a("li",[a("code",[t._v("is")]),t._v("、"),a("code",[t._v("inline-template")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上属性中包含了部分 "),s("code",[this._v("Vue")]),this._v(" 内置的指令("),s("code",[this._v("v-")]),this._v(" 开头的属性)，大家可以对照一下 "),s("code",[this._v("Vue")]),this._v(" 的官方文档，查看其内置的指令，可以发现之前的讲解中不包含对以下指令的解析：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("v-text")]),t._v("、"),a("code",[t._v("v-html")]),t._v("、"),a("code",[t._v("v-show")]),t._v("、"),a("code",[t._v("v-on")]),t._v("、"),a("code",[t._v("v-bind")]),t._v("、"),a("code",[t._v("v-model")]),t._v("、"),a("code",[t._v("v-cloak")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("除了这些指令之外，还有部分属性的处理我们也没讲到，比如 "),a("code",[t._v("class")]),t._v(" 属性和 "),a("code",[t._v("style")]),t._v(" 属性，这两个属性比较特殊，因为 "),a("code",[t._v("Vue")]),t._v(" 对他们做了增强，实际上在“中置处理”("),a("code",[t._v("transforms")]),t._v(" 数组)中有对于 "),a("code",[t._v("class")]),t._v(" 属性和 "),a("code",[t._v("style")]),t._v(" 属性的处理，这个我们后面会统一讲解。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("还有就是一些普通属性的处理了，如下 "),s("code",[this._v("html")]),this._v(" 代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":custom-prop")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("someVal"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@custom-event")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleEvent"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("other-prop")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("static-prop"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码所示，其中 "),a("code",[t._v(":custom-prop")]),t._v(" 是自定义的绑定属性，"),a("code",[t._v("@custom-event")]),t._v(" 是自定义的事件，"),a("code",[t._v("other-prop")]),t._v(" 是自定义的非绑定的属性，对于这些内容的处理都是由 "),a("code",[t._v("processAttrs")]),t._v(" 函数完成的。其实处理自定义绑定属性本质上就是处理 "),a("code",[t._v("v-bind")]),t._v(" 指令，而处理自定义事件就是处理 "),a("code",[t._v("v-on")]),t._v(" 指令。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们具体查看一下 "),s("code",[this._v("processAttrs")]),this._v(" 函数的源码，看看它是如何处理这些剩余未被处理的指令的。如下是简化后的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processAttrs")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" list "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rawName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isProp\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到在 "),a("code",[t._v("processAttrs")]),t._v(" 函数内部，首先定义了 "),a("code",[t._v("list")]),t._v(" 常量，它是 "),a("code",[t._v("el.attrsList")]),t._v(" 数组的引用。接着又定义了一系列变量待使用，然后开启了一个 "),a("code",[t._v("for")]),t._v(" 循环，循环的目的就是遍历 "),a("code",[t._v("el.attrsList")]),t._v(" 数组，所以我们能够想到在循环内部就是逐个处理 "),a("code",[t._v("el.attrsList")]),t._v(" 数组中那些剩余的属性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("for")]),this._v(" 循环内部的代码被一个 "),s("code",[this._v("if...else")]),this._v(" 语句块分成两部分，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" rawName "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n  value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("if...else")]),t._v(" 语句块之前，分别为 "),a("code",[t._v("name")]),t._v("、"),a("code",[t._v("rawName")]),t._v(" 以及 "),a("code",[t._v("value")]),t._v(" 变量赋了值，其中 "),a("code",[t._v("name")]),t._v(" 和 "),a("code",[t._v("rawName")]),t._v(" 变量中保存的是属性的名字，而 "),a("code",[t._v("value")]),t._v(" 变量中则保存着属性的值。然后才执行了 "),a("code",[t._v("if...else")]),t._v(" 语句块，我们来看一下 "),a("code",[t._v("if")]),t._v(" 条件语句的判断条件：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("使用 "),a("code",[t._v("dirRe")]),t._v(" 正则去匹配属性名 "),a("code",[t._v("name")]),t._v("，"),a("code",[t._v("dirRE")]),t._v(" 正则我们前面讲过了，它用来匹配一个字符串是否以 "),a("code",[t._v("v-")]),t._v("、"),a("code",[t._v("@")]),t._v(" 或 "),a("code",[t._v(":")]),t._v(" 开头，所以如果匹配成功则说明该属性是指令，此时 "),a("code",[t._v("if")]),t._v(" 语句块内的代码会被执行，否则将执行 "),a("code",[t._v("else")]),t._v(" 语句块的代码。举个例子，如下 "),a("code",[t._v("html")]),t._v(" 片段所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":custom-prop")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("someVal"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@custom-event")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleEvent"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("other-prop")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("static-prop"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("其中 "),a("code",[t._v(":custom-prop")]),t._v(" 属性和 "),a("code",[t._v("@custom-event")]),t._v(" 属性将会被 "),a("code",[t._v("if")]),t._v(" 语句块内的代码处理，而对于 "),a("code",[t._v("other-prop")]),t._v(" 属性则会被 "),a("code",[t._v("else")]),t._v(" 语句块内的代码处理。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们优先看一下如果该属性是一个指令，那么在 "),s("code",[this._v("if")]),this._v(" 语句块内是如何对该指令进行处理的，如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// mark element as dynamic")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasBindings "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// modifiers")]),t._v("\n  modifiers "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseModifiers")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifierRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-bind")])]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-on")])]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// normal directives")])]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果代码执行到了这里，我们能够确认的是该属性是一个指令，如上高亮的三句代码所示，这是一个 "),a("code",[t._v("if...elseif...else")]),t._v(" 语句块，不难发现 "),a("code",[t._v("if")]),t._v(" 语句的判断条件是在检测该指令是否是 "),a("code",[t._v("v-bind")]),t._v("(包括缩写 "),a("code",[t._v(":")]),t._v(") 指令，"),a("code",[t._v("elseif")]),t._v(" 语句的判断条件是在检测该指令是否是 "),a("code",[t._v("v-on")]),t._v("(包括缩写 "),a("code",[t._v("@")]),t._v(") 指令，而对于其他指令则会执行 "),a("code",[t._v("else")]),t._v(" 语句块的代码。后面我们会对这三个分支内的代码做详细讲解，不过在这之前我们再来看一下如下高亮的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// mark element as dynamic")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasBindings "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// modifiers")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  modifiers "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseModifiers")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifierRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-bind")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-on")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// normal directives")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一个完整的指令包含指令的名称、指令的参数、指令的修饰符以及指令的值，以上高亮代码的作用是用来解析指令中的修饰符。首先既然元素使用了指令，那么该指令的值就是表达式，既然是表达式那就涉及动态的内容，所以此时会在元素描述对象上添加 "),s("code",[this._v("el.hasBindings")]),this._v(" 属性，并将其值设置为 "),s("code",[this._v("true")]),this._v("，标识着当前元素是一个动态的元素。接着执行了如下这句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("modifiers "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseModifiers")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("调用 "),s("code",[this._v("parseModifiers")]),this._v(" 函数，该函数接收整个指令字符串作为参数，作用就是解析指令中的修饰符，并将解析结果赋值给 "),s("code",[this._v("modifiers")]),this._v(" 变量。我们找到 "),s("code",[this._v("parseModifiers")]),this._v(" 函数的代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseModifiers")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifierRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ret "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ret"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("parseModifiers")]),t._v(" 函数内部首先使用指令字符串的 "),a("code",[t._v("match")]),t._v(" 方法匹配正则 "),a("code",[t._v("modifierRE")]),t._v("，"),a("code",[t._v("modifierRE")]),t._v(" 正则我们在上一章讲过，它是用来全局匹配字符串中字符 "),a("code",[t._v(".")]),t._v(" 以及 "),a("code",[t._v(".")]),t._v(" 后面的字符，也就是修饰符，举个例子，假设我们的指令字符串为："),a("code",[t._v("'v-bind:some-prop.sync'")]),t._v("，则使用该字符串去匹配正则 "),a("code",[t._v("modifierRE")]),t._v(" 最终将会得到一个数组："),a("code",[t._v('[".sync"]')]),t._v("。一个指令有几个修饰符，则匹配的结果数组中就包含几个元素。如果匹配失败则会得到 "),a("code",[t._v("null")]),t._v("。回到上面的代码，定义了 "),a("code",[t._v("match")]),t._v(" 常量，它保存着匹配结果。接着是一个 "),a("code",[t._v("if")]),t._v(" 语句块，如果匹配成功则会执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，在 "),a("code",[t._v("if")]),t._v(" 语句块内首先定义了 "),a("code",[t._v("ret")]),t._v(" 常量，它是一个空对象，并且我们发现 "),a("code",[t._v("ret")]),t._v(" 常量将作为匹配成功时的返回结果，"),a("code",[t._v("ret")]),t._v(" 常量是什么呢？来看这句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ret"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("使用 "),a("code",[t._v("forEach")]),t._v(" 循环遍历了 "),a("code",[t._v("match")]),t._v(" 数组，然后将每一项都作为 "),a("code",[t._v("ret")]),t._v(" 对象的属性，并将其值设置为 "),a("code",[t._v("true")]),t._v("。注意由于 "),a("code",[t._v("match")]),t._v(" 数组中的每个修饰符中都包含了字符 "),a("code",[t._v(".")]),t._v("，所以如上代码中使用 "),a("code",[t._v("m.slice(1)")]),t._v(" 将字符 "),a("code",[t._v(".")]),t._v(" 去掉。假设我们的指令字符串为："),a("code",[t._v("'v-bind:some-prop.sync'")]),t._v("，则最终 "),a("code",[t._v("parseModifiers")]),t._v(" 会返回一个对象：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  sync"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当然了，如果指令字符串中不包含修饰符，则 "),s("code",[this._v("parseModifiers")]),this._v(" 函数没有返回值，或者说其返回值为 "),s("code",[this._v("undefined")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// mark element as dynamic")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasBindings "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// modifiers")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  modifiers "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseModifiers")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifierRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-bind")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-on")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// normal directives")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在使用 "),s("code",[this._v("parseModifiers")]),this._v(" 函数解析完指令中的修饰符之后，会使用 "),s("code",[this._v("modifiers")]),this._v(" 变量保存解析结果，如果解析成功，将会执行如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifierRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这句代码的作用很简单，就是将修饰符从指令字符串中移除，也就是说此时的指令字符串 "),s("code",[this._v("name")]),this._v(" 中已经不包含修饰符部分了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"解析-v-bind-指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析-v-bind-指令","aria-hidden":"true"}},[this._v("#")]),this._v(" 解析 v-bind 指令")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("处理完了修饰符，将进入对于指令的解析，解析环节分为三部分，分别是对于 "),s("code",[this._v("v-bind")]),this._v(" 指令的解析，对于 "),s("code",[this._v("v-on")]),this._v(" 指令的解析，以及对于其他指令的解析。如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// mark element as dynamic")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasBindings "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// modifiers")]),t._v("\n  modifiers "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseModifiers")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifierRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-bind")])]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-on")])]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// normal directives")])]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮的代码所示，该 "),a("code",[t._v("if...elseif...else")]),t._v(" 语句块分别用来处理 "),a("code",[t._v("v-bind")]),t._v(" 指令、"),a("code",[t._v("v-on")]),t._v(" 指令以及其他指令。我们先来看 "),a("code",[t._v("if")]),t._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该 "),a("code",[t._v("if")]),t._v(" 语句的判断条件是使用 "),a("code",[t._v("bindRE")]),t._v(" 去匹配指令字符串，如果一个指令以 "),a("code",[t._v("v-bind:")]),t._v(" 或 "),a("code",[t._v(":")]),t._v(" 开头，则说明该指令为 "),a("code",[t._v("v-bind")]),t._v(" 指令，这时 "),a("code",[t._v("if")]),t._v(" 语句块内的代码将被执行，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-bind")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFilters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  isProp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先使用 "),a("code",[t._v("bindRE")]),t._v(" 正则将指令字符串中的 "),a("code",[t._v("v-bind:")]),t._v(" 或 "),a("code",[t._v(":")]),t._v(" 去除掉，此时 "),a("code",[t._v("name")]),t._v(" 字符串已经从一个完成的指令字符串变为绑定属性的名字了，举个例子，假如原本的指令字符串为 "),a("code",[t._v("'v-bind:some-prop.sync'")]),t._v("，由于之前已经把该字符串中修饰符的部分去除掉了，所以指令字符串将变为 "),a("code",[t._v("'v-bind:some-prop'")]),t._v("，接着如上第一句高亮的代码又将指令字符串中的 "),a("code",[t._v("v-bind:")]),t._v(" 去掉，所以此时指令字符串将变为 "),a("code",[t._v("'some-prop'")]),t._v("，可以发现该字符串就是绑定属性的名字，或者说是 "),a("code",[t._v("v-bind")]),t._v(" 指令的参数。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接着调用 "),a("code",[t._v("parseFilters")]),t._v(" 函数处理绑定属性的值，我们知道 "),a("code",[t._v("parseFilters")]),t._v(" 函数的作用是用来将表达式与过滤器整合在一起的，前面我们已经做了详细的讲解，但凡涉及到能够使用过滤器的地方都要使用 "),a("code",[t._v("parseFilters")]),t._v(" 函数去解析，并将解析后的新表达式返回。如上第二句高亮的代码所示，使用 "),a("code",[t._v("parseFilters")]),t._v(" 函数的返回值重新赋值 "),a("code",[t._v("value")]),t._v(" 变量。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("第三句高亮的代码将 "),a("code",[t._v("isProp")]),t._v(" 变量初始化为 "),a("code",[t._v("false")]),t._v("，"),a("code",[t._v("isProp")]),t._v(" 变量标识着该绑定的属性是否是原生DOM对象的属性，所谓原生DOM对象的属性就是能够通过DOM元素对象直接访问的有效API，比如 "),a("code",[t._v("innerHTML")]),t._v(" 就是一个原生DOM对象的属性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下将进入一段 "),s("code",[this._v("if")]),this._v(" 条件语句，该 "),s("code",[this._v("if")]),this._v(" 语句块的作用是用来处理修饰符的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),t._v("    isProp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("camelize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'innerHtml'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'innerHTML'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("camel"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),t._v("    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("camelize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sync"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),t._v("    "),a("span",{attrs:{class:"token function"}},[t._v("addHandler")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`update:")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{attrs:{class:"token function"}},[t._v("camelize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("genAssignmentCode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`$event`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当然了，如果没有给 "),a("code",[t._v("v-bind")]),t._v(" 属性提供修饰符，则这段 "),a("code",[t._v("if")]),t._v(" 语句的代码将被忽略。"),a("code",[t._v("v-bind")]),t._v(" 属性为开发者提供了三个修饰符，分别是 "),a("code",[t._v("prop")]),t._v("、"),a("code",[t._v("camel")]),t._v(" 和 "),a("code",[t._v("sync")]),t._v("，这恰好对应如上代码中的三段 "),a("code",[t._v("if")]),t._v(" 语句块。我们先来看第一段 "),a("code",[t._v("if")]),t._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  isProp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("camelize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'innerHtml'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'innerHTML'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段 "),a("code",[t._v("if")]),t._v(" 语句块的代码用来处理使用了 "),a("code",[t._v("prop")]),t._v(" 修饰符的 "),a("code",[t._v("v-bind")]),t._v(" 指令，既然使用了 "),a("code",[t._v("prop")]),t._v(" 修饰符，则意味着该属性将被作为原生DOM对象的属性，所以首先会将 "),a("code",[t._v("isProp")]),t._v(" 变量设置为 "),a("code",[t._v("true")]),t._v("，接着使用 "),a("code",[t._v("camelize")]),t._v(" 函数将属性名驼峰化，最后还会检查驼峰化之后的属性名是否等于字符串 "),a("code",[t._v("'innerHtml'")]),t._v("，如果属性名全等于该字符串则将属性名重写为字符串 "),a("code",[t._v("'innerHTML'")]),t._v("，我们知道 "),a("code",[t._v("'innerHTML'")]),t._v(" 是一个特例，它的 "),a("code",[t._v("HTML")]),t._v(" 四个字符串全部为大写。以上就是对于使用了 "),a("code",[t._v("prop")]),t._v(" 修饰符的 "),a("code",[t._v("v-bind")]),t._v(" 指令的处理，如果一个绑定属性使用了 "),a("code",[t._v("prop")]),t._v(" 修饰符则 "),a("code",[t._v("isProp")]),t._v(" 变量会被设置为 "),a("code",[t._v("true")]),t._v("，并且会把属性名字驼峰化。那么为什么要将 "),a("code",[t._v("isProp")]),t._v(" 变量设置为 "),a("code",[t._v("true")]),t._v(" 呢？答案在如下代码中：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-bind")]),t._v("\n  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFilters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  isProp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      isProp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n      name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("camelize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'innerHtml'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'innerHTML'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isProp "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")])]),t._v("    "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("component "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("platformMustUseProp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("addProp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("addAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮的代码所示，如果 "),a("code",[t._v("isProp")]),t._v(" 为真则会执行该 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，即调用 "),a("code",[t._v("addProp")]),t._v(" 函数，而 "),a("code",[t._v("else")]),t._v(" 语句块内的 "),a("code",[t._v("addAttr")]),t._v(" 函数是永远不会被调用的。我们前面讲解过 "),a("code",[t._v("addAttr")]),t._v(" 函数，它会将属性的名字和值以对象的形式添加到元素描述对象的 "),a("code",[t._v("el.attrs")]),t._v(" 数组中，"),a("code",[t._v("addProp")]),t._v(" 函数与 "),a("code",[t._v("addAttr")]),t._v(" 函数类似，只不过 "),a("code",[t._v("addProp")]),t._v(" 函数会把属性的名字和值以对象的形式添加到元素描述对象的 "),a("code",[t._v("el.props")]),t._v(" 数组中。如下是 "),a("code",[t._v("addProp")]),t._v(" 函数的源码，它来自 "),a("code",[t._v("src/compiler/helpers.js")]),t._v(" 文件：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addProp")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("总之 "),a("code",[t._v("isProp")]),t._v(" 变量是一个重要的标识，它的值将会影响一个属性被添加到元素描述对象的位置，从而影响后续的行为。另外这里再啰嗦一句："),a("strong",[t._v("元素描述对象的 "),a("code",[t._v("el.props")]),t._v(" 数组中存储的并不是组件概念中的 "),a("code",[t._v("prop")]),t._v("，而是原生DOM对象的属性")]),t._v("。在后面的章节中我们会看到，组件概念中的 "),a("code",[t._v("prop")]),t._v(" 其实是在 "),a("code",[t._v("el.attrs")]),t._v(" 数组中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有点扯远了，我们回过头来，明白了 "),s("code",[this._v("prop")]),this._v(" 修饰符和 "),s("code",[this._v("isProp")]),this._v(" 变量的作用之后，我们再来看一下对于 "),s("code",[this._v("camel")]),this._v(" 修饰符的处理，如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("camel"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("camelize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sync"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上高亮的代码所示，如果 "),s("code",[this._v("modifiers.camel")]),this._v(" 为真，则说明该绑定的属性使用了 "),s("code",[this._v("camel")]),this._v(" 修饰符，使用该修饰符的作用只有一个，那就是将绑定的属性驼峰化，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("svg")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":view-box.camel")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewBox"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("svg")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("svg")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":viewBox")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewBox"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("svg")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不行，这是因为对于浏览器来讲，真正的属性名字是 "),s("code",[this._v(":viewBox")]),this._v(" 而不是 "),s("code",[this._v("viewBox")]),this._v("，所以浏览器在渲染时会认为这是一个自定义属性，对于任何自定义属性浏览器都会把它渲染为小写的形式，所以当 "),s("code",[this._v("Vue")]),this._v(" 尝试获取这段模板字符串的时候，会得到如下字符串：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token string"}},[this._v("'<svg :viewbox=\"viewBox\"></svg>'")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("svg")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("viewbox")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewBox"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("svg")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这将导致渲染失败，因为 "),s("code",[this._v("SVG")]),this._v(" 标签只认 "),s("code",[this._v("viewBox")]),this._v("，却不知道 "),s("code",[this._v("viewbox")]),this._v(" 是什么。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可能大家已经注意到了，这个问题仅存在于 "),s("code",[this._v("Vue")]),this._v(" 需要获取被浏览器处理后的模板字符串时才会出现，所以如果你使用了 "),s("code",[this._v("template")]),this._v(" 选项代替 "),s("code",[this._v("Vue")]),this._v(" 自动读取则不会出现这个问题：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'<svg :viewBox=\"viewBox\"></svg>'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当然了，使用单文件组件也不会出现这种问题，所以这些情况下我们是不需要使用 "),s("code",[this._v("camel")]),this._v(" 修饰符的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着我们来看一下对于最后一个修饰符的处理，即 "),s("code",[this._v("sync")]),this._v(" 修饰符：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("camel"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sync"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token function"}},[t._v("addHandler")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`update:")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{attrs:{class:"token function"}},[t._v("camelize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token function"}},[t._v("genAssignmentCode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`$event`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，如果 "),a("code",[t._v("modifiers.sync")]),t._v(" 为真，则说明该绑定的属性使用了 "),a("code",[t._v("sync")]),t._v(" 修饰符。"),a("code",[t._v("sync")]),t._v(" 修饰符实际上是一个语法糖，子组件不能够直接修改 "),a("code",[t._v("prop")]),t._v(" 值，通常我们会在子组件中发射一个自定义事件，然后在父组件层面监听该事件并由父组件来修改状态。这个过程有时候过于繁琐，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("child")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":some-prop")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@custom-event")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleEvent"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token script language-javascript"}},[t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("data")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  methods"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("handleEvent")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" val\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了简化该过程，我们可以在绑定属性时使用 "),s("code",[this._v("sync")]),this._v(" 修饰符：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("child")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":some-prop.sync")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("child")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":some-prop")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token namespace"}},[t._v("@update:")]),t._v("someProp")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleEvent"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token script language-javascript"}},[t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("data")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  methods"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("handleEvent")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" val\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("注意事件名称 "),a("code",[t._v("update:someProp")]),t._v(" 是固定的，它由 "),a("code",[t._v("update:")]),t._v(" 加上驼峰化的绑定属性名称组成。所以在子组件中你需要发射一个名字叫做 "),a("code",[t._v("update:someProp")]),t._v(" 的事件才能使 "),a("code",[t._v("sync")]),t._v(" 修饰符生效，不难看出这大大提高了开发者的开发效率。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("Vue")]),t._v(" 内部，使用 "),a("code",[t._v("sync")]),t._v(" 修饰符的绑定属性与没有使用 "),a("code",[t._v("sync")]),t._v(" 修饰符的绑定属性之间差异就在于：使用了 "),a("code",[t._v("sync")]),t._v(" 修饰符的绑定属性等价于多了一个事件侦听，并且事件名称为 "),a("code",[t._v("'update:${驼峰化的属性名}'")]),t._v("。我们回到源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("camel"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sync"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token function"}},[t._v("addHandler")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`update:")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{attrs:{class:"token function"}},[t._v("camelize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token function"}},[t._v("genAssignmentCode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`$event`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到如果发现该绑定的属性使用了 "),a("code",[t._v("sync")]),t._v(" 修饰符，则直接调用 "),a("code",[t._v("addHandler")]),t._v(" 函数，在当前元素描述对象上添加事件侦听器。"),a("code",[t._v("addHandler")]),t._v(" 函数的作用实际上就是将事件名称与该事件的侦听函数添加到元素描述对象的 "),a("code",[t._v("el.events")]),t._v(" 属性或 "),a("code",[t._v("el.nativeEvents")]),t._v(" 属性中。对于 "),a("code",[t._v("addHandler")]),t._v(" 函数的实现我们将会在即将讲解的 "),a("code",[t._v("v-on")]),t._v(" 指令的解析中为大家详细说明。这里大家要关注的是一个公式：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("some"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("prop"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sync "),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("等价于"),a("span",{attrs:{class:"token operator"}},[t._v("==")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("some"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("prop "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" @update"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("someProp\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sync"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("addHandler")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`update:")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{attrs:{class:"token function"}},[t._v("camelize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("    "),a("span",{attrs:{class:"token function"}},[t._v("genAssignmentCode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`$event`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，事件名称等于字符串 "),a("code",[t._v("'update:'")]),t._v(" 加上驼峰化的绑定属性名称。另外我们注意到传递给 "),a("code",[t._v("addHandler")]),t._v(" 函数的第三个参数，实际上 "),a("code",[t._v("addHandler")]),t._v(" 函数的第三个参数就是当事件发生时的回调函数，而该回调函数是通过 "),a("code",[t._v("genAssignmentCode")]),t._v(" 函数生成的。"),a("code",[t._v("genAssignmentCode")]),t._v(" 函数来自 "),a("code",[t._v("src/compiler/directives/model.js")]),t._v(" 文件，如下是其源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("genAssignmentCode")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  assignment"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseModel")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("value"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("=")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("assignment"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`$set(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exp"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(", ")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(", ")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("assignment"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")`")])]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("要讲解 "),a("code",[t._v("genAssignmentCode")]),t._v(" 函数将会牵扯到很多东西，实际上 "),a("code",[t._v("genAssignmentCode")]),t._v(" 函数也被用在 "),a("code",[t._v("v-model")]),t._v(" 指令，因为本质上 "),a("code",[t._v("v-model")]),t._v(" 指令与绑定属性加上 "),a("code",[t._v("sync")]),t._v(" 修饰符几乎相同，所以我们会在讲解 "),a("code",[t._v("v-model")]),t._v(" 指令时再来详细讲解 "),a("code",[t._v("genAssignmentCode")]),t._v(" 函数。这里大家只要关注一下如上代码中 "),a("code",[t._v("genAssignmentCode")]),t._v(" 的返回值即可，它返回的是一个代码字符串，可以看到如果这个代码字符串作为代码执行，其作用就是一个赋值工作。这样就免去了我们手动赋值的繁琐。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isProp "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("component "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("platformMustUseProp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("addProp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("addAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上这段代码我们已经讲到过了，这里要强调的是 "),s("code",[this._v("if")]),this._v(" 语句的判断条件：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("isProp "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("component "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("platformMustUseProp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("前面说过了如果 "),s("code",[this._v("isProp")]),this._v(" 变量为真，则说明该绑定的属性是原生DOM对象的属性，但是如果 "),s("code",[this._v("isProp")]),this._v(" 变量为假，那么就要看第二个条件是否成立，如果第二个条件成立，则该绑定的属性还是会作为原生DOM对象的属性，第二个条件如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("component "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("platformMustUseProp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("input,textarea,option,select,progress")]),t._v(" 这些标签的 "),a("code",[t._v("value")]),t._v(" 属性都应该使用元素对象的原生的 "),a("code",[t._v("prop")]),t._v(" 绑定（除了 "),a("code",[t._v("type === 'button'")]),t._v(" 之外）")]),a("li",[a("code",[t._v("option")]),t._v(" 标签的 "),a("code",[t._v("selected")]),t._v(" 属性应该使用元素对象的原生的 "),a("code",[t._v("prop")]),t._v(" 绑定")]),a("li",[a("code",[t._v("input")]),t._v(" 标签的 "),a("code",[t._v("checked")]),t._v(" 属性应该使用元素对象的原生的 "),a("code",[t._v("prop")]),t._v(" 绑定")]),a("li",[a("code",[t._v("video")]),t._v(" 标签的 "),a("code",[t._v("muted")]),t._v(" 属性应该使用元素对象的原生的 "),a("code",[t._v("prop")]),t._v(" 绑定")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到如果满足这些条件，则意味着即使你在绑定以上属性时没有使用 "),a("code",[t._v("prop")]),t._v(" 修饰符，那么它们依然会被当做原生DOM对象的属性。不过我们还是没有解释为什么要保证 "),a("code",[t._v("!el.component")]),t._v(" 成立，这是因为 "),a("code",[t._v("platformMustUseProp")]),t._v(" 函数在判断的时候需要标签的名字("),a("code",[t._v("el.tag")]),t._v(")，而 "),a("code",[t._v("el.component")]),t._v(" 会在元素渲染阶段替换掉 "),a("code",[t._v("el.tag")]),t._v(" 的值。所以如果 "),a("code",[t._v("el.component")]),t._v(" 存在则会影响 "),a("code",[t._v("platformMustUseProp")]),t._v(" 的判断结果。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后我们来对 "),s("code",[this._v("v-bind")]),this._v(" 指令的解析做一个总结：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、任何绑定的属性，最终要么会被添加到元素描述对象的 "),a("code",[t._v("el.attrs")]),t._v(" 数组中，要么就被添加到元素描述对象的 "),a("code",[t._v("el.props")]),t._v(" 数组中。")]),a("li",[t._v("2、对于使用了 "),a("code",[t._v(".sync")]),t._v(" 修饰符的绑定属性，还会在元素描述对象的 "),a("code",[t._v("el.events")]),t._v(" 对象中添加名字为 "),a("code",[t._v("'update:${驼峰化的属性名}'")]),t._v(" 的事件。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"解析-v-on-指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析-v-on-指令","aria-hidden":"true"}},[this._v("#")]),this._v(" 解析 v-on 指令")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们来看一下 "),s("code",[this._v("processAttrs")]),this._v(" 函数对于 "),s("code",[this._v("v-on")]),this._v(" 指令的解析，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-bind")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-on")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("addHandler")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" warn"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// normal directives")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("与 "),a("code",[t._v("v-bind")]),t._v(" 指令类似，使用 "),a("code",[t._v("onRE")]),t._v(" 正则去匹配指令字符串，如果该指令字符串以 "),a("code",[t._v("@")]),t._v(" 或 "),a("code",[t._v("v-on:")]),t._v(" 开头，则说明该指令是事件绑定，此时 "),a("code",[t._v("elseif")]),t._v(" 语句块内的代码将会被执行，在 "),a("code",[t._v("elseif")]),t._v(" 语句块内，首先将指令字符串中的 "),a("code",[t._v("@")]),t._v(" 字符或 "),a("code",[t._v("v-on:")]),t._v(" 字符串去掉，然后直接调用 "),a("code",[t._v("addHandler")]),t._v(" 函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("打开 "),s("code",[this._v("src/compiler/helpers.js")]),this._v(" 文件并找到 "),s("code",[this._v("addHandler")]),this._v(" 函数，如下是 "),s("code",[this._v("addHandler")]),this._v(" 函数签名：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addHandler")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("ASTModifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  important"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  warn"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到 "),s("code",[this._v("addHandler")]),this._v(" 函数接收六个参数，分别是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("el")]),t._v("：当前元素描述对象")]),a("li",[a("code",[t._v("name")]),t._v("： 绑定属性的名字，即事件名称")]),a("li",[a("code",[t._v("value")]),t._v("：绑定属性的值，这个值有可能是事件回调函数名字，有可能是内联语句，有可能是函数表达式")]),a("li",[a("code",[t._v("modifiers")]),t._v("：指令对象")]),a("li",[a("code",[t._v("important")]),t._v("：可选参数，是一个布尔值，代表着添加的事件侦听函数的重要级别，如果为 "),a("code",[t._v("true")]),t._v("，则该侦听函数会被添加到该事件侦听函数数组的头部，否则会将其添加到尾部，")]),a("li",[a("code",[t._v("warn")]),t._v("：打印警告信息的函数，是一个可选参数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("了解了 "),s("code",[this._v("addHandler")]),this._v(" 函数所需的参数，我们再来看一下解析 "),s("code",[this._v("v-on")]),this._v(" 指令时调用 "),s("code",[this._v("addHandler")]),this._v(" 函数所传递的参数，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-bind")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-on")]),t._v("\n  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("addHandler")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" warn"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// normal directives")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上高亮代码中在调用 "),s("code",[this._v("addHandler")]),this._v(" 函数时传递了全部六个参数。这里就不一一介绍这六个实参了，相信大家都知道这六个实参是什么。我们开始研究 "),s("code",[this._v("addHandler")]),this._v(" 函数的实现，在 "),s("code",[this._v("addHandler")]),this._v(" 函数的开头是这样一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("modifiers "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" modifiers "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" emptyObject\n"),a("span",{attrs:{class:"token comment"}},[t._v("// warn prevent and passive modifier")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" warn "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prevent "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("passive\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'passive and prevent can\\'t be used together. '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'Passive handler can\\'t prevent default event.'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先检测 "),a("code",[t._v("v-on")]),t._v(" 指令的修饰符对象 "),a("code",[t._v("modifiers")]),t._v(" 是否存在，如果在使用 "),a("code",[t._v("v-on")]),t._v(" 指令时没有指定任何修饰符，则 "),a("code",[t._v("modifiers")]),t._v(" 的值为 "),a("code",[t._v("undefined")]),t._v("，此时会使用冻结的空对象 "),a("code",[t._v("emptyObject")]),t._v(" 作为替代。接着是一个 "),a("code",[t._v("if")]),t._v(" 条件语句块，如果该 "),a("code",[t._v("if")]),t._v(" 语句的判断条件成立，则说明开发者同时使用了 "),a("code",[t._v("prevent")]),t._v(" 修饰符和 "),a("code",[t._v("passive")]),t._v(" 修饰符，此时如果是在非生产环境下并且 "),a("code",[t._v("addHandler")]),t._v(" 函数的第六个参数 "),a("code",[t._v("warn")]),t._v(" 存在，则使用 "),a("code",[t._v("warn")]),t._v(" 函数打印警告信息，提示开发者 "),a("code",[t._v("passive")]),t._v(" 修饰符不能和 "),a("code",[t._v("prevent")]),t._v(" 修饰符一起使用，这是因为在事件监听中 "),a("code",[t._v("passive")]),t._v(" 选项参数就是用来告诉浏览器该事件监听函数是不会阻止默认行为的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// check capture modifier")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capture"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capture\n  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'!'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),a("span",{attrs:{class:"token comment"}},[t._v("// mark the event as captured")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("once"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("once\n  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'~'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),a("span",{attrs:{class:"token comment"}},[t._v("// mark the event as once")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("passive"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("passive\n  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'&'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),a("span",{attrs:{class:"token comment"}},[t._v("// mark the event as passive")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码由三个 "),a("code",[t._v("if")]),t._v(" 条件语句块组成，如果事件指令中使用了 "),a("code",[t._v("capture")]),t._v(" 修饰符，则第一个 "),a("code",[t._v("if")]),t._v(" 语句块的内容将被执行，可以看到在第一个 "),a("code",[t._v("if")]),t._v(" 语句块内首先将 "),a("code",[t._v("modifiers.capture")]),t._v(" 选项移除，紧接着在原始事件名称之前添加一个字符 "),a("code",[t._v("!")]),t._v("。假设我们事件绑定代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@click.capture")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClick"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码中点击事件使用了 "),a("code",[t._v("capture")]),t._v(" 修饰符，所以在 "),a("code",[t._v("addHandler")]),t._v(" 函数内部，会把事件名称 "),a("code",[t._v("'click'")]),t._v(" 修改为 "),a("code",[t._v("'!click'")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("与第一个 "),a("code",[t._v("if")]),t._v(" 语句块类似，第二个和第三个 "),a("code",[t._v("if")]),t._v(" 语句块分别用来处理当事件使用了 "),a("code",[t._v("once")]),t._v(" 修饰符和 "),a("code",[t._v("passive")]),t._v(" 修饰符的情况。可以看到如果事件使用了 "),a("code",[t._v("once")]),t._v(" 修饰符，则会在事件名称的前面添加字符 "),a("code",[t._v("~")]),t._v("，如果事件使用了 "),a("code",[t._v("passive")]),t._v(" 修饰符，则会在事件名称前面添加字符 "),a("code",[t._v("&")]),t._v("。也就是说如下两段代码是等价的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@click.once")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClick"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@~click")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClick"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// normalize click.right and click.middle since they don't actually fire")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// this is technically browser-specific, but at least for now browsers are")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// the only target envs that have right/middle clicks.")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'click'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'contextmenu'")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("middle"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'mouseup'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码用来规范化“右击”事件和点击鼠标中间按钮的事件，我们知道在浏览器中点击右键一般会出来一个菜单，这本质上是触发了 "),a("code",[t._v("contextmenu")]),t._v(" 事件。而 "),a("code",[t._v("Vue")]),t._v(" 中定义“右击”事件的方式是为 "),a("code",[t._v("click")]),t._v(" 事件添加 "),a("code",[t._v("right")]),t._v(" 修饰符。所以如上代码中首先检查了事件名称是否是 "),a("code",[t._v("click")]),t._v("，如果事件名称是 "),a("code",[t._v("click")]),t._v(" 并且使用了 "),a("code",[t._v("right")]),t._v(" 修饰符，则会将事件名称重写为 "),a("code",[t._v("contextmenu")]),t._v("，同时使用 "),a("code",[t._v("delete")]),t._v(" 操作符删除 "),a("code",[t._v("modifiers.right")]),t._v(" 属性。类似地在 "),a("code",[t._v("Vue")]),t._v(" 中定义点击滚轮事件的方式是为 "),a("code",[t._v("click")]),t._v(" 事件指定 "),a("code",[t._v("middle")]),t._v(" 修饰符，但我们知道鼠标本没有滚轮点击事件，一般我们区分用户点击的按钮是不是滚轮的方式是监听 "),a("code",[t._v("mouseup")]),t._v(" 事件，然后通过事件对象的 "),a("code",[t._v("event.button")]),t._v(" 属性值来判断，如果 "),a("code",[t._v("event.button === 1")]),t._v(" 则说明用户点击的是滚轮按钮。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("不过这里有一点需要提醒大家，我们知道如果 "),a("code",[t._v("click")]),t._v(" 事件使用了 "),a("code",[t._v("once")]),t._v(" 修饰符，则事件的名字会被修改为 "),a("code",[t._v("~click")]),t._v("，所以当程序执行到如上这段时，事件名字是永远不会等于字符串 "),a("code",[t._v("'click'")]),t._v(" 的，换句话说，如果同时使用 "),a("code",[t._v("once")]),t._v(" 修饰符和 "),a("code",[t._v("right")]),t._v(" 修饰符，则右击事件不会被触发，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@click.right.once")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClickRightOnce"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上代码无效，作为变通方案我们可以直接监听 "),s("code",[this._v("contextmenu")]),this._v(" 事件，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@contextmenu.once")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClickRightOnce"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但其实从源码角度也是很好解决的，只需要把规范化“右击”事件和点击鼠标中间按钮的事件的这段代码提前即可，关于这一点我提交了一个 "),s("a",{attrs:{href:"https://github.com/vuejs/vue/pull/8492",target:"_blank",rel:"noopener noreferrer"}},[this._v("PR")]),this._v("，但实际上我认为还有更好的解决方案，那就是从 "),s("code",[this._v("mouseup")]),this._v(" 事件入手，将 "),s("code",[this._v("contextmenu")]),this._v(" 事件与“右击”事件完全分离处理，这里就不展开讨论了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们回到 "),s("code",[this._v("addHandler")]),this._v(" 函数继续看后面的代码，接下来我们要看的是如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" events\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("native"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("native\n  events "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nativeEvents "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nativeEvents "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  events "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("定义了 "),a("code",[t._v("events")]),t._v(" 变量，然后判断是否存在 "),a("code",[t._v("native")]),t._v(" 修饰符，如果 "),a("code",[t._v("native")]),t._v(" 修饰符存在则会在元素描述对象上添加 "),a("code",[t._v("el.nativeEvents")]),t._v(" 属性，初始值为一个空对象，并且 "),a("code",[t._v("events")]),t._v(" 变量与 "),a("code",[t._v("el.nativeEvents")]),t._v(" 属性具有相同的引用，另外大家注意如上代码中使用 "),a("code",[t._v("delete")]),t._v(" 操作符删除了 "),a("code",[t._v("modifiers.native")]),t._v(" 属性，到目前为止我们在讲解 "),a("code",[t._v("addHandler")]),t._v(" 函数时已经遇到了很多次使用 "),a("code",[t._v("delete")]),t._v(" 操作符删除修饰符对象属性的做法，那这么做的目的是什么呢？这是因为在代码生成阶段会使用 "),a("code",[t._v("for...in")]),t._v(" 语句遍历修饰符对象，然后做一些相关的事情，所以在生成 "),a("code",[t._v("AST")]),t._v(" 阶段把那些不希望被遍历的属性删除掉，更具体的内容我们会在代码生成中为大家详细讲解。回过头来，如果 "),a("code",[t._v("native")]),t._v(" 属性不存在则会在元素描述对象上添加 "),a("code",[t._v("el.events")]),t._v(" 属性，它的初始值也是一个空对象，此时 "),a("code",[t._v("events")]),t._v(" 变量的引用将与 "),a("code",[t._v("el.events")]),t._v(" 属性相同。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifiers "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" emptyObject"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modifiers "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" modifiers\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("定义了 "),a("code",[t._v("newHandler")]),t._v(" 对象，该对象初始拥有一个 "),a("code",[t._v("value")]),t._v(" 属性，该属性的值就是 "),a("code",[t._v("v-on")]),t._v(" 指令的属性值。接着是一个 "),a("code",[t._v("if")]),t._v(" 条件语句，该 "),a("code",[t._v("if")]),t._v(" 语句的判断条件检测了修饰符对象 "),a("code",[t._v("modifiers")]),t._v(" 是否不等于 "),a("code",[t._v("emptyObject")]),t._v("，我们知道当一个事件没有使用任何修饰符时，修饰符对象 "),a("code",[t._v("modifiers")]),t._v(" 会被初始化为 "),a("code",[t._v("emptyObject")]),t._v("，所以如果修饰符对象 "),a("code",[t._v("modifiers")]),t._v(" 不等于 "),a("code",[t._v("emptyObject")]),t._v(" 则说明事件使用了修饰符，此时会把修饰符对象赋值给 "),a("code",[t._v("newHandler.modifiers")]),t._v(" 属性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下是 "),s("code",[this._v("addHandler")]),this._v(" 函数的最后一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" handlers "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" events"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  important "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("unshift")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  events"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" important "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  events"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" newHandler\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nel"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先定义了 "),a("code",[t._v("handlers")]),t._v(" 常量，它的值是通过事件名称获取 "),a("code",[t._v("events")]),t._v(" 对象下的对应的属性值得到的："),a("code",[t._v("events[name]")]),t._v("，我们知道变量 "),a("code",[t._v("events")]),t._v(" 要么是元素描述对象的 "),a("code",[t._v("el.nativeEvents")]),t._v(" 属性的引用，要么就是元素描述对象 "),a("code",[t._v("el.events")]),t._v(" 属性的引用。无论是谁的引用，在初始情况下 "),a("code",[t._v("events")]),t._v(" 变量都是一个空对象，所以在第一次调用 "),a("code",[t._v("addHandler")]),t._v(" 时 "),a("code",[t._v("handlers")]),t._v(" 常量是 "),a("code",[t._v("undefined")]),t._v("，这就会导致接下来的代码中 "),a("code",[t._v("else")]),t._v(" 语句块将被执行：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  events"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" newHandler")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到在 "),s("code",[this._v("else")]),this._v(" 语句块内，为 "),s("code",[this._v("events")]),this._v(" 对象定义了与事件名称相同的属性，并以 "),s("code",[this._v("newHandler")]),this._v(" 对象作为属性值。举个例子，假设我们有如下模板代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@click.once")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClick"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上模板中监听了 "),s("code",[this._v("click")]),this._v(" 事件，并绑定了名字叫做 "),s("code",[this._v("handleClick")]),this._v(" 的事件监听函数，所以此时 "),s("code",[this._v("newHandler")]),this._v(" 对象应该是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("newHandler "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'handleClick'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 注意这里是空对象，因为 modifiers.once 修饰符被 delete 了")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("又因为使用了 "),a("code",[t._v("once")]),t._v(" 修饰符，所以事件名称将变为字符串 "),a("code",[t._v("'~click'")]),t._v("，又因为在监听事件时没有使用 "),a("code",[t._v("native")]),t._v(" 修饰符，所以 "),a("code",[t._v("events")]),t._v(" 变量是元素描述对象的 "),a("code",[t._v("el.events")]),t._v(" 属性的引用，所以调用 "),a("code",[t._v("addHandler")]),t._v(" 函数的最终结果就是在元素描述对象的 "),a("code",[t._v("el.events")]),t._v(" 对象中添加相应事件的处理结果：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'~click'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'handleClick'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@click.prevent")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClick1"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@click")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClick2"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上模板所示，我们有两个 "),a("code",[t._v("click")]),t._v(" 事件的侦听，其中一个 "),a("code",[t._v("click")]),t._v(" 事件使用了 "),a("code",[t._v("prevent")]),t._v(" 修饰符，而另外一个 "),a("code",[t._v("click")]),t._v(" 事件则没有使用修饰符，所以这两个 "),a("code",[t._v("click")]),t._v(" 事件是不同，但这两个事件的名称却是相同的，都是 "),a("code",[t._v("'click'")]),t._v("，所以这将导致调用两次 "),a("code",[t._v("addHandler")]),t._v(" 函数添加两次名称相同的事件，但是由于第一次调用 "),a("code",[t._v("addHandler")]),t._v(" 函数添加 "),a("code",[t._v("click")]),t._v(" 事件之后元素描述对象的 "),a("code",[t._v("el.events")]),t._v(" 对象已经存在一个 "),a("code",[t._v("click")]),t._v(" 属性，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  click"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'handleClick1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" prevent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以当第二次调用 "),s("code",[this._v("addHandler")]),this._v(" 函数时，如下 "),s("code",[this._v("elseif")]),this._v(" 语句块的代码将被执行：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" handlers "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" events"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  important "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("unshift")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  events"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" important "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  events"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" newHandler\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此时 "),a("code",[t._v("newHandler")]),t._v(" 对象是第二个 "),a("code",[t._v("click")]),t._v(" 事件侦听的信息对象，而 "),a("code",[t._v("handlers")]),t._v(" 常量保存的则是第一次被添加的事件信息，我们看如上高亮的那句代码，这句代码检测了参数 "),a("code",[t._v("important")]),t._v(" 的真假，根据 "),a("code",[t._v("important")]),t._v(" 参数的不同，会重新为 "),a("code",[t._v("events[name]")]),t._v(" 赋值。可以看到 "),a("code",[t._v("important")]),t._v(" 参数的真假所影响的仅仅是被添加的 "),a("code",[t._v("handlers")]),t._v(" 对象的顺序。最终元素描述对象的 "),a("code",[t._v("el.events.click")]),t._v(" 属性将变成一个数组，这个数组保存着前后两次添加的 "),a("code",[t._v("click")]),t._v(" 事件的信息对象，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  click"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'handleClick1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" prevent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'handleClick2'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@click.prevent")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClick1"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@click")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClick2"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("@click.self")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClick3"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们在上一次修改的基础上添加了第三个 "),a("code",[t._v("click")]),t._v(" 事件侦听，但是我们使用了 "),a("code",[t._v("self")]),t._v(" 修饰符，所以这个 "),a("code",[t._v("click")]),t._v(" 事件与前两个 "),a("code",[t._v("click")]),t._v(" 事件也是不同的，此时如下 "),a("code",[t._v("if")]),t._v(" 语句块的代码将被执行：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" handlers "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" events"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  important "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("unshift")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  events"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" important "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("handlers"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newHandler"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  events"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" newHandler\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于此时 "),a("code",[t._v("el.events.click")]),t._v(" 属性已经是一个数组，所以如上 "),a("code",[t._v("if")]),t._v(" 语句的判断条件成立。在 "),a("code",[t._v("if")]),t._v(" 语句块内执行了一句代码，这句代码是一个三元运算符，其作用很简单，我们知道 "),a("code",[t._v("important")]),t._v(" 所影响的就是事件作用的顺序，所以根据 "),a("code",[t._v("important")]),t._v(" 参数的不同，会选择使用数组的 "),a("code",[t._v("unshift")]),t._v(" 方法将新添加的事件信息对象放到数组的头部，或者选择数组的 "),a("code",[t._v("push")]),t._v(" 方法将新添加的事件信息对象放到数组的尾部。这样无论你有多少个同名事件的监听，都不会落下任何一个监听函数的执行。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着我们注意到 "),s("code",[this._v("addHandler")]),this._v(" 函数的最后一句代码，如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("el"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("plain "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token boolean"}},[this._v("false")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果一个标签存在事件侦听，无论如何都不会认为这个元素是“纯”的，所以这里直接将 "),a("code",[t._v("el.plain")]),t._v(" 设置为 "),a("code",[t._v("false")]),t._v("。"),a("code",[t._v("el.plain")]),t._v(" 属性会影响代码生成阶段，并间接导致程序的执行行为，我们后面会总结一个关于 "),a("code",[t._v("el.plain")]),t._v(" 的变更情况，让大家充分地理解。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上就是对于 "),a("code",[t._v("addHandler")]),t._v(" 函数的讲解，我们发现 "),a("code",[t._v("addHandler")]),t._v(" 函数对于元素描述对象的影响主要是在元素描述对象上添加了 "),a("code",[t._v("el.events")]),t._v(" 属性和 "),a("code",[t._v("el.nativeEvents")]),t._v(" 属性。对于 "),a("code",[t._v("el.events")]),t._v(" 属性和 "),a("code",[t._v("el.nativeEvents")]),t._v(" 属性的结构我们前面已经讲解得很详细了，这里不再做总结。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后我们回到 "),s("code",[this._v("src/compiler/parser/index.js")]),this._v(" 文件中的 "),s("code",[this._v("processAttrs")]),this._v(" 函数中，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-bind")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-on")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("addHandler")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" warn"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// normal directives")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("现在大家应该知道对于使用 "),a("code",[t._v("v-on")]),t._v(" 指令绑定的事件，在解析阶段都做了哪些处理了吧。另外我们注意一下如上代码中调用 "),a("code",[t._v("addHandler")]),t._v(" 函数时传递的第五个参数为 "),a("code",[t._v("false")]),t._v("，它实际上就是 "),a("code",[t._v("addHandler")]),t._v(" 函数中名字为 "),a("code",[t._v("important")]),t._v(" 的参数，它影响的是新添加的事件信息对象的顺序，由于上面代码中传递的 "),a("code",[t._v("important")]),t._v(" 参数为 "),a("code",[t._v("false")]),t._v("，所以使用 "),a("code",[t._v("v-on")]),t._v(" 添加的事件侦听函数将按照添加的顺序被先后执行。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是对于 "),s("code",[this._v("processAttrs")]),this._v(" 函数中对于 "),s("code",[this._v("v-on")]),this._v(" 指令的解析。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"解析其他指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析其他指令","aria-hidden":"true"}},[this._v("#")]),this._v(" 解析其他指令")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("讲解完了对于 "),s("code",[this._v("v-on")]),this._v(" 指令的解析，接下来我们进入如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-bind")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-on")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// normal directives")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// parse arg")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" argMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arg "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" argMatch "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" argMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("addDirective")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rawName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" name "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'model'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token function"}},[t._v("checkForAliasModel")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，如果一个指令既不是 "),a("code",[t._v("v-bind")]),t._v(" 也不是 "),a("code",[t._v("v-on")]),t._v("，则如上 "),a("code",[t._v("else")]),t._v(" 语句块的代码将被执行。这段代码的作用是用来处理除 "),a("code",[t._v("v-bind")]),t._v(" 和 "),a("code",[t._v("v-on")]),t._v(" 指令之外的其他指令，但这些指令中不包含 "),a("code",[t._v("v-once")]),t._v(" 指令，因为 "),a("code",[t._v("v-once")]),t._v(" 指令已经在 "),a("code",[t._v("processOnce")]),t._v(" 函数中被处理了，同样的 "),a("code",[t._v("v-if/v-else-if/v-else")]),t._v(" 等指令也不会被如上这段代码处理，下面是一个表格，表格中列出了所有 "),a("code",[t._v("Vue")]),t._v(" 内置提供的指令与已经处理过的指令和剩余未处理指令的对照表格：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("Vue 内置提供的所有指令")]),a("th",[t._v("是否已经被解析")]),a("th",[t._v("解析函数")])])]),a("tbody",[a("tr",[a("td",[a("code",[t._v("v-if")])]),a("td",[t._v("是")]),a("td",[a("code",[t._v("processIf")])])]),a("tr",[a("td",[a("code",[t._v("v-else-if")])]),a("td",[t._v("是")]),a("td",[a("code",[t._v("processIf")])])]),a("tr",[a("td",[a("code",[t._v("v-else")])]),a("td",[t._v("是")]),a("td",[a("code",[t._v("processIf")])])]),a("tr",[a("td",[a("code",[t._v("v-for")])]),a("td",[t._v("是")]),a("td",[a("code",[t._v("processFor")])])]),a("tr",[a("td",[a("code",[t._v("v-on")])]),a("td",[t._v("是")]),a("td",[a("code",[t._v("processAttrs")])])]),a("tr",[a("td",[a("code",[t._v("v-bind")])]),a("td",[t._v("是")]),a("td",[a("code",[t._v("processAttrs")])])]),a("tr",[a("td",[a("code",[t._v("v-pre")])]),a("td",[t._v("是")]),a("td",[a("code",[t._v("processPre")])])]),a("tr",[a("td",[a("code",[t._v("v-once")])]),a("td",[t._v("是")]),a("td",[a("code",[t._v("processOnce")])])]),a("tr",[a("td",[a("code",[t._v("v-text")])]),a("td",[t._v("否")]),a("td",[t._v("无")])]),a("tr",[a("td",[a("code",[t._v("v-html")])]),a("td",[t._v("否")]),a("td",[t._v("无")])]),a("tr",[a("td",[a("code",[t._v("v-show")])]),a("td",[t._v("否")]),a("td",[t._v("无")])]),a("tr",[a("td",[a("code",[t._v("v-cloak")])]),a("td",[t._v("否")]),a("td",[t._v("无")])]),a("tr",[a("td",[a("code",[t._v("v-model")])]),a("td",[t._v("否")]),a("td",[t._v("无")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过如上表格可以看到，到目前为止还有五个指令没有得到处理，分别是 "),a("code",[t._v("v-text")]),t._v("、"),a("code",[t._v("v-html")]),t._v("、"),a("code",[t._v("v-show")]),t._v("、"),a("code",[t._v("v-cloak")]),t._v(" 以及 "),a("code",[t._v("v-model")]),t._v("，除了这五个 "),a("code",[t._v("Vue")]),t._v(" 内置提供的指令之外，开发者还可以自定义指令，所以上面代码中 "),a("code",[t._v("else")]),t._v(" 语句块内的代码就是用来处理剩余的这五个内置指令和其他自定义指令的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们回到 "),s("code",[this._v("else")]),this._v(" 语句块内的代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-bind")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-on")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// normal directives")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// parse arg")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" argMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arg "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" argMatch "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" argMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("addDirective")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rawName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" name "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'model'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token function"}},[t._v("checkForAliasModel")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("else")]),t._v(" 语句块内，首先使用字符串的 "),a("code",[t._v("replace")]),t._v(" 方法配合 "),a("code",[t._v("dirRE")]),t._v(" 正则去掉属性名称中的 "),a("code",[t._v("'v-'")]),t._v(" 或 "),a("code",[t._v("':'")]),t._v(" 或 "),a("code",[t._v("'@'")]),t._v(" 等字符，并重新赋值 "),a("code",[t._v("name")]),t._v(" 变量，所以此时 "),a("code",[t._v("name")]),t._v(" 变量应该只包含属性名字，假如我们在一个标签中使用 "),a("code",[t._v("v-show")]),t._v(" 指令，则此时 "),a("code",[t._v("name")]),t._v(" 变量的值为字符串 "),a("code",[t._v("'show'")]),t._v("。但是对于自定义指令，开发者很可能为该指令提供参数，假设我们有一个叫做 "),a("code",[t._v("v-custom")]),t._v(" 的指令，并且我们在使用该指令时为其指定了参数："),a("code",[t._v("v-custom:arg")]),t._v("，这时重新赋值后的 "),a("code",[t._v("name")]),t._v(" 变量应该是字符串 "),a("code",[t._v("'custom:arg'")]),t._v("。可能大家会问：如果指令有修饰符那是不是 "),a("code",[t._v("name")]),t._v(" 变量保存的字符串中也包含修饰符？不会的，大家别忘了在 "),a("code",[t._v("processAttrs")]),t._v(" 函数中每解析一个指令时都优先使用 "),a("code",[t._v("parseModifiers")]),t._v(" 函数将修饰符解析完毕了，并且修饰符相关的字符串已经被移除，所以如上代码中的 "),a("code",[t._v("name")]),t._v(" 变量中将不会包含修饰符字符串。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("重新赋值 "),s("code",[this._v("name")]),this._v(" 变量之后，会执行如下这两句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" argMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arg "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" argMatch "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" argMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("第一句代码使用 "),a("code",[t._v("argRE")]),t._v(" 正则匹配变量 "),a("code",[t._v("name")]),t._v("，并将匹配结果保存在 "),a("code",[t._v("argMatch")]),t._v(" 常量中，由于使用的是 "),a("code",[t._v("match")]),t._v(" 方法，所以如果匹配成功则会返回一个结果数组，匹配失败则会得到 "),a("code",[t._v("null")]),t._v("。"),a("code",[t._v("argRE")]),t._v(" 正则我们在上一章讲解过，它用来匹配指令字符串中的参数部分，并且拥有一个捕获组用来捕获参数字符串，假设现在 "),a("code",[t._v("name")]),t._v(" 变量的值为 "),a("code",[t._v("custom:arg")]),t._v("，则最终 "),a("code",[t._v("argMatch")]),t._v(" 常量将是一个数组：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" argMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("':arg'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'arg'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到 "),a("code",[t._v("argMatch")]),t._v(" 数组中索引为 "),a("code",[t._v("1")]),t._v(" 的元素保存着参数字符串。有了 "),a("code",[t._v("argMatch")]),t._v(" 数组后将会执行第二句代码，第二句代码首先检测了 "),a("code",[t._v("argMatch")]),t._v(" 是否存在，如果存在则取 "),a("code",[t._v("argMatch")]),t._v(" 数组中索引为 "),a("code",[t._v("1")]),t._v(" 的元素作为常量 "),a("code",[t._v("arg")]),t._v(" 的值，所以常量 "),a("code",[t._v("arg")]),t._v(" 所保存的就是参数字符串。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下是一个 "),s("code",[this._v("if")]),this._v(" 条件语句，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这个 "),a("code",[t._v("if")]),t._v(" 语句检测了参数字符串 "),a("code",[t._v("arg")]),t._v(" 是否存在，如果存在说明有参数传递给该指令，此时会执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码。可以发现 "),a("code",[t._v("if")]),t._v(" 语句块内的这句代码的作用就是用来将参数字符串从 "),a("code",[t._v("name")]),t._v(" 字符串中移除掉的，由于参数字符串 "),a("code",[t._v("arg")]),t._v(" 不包含冒号("),a("code",[t._v(":")]),t._v(")字符，所以需要使用 "),a("code",[t._v("-(arg.length + 1)")]),t._v(" 才能正确截取。举个例子，假设此时 "),a("code",[t._v("name")]),t._v(" 字符串为 "),a("code",[t._v("'custom:arg'")]),t._v("，再经过如上代码处理之后，最终 "),a("code",[t._v("name")]),t._v(" 字符串将变为 "),a("code",[t._v("'custom'")]),t._v("，可以看到此时的 "),a("code",[t._v("name")]),t._v(" 变量已经变成了真正的指令名字了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("addDirective")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rawName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这句代码调用了 "),s("code",[this._v("addDirective")]),this._v(" 函数，并传递给该函数六个参数，为了让大家有直观的感受，我们还是举个例子，假设我们的指令为："),s("code",[this._v('v-custom:arg.modif="myMethod"')]),this._v("，则最终调用 "),s("code",[this._v("addDirective")]),this._v(" 函数时所传递的参数如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("addDirective")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'custom'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-custom:arg.modif'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'myMethod'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'arg'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" modif"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("实际上 "),a("code",[t._v("addDirective")]),t._v(" 函数与 "),a("code",[t._v("addHandler")]),t._v(" 函数类似，只不过 "),a("code",[t._v("addDirective")]),t._v(" 函数的作用是用来在元素描述对象上添加 "),a("code",[t._v("el.directives")]),t._v(" 属性的，如下是 "),a("code",[t._v("addDirective")]),t._v(" 函数的源码，它来自 "),a("code",[t._v("src/compiler/helpers.js")]),t._v(" 文件：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addDirective")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  rawName"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("ASTModifiers\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("directives "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("directives "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rawName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modifiers "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到 "),a("code",[t._v("addDirective")]),t._v(" 函数接收六个参数，在 "),a("code",[t._v("addDirective")]),t._v(" 函数体内，首先判断了元素描述对象的 "),a("code",[t._v("el.directives")]),t._v(" 是否存在，如果不存在则先将其初始化一个空数组，然后再使用 "),a("code",[t._v("push")]),t._v(" 方法添加一个指令信息对象到 "),a("code",[t._v("el.directives")]),t._v(" 数组中，如果 "),a("code",[t._v("el.directives")]),t._v(" 属性已经存在，则直接使用 "),a("code",[t._v("push")]),t._v(" 方法将指令信息对象添加到 "),a("code",[t._v("el.directives")]),t._v(" 数组中。我们一直说的"),a("strong",[t._v("指令信息对象")]),t._v("实际上指的就是如上代码中传递给 "),a("code",[t._v("push")]),t._v(" 方法的参数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rawName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modifiers "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("另外我们注意到在 "),a("code",[t._v("addDirective")]),t._v(" 函数的最后，与 "),a("code",[t._v("addHandler")]),t._v(" 函数类似，也有一句将元素描述对象的 "),a("code",[t._v("el.plain")]),t._v(" 属性设置为 "),a("code",[t._v("false")]),t._v(" 的代码。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们回到 "),s("code",[this._v("processAttrs")]),this._v(" 函数中，继续看代码，如下高亮的代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bindRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-bind")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// v-on")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// normal directives")]),t._v("\n  name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// parse arg")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" argMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arg "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" argMatch "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" argMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("addDirective")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rawName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" name "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'model'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token function"}},[t._v("checkForAliasModel")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段高亮的代码是 "),a("code",[t._v("else")]),t._v(" 语句块的最后一段代码，它是一个 "),a("code",[t._v("if")]),t._v(" 条件语句块，在非生产环境下，如果指令的名字为 "),a("code",[t._v("model")]),t._v("，则会调用 "),a("code",[t._v("checkForAliasModel")]),t._v(" 函数，并将元素描述对象和 "),a("code",[t._v("v-model")]),t._v(" 属性值作为参数传递，这段代码的作用是什么呢？我们找到 "),a("code",[t._v("checkForAliasModel")]),t._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("checkForAliasModel")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" _el "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" _el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alias "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`<")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(' v-model="')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("value"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('">: `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`You are binding v-model directly to a v-for iteration alias. `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`This will not be able to modify the v-for source array because `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`writing to the alias is like modifying a function local variable. `")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Consider using an array of objects and use v-model on an object property instead.`")])]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    _el "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" _el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("checkForAliasModel")]),this._v(" 函数的作用就是从使用了 "),s("code",[this._v("v-model")]),this._v(" 指令的标签开始，逐层向上遍历父级标签的元素描述对象，直到根元素为止。并且在遍历的过程中一旦发现这些标签的元素描述对象中存在满足条件："),s("code",[this._v("_el.for && _el.alias === value")]),this._v(" 的情况，就会打印警告信息。我们先来看如下条件：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" _el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alias "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果这个条件成立，则说明使用了 "),s("code",[this._v("v-model")]),this._v(" 指令的标签或其父代标签使用了 "),s("code",[this._v("v-for")]),this._v(" 指令，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item of list"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("假设如上代码中的 "),s("code",[this._v("list")]),this._v(" 数组如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此时将会渲染三个输入框，但是当我们修改输入框的值时，这个变更是不会体现到 "),a("code",[t._v("list")]),t._v(" 数组的，换句话说如上代码中的 "),a("code",[t._v("v-model")]),t._v(" 指令无效，为什么无效呢？这与 "),a("code",[t._v("v-for")]),t._v(" 指令的实现有关，如上代码中的 "),a("code",[t._v("v-model")]),t._v(" 指令所执行的修改操作等价于修改了函数的局部变量，这当然不会影响到真正的数据。为了解决这个问题，"),a("code",[t._v("Vue")]),t._v(" 也给了我们一个方案，那就是使用对象数组替代基本类型值的数组，并在 "),a("code",[t._v("v-model")]),t._v(" 指令中绑定对象的属性，我们修改一下上例并使其生效：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("obj of list"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("obj.item"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("此时在定义 "),s("code",[this._v("list")]),this._v(" 数组时，应该将其定义为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" item"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" item"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" item"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以实际上 "),s("code",[this._v("checkForAliasModel")]),this._v(" 函数的作用就是给开发者合适的提醒。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是对自定义指令和剩余的五个未被解析的内置指令的处理，可以看到每当遇到一个这样的指令，都会在元素描述对象的 "),s("code",[this._v("el.directives")]),this._v(" 数组中添加一个指令信息对象，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("directives "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 指令名字")]),t._v("\n    rawName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 指令原始名字")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 指令的属性值")]),t._v("\n    arg"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 指令的参数")]),t._v("\n    modifiers "),a("span",{attrs:{class:"token comment"}},[t._v("// 指令的修饰符")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("注意，如上注释中我们把指令信息对象中的 "),s("code",[this._v("value")]),this._v(" 属性说成“指令的属性值”，我已经不止一次的强调过，在解析编译阶段一切都是字符串，并不是 "),s("code",[this._v("Vue")]),this._v(" 中数据状态的值，大家千万不要搞混。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"处理非指令属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理非指令属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理非指令属性")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上一节中我们讲解了 "),s("code",[this._v("processAttrs")]),this._v(" 函数对于指令的处理，接下来我们将讲解 "),s("code",[this._v("processAttrs")]),this._v(" 函数对于那些非指令的属性是如何处理的，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processAttrs")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" list "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rawName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modifiers"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isProp\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" rawName "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n    value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上高亮的代码所示，这个 "),s("code",[this._v("else")]),this._v(" 语句块内代码的作用就是用来处理非指令属性的，如下列出的非指令属性是我们在之前的讲解中已经讲过的属性：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("key")])]),a("li",[a("code",[t._v("ref")])]),a("li",[a("code",[t._v("slot")]),t._v("、"),a("code",[t._v("slot-scope")]),t._v("、"),a("code",[t._v("scope")]),t._v("、"),a("code",[t._v("name")])]),a("li",[a("code",[t._v("is")]),t._v("、"),a("code",[t._v("inline-template")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这些非指令属性都已经被相应的处理函数解析过了，所以 "),a("code",[t._v("processAttrs")]),t._v(" 函数是不负责处理如上这些非指令属性的。换句话说除了以上属性基本指令的非指令属性基本都由 "),a("code",[t._v("processAttrs")]),t._v(" 函数来处理，比如 "),a("code",[t._v("id")]),t._v("、"),a("code",[t._v("width")]),t._v(" 等，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("box"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("width")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("100px"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上 "),a("code",[t._v("div")]),t._v(" 标签中的 "),a("code",[t._v("id")]),t._v(" 属性和 "),a("code",[t._v("width")]),t._v(" 属性都会被 "),a("code",[t._v("processAttrs")]),t._v(" 函数处理，可能大家会问 "),a("code",[t._v("class")]),t._v(" 属性是不是也被 "),a("code",[t._v("processAttrs")]),t._v(" 函数处理呢？不是的，大家别忘了在 "),a("code",[t._v("processElement")]),t._v(" 函数中有这样一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码在 "),a("code",[t._v("processAttrs")]),t._v(" 函数之前执行，并且这段代码的作用是调用“中置处理”钩子，而 "),a("code",[t._v("class")]),t._v(" 属性和 "),a("code",[t._v("style")]),t._v(" 属性都会在中置处理钩子中被处理，而并非 "),a("code",[t._v("processAttrs")]),t._v(" 函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们就查看一下这段用来处理非指令属性的代码，如下 "),s("code",[this._v("else")]),this._v(" 语句块内的代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// literal attribute")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseText")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delimiters"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('="')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("value"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('": `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'Interpolation inside attributes has been removed. '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'Use v-bind or the colon shorthand instead. For example, '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v('\'instead of <div id="{{ val }}">, use <div :id="val">.\'')]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("addAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// #6887 firefox doesn't update muted state if set via attribute")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// even immediately after element creation")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("component "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n      name "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'muted'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("platformMustUseProp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("addProp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'true'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上 "),s("code",[this._v("else")]),this._v(" 语句块内的代码中，首先执行的是如下这段代码，它是一个 "),s("code",[this._v("if")]),this._v(" 条件语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseText")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delimiters"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('="')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("value"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('": `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("'Interpolation inside attributes has been removed. '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("'Use v-bind or the colon shorthand instead. For example, '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v('\'instead of <div id="{{ val }}">, use <div :id="val">.\'')]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到，在非生产环境下才会执行该 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，在该 "),a("code",[t._v("if")]),t._v(" 语句块内首先调用了 "),a("code",[t._v("parseText")]),t._v(" 函数，这个函数来自于 "),a("code",[t._v("src/compiler/parser/text-parser.js")]),t._v(" 文件，"),a("code",[t._v("parseText")]),t._v(" 函数的作用是用来解析字面量表达式的，什么是字面量表达式呢？如下模板代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{{ isTrue ? "),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v(" : "),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("b"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v(" }}"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":id")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("isTrue ? "),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v(" : "),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("b"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这就是上面那段 "),s("code",[this._v("if")]),this._v(" 语句块代码的作用，我们往下继续看代码，接下来将执行如下这句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("addAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到，对于任何非指令属性，都会使用 "),s("code",[this._v("addAttr")]),this._v(" 函数将该属性与该属性对应的字符串值添加到元素描述对象的 "),s("code",[this._v("el.attrs")]),this._v(" 数组中。这里大家需要注意的是，如上这句代码中使用 "),s("code",[this._v("JSON.stringify")]),this._v(" 函数对属性值做了处理，这么做的目的相信大家都知道了，就是让该属性的值当做一个纯字符串对待。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("理论上代码运行到这里就已经足够了，该做的事情都已经完成了，但是我们发现在 "),s("code",[this._v("else")]),this._v(" 语句块的最后，还有如下这样一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// #6887 firefox doesn't update muted state if set via attribute")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// even immediately after element creation")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("component "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    name "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'muted'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("platformMustUseProp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("addProp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'true'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"pretransformnode-前置处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pretransformnode-前置处理","aria-hidden":"true"}},[this._v("#")]),this._v(" preTransformNode 前置处理")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("讲完了 "),a("code",[t._v("processAttrs")]),t._v(" 函数之后，所有的 "),a("code",[t._v("process*")]),t._v(" 系列函数我们都讲解完毕了。另外大家不要忘了，目前我们所讲解的内容都是在 "),a("code",[t._v("parseHTML")]),t._v(" 函数的 "),a("code",[t._v("start")]),t._v(" 钩子中运行的代码，如下高亮的代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  warn"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  expectHTML"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expectHTML"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  isUnaryTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isUnaryTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  canBeLeftOpenTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("canBeLeftOpenTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shouldDecodeNewlines"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlines"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shouldDecodeNewlinesForHref"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlinesForHref"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shouldKeepComment"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("comments"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("chars")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("comment")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("也就是说我们现在讲解的内容都是在当解析器遇到开始标签时所做的工作，接下来我们要讲的内容就是 "),s("code",[this._v("start")]),this._v(" 钩子函数中的如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// apply pre-transforms")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" preTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" preTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们说过这段代码是在应用前置转换(或前置处理)，其中 "),s("code",[this._v("preTransforms")]),this._v(" 变量是一个数组，这个数组中包含了所有前置处理的函数，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("preTransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'preTransformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由上代码可知 "),a("code",[t._v("preTransforms")]),t._v(" 变量的值是使用 "),a("code",[t._v("pluckModuleFunction")]),t._v(" 函数从 "),a("code",[t._v("options.modules")]),t._v(" 编译器选项中读取 "),a("code",[t._v("preTransformNode")]),t._v(" 字段筛选出来的。具体的筛选过程在前面的章节中我们已经讲解过了，这里就不再细说。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" baseOptions "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'./options'")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createCompiler "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'compiler/index'")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" compile"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" compileToFunctions "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createCompiler")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最终我们了解到编译器选项的 "),s("code",[this._v("modules")]),this._v(" 选项来 "),s("code",[this._v("src/platforms/web/compiler/modules/index.js")]),this._v(" 文件导出的一个数组，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" klass "),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'./class'")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" style "),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'./style'")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" model "),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'./model'")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  klass"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  style"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  model\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果把 "),s("code",[this._v("modules")]),this._v(" 数组展开的话，它长成如下这个样子：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// klass")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    staticKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'staticClass'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    transformNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    genData\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// style")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    staticKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'staticStyle'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    transformNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    genData\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// model")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    preTransformNode\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("根据如上数组可以发现 "),a("code",[t._v("modules")]),t._v(" 数组中的每一个元素都是一个对象，并且 "),a("code",[t._v("klass")]),t._v(" 对象和 "),a("code",[t._v("style")]),t._v(" 对象都拥有 "),a("code",[t._v("transformNode")]),t._v(" 属性，而 "),a("code",[t._v("model")]),t._v(" 对象中则有一个 "),a("code",[t._v("preTransformNode")]),t._v(" 属性。我们打开 "),a("code",[t._v("src/compiler/parser/index.js")]),t._v(" 文件，找到如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("preTransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'preTransformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这时我们应该知道 "),s("code",[this._v("preTransforms")]),this._v(" 变量应该是一个数组：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("preTransforms "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token punctuation"}},[this._v("[")]),this._v("\n  preTransformNode\n"),s("span",{attrs:{class:"token punctuation"}},[this._v("]")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("并且数组中只有一个元素 "),a("code",[t._v("preTransformNode")]),t._v("，而这里的 "),a("code",[t._v("preTransformNode")]),t._v(" 就是来自于 "),a("code",[t._v("src/platforms/web/compiler/modules/model.js")]),t._v(" 文件中的 "),a("code",[t._v("preTransformNode")]),t._v(" 函数。接下来我们要重点讲解的就是 "),a("code",[t._v("preTransformNode")]),t._v(" 函数的作用，既然它是用来对元素描述对象做前置处理的，我们就看看它都做了哪些处理。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TIP")]),s("p",[this._v("为了方便描述，后续我们会把 "),s("code",[this._v("src/platforms/web/compiler/modules/model.js")]),this._v(" 文件简称 "),s("code",[this._v("model.js")]),this._v(" 文件（注意：此约定仅限当前章节）")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如下是 "),s("code",[this._v("preTransformNode")]),this._v(" 函数的签名以及函数体内一开始的一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("preTransformNode")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'input'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" map "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'v-model'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("preTransformNode")]),t._v(" 函数接收两个参数，第一个参数是要预处理的元素描述对象，第二个参数则是透传过来的编译器的选项参数。在 "),a("code",[t._v("preTransformNode")]),t._v(" 函数内，所有的代码都被包含在一个 "),a("code",[t._v("if")]),t._v(" 条件语句中，该 "),a("code",[t._v("if")]),t._v(" 语句的条件是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'input'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("也就是说只有当前解析的标签是 "),a("code",[t._v("input")]),t._v(" 标签时才会执行预处理工作，看来 "),a("code",[t._v("preTransformNode")]),t._v(" 函数是用来预处理 "),a("code",[t._v("input")]),t._v(" 标签的。如果当前解析的元素是 "),a("code",[t._v("input")]),t._v(" 标签，则会继续判断该 "),a("code",[t._v("input")]),t._v(" 标签是否使用了 "),a("code",[t._v("v-model")]),t._v(" 属性：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" map "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'v-model'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果该 "),a("code",[t._v("input")]),t._v(" 标签没有使用 "),a("code",[t._v("v-model")]),t._v(" 属性，则函数直接返回，什么都不做。所以我们可以说 "),a("code",[t._v("preTransformNode")]),t._v(" 函数要预处理的是"),a("strong",[t._v("使用了 "),a("code",[t._v("v-model")]),t._v(" 属性的 "),a("code",[t._v("input")]),t._v(" 标签")]),t._v("，不过还没完，我们继续看如下代码")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" typeBinding\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("':type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'v-bind:type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  typeBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("map"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("typeBinding "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'v-bind'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  typeBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'v-bind'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(").type`")])]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typeBinding"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面这段代码是 "),a("code",[t._v("preTransformNode")]),t._v(" 函数中剩余的所有代码，只不过我们省略了最后一个 "),a("code",[t._v("if")]),t._v(" 语句块内的代码。我们注意如上代码中高亮的 "),a("code",[t._v("if")]),t._v(" 语句的条件，可以发现只有当 "),a("code",[t._v("typeBinding")]),t._v(" 变量为真的情况下才会执行该 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，而该 "),a("code",[t._v("if")]),t._v(" 语句块内的代码才是用来完成主要工作的代码。那么 "),a("code",[t._v("typeBinding")]),t._v(" 变量是什么呢？实际上 "),a("code",[t._v("typeBinding")]),t._v(" 变量保存的是该 "),a("code",[t._v("input")]),t._v(" 标签上绑定的 "),a("code",[t._v("type")]),t._v(" 属性的值，举个例子，假如有如下模板：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":type")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("inputType"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("则 "),s("code",[this._v("typeBinding")]),this._v(" 变量的值为字符串 "),s("code",[this._v("'inputType'")]),this._v("。我们来看源码的实现，首先是如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("':type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'v-bind:type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  typeBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于开发者在绑定属性的时候可以选择 "),a("code",[t._v("v-bind:")]),t._v(" 或其缩写 "),a("code",[t._v(":")]),t._v(" 两种方式，所以如上代码中分别获取了通过这两种方式绑定的 "),a("code",[t._v("type")]),t._v(" 属性，如果存在其一，则使用 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数获取绑定的 "),a("code",[t._v("type")]),t._v(" 属性的值。如果开发者没有这两种方式绑定 "),a("code",[t._v("type")]),t._v(" 属性，则代码会继续执行，来到如下这段 "),a("code",[t._v("if")]),t._v(" 条件语句：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("map"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("typeBinding "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'v-bind'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  typeBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'v-bind'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(").type`")])]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果该 "),a("code",[t._v("if")]),t._v(" 条件语句的判断条件成立，则说明该 "),a("code",[t._v("input")]),t._v(" 标签没有使用非绑定的 "),a("code",[t._v("type")]),t._v(" 属性，并且也没有使用 "),a("code",[t._v("v-bind:")]),t._v(" 或 "),a("code",[t._v(":")]),t._v(" 绑定 "),a("code",[t._v("type")]),t._v(" 属性，并且开发者使用了 "),a("code",[t._v("v-bind")]),t._v("。这里大家要注意了，开发者即使没有使用 "),a("code",[t._v("v-bind:")]),t._v(" 或 "),a("code",[t._v(":")]),t._v(" 绑定 "),a("code",[t._v("type")]),t._v(" 属性，但仍然可以通过如下方式绑定属性：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-bind")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{ type: inputType }"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("此时就需要通过读取绑定对象的 "),s("code",[this._v("type")]),this._v(" 属性来获取绑定的属性值，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("typeBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'v-bind'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(").type`")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("typeBinding "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[this._v("`({ type: inputType }).type`")])]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("总之我们要想方设法获取到绑定的 "),a("code",[t._v("type")]),t._v(" 属性的值，如果获取不到则说明该 "),a("code",[t._v("input")]),t._v(" 标签的类型是固定不变的，因为它是非绑定的。只有当一个 "),a("code",[t._v("input")]),t._v(" 表单拥有绑定的 "),a("code",[t._v("type")]),t._v(" 属性时才会执行真正的预处理代码，所以现在我们可以进一步的总结："),a("strong",[a("code",[t._v("preTransformNode")]),t._v(" 函数要预处理的是使用了 "),a("code",[t._v("v-model")]),t._v(" 属性并且使用了绑定的 "),a("code",[t._v("type")]),t._v(" 属性的 "),a("code",[t._v("input")]),t._v(" 标签")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那么要如何处理使用了 "),a("code",[t._v("v-model")]),t._v(" 属性并且使用了绑定的 "),a("code",[t._v("type")]),t._v(" 属性的 "),a("code",[t._v("input")]),t._v(" 标签呢？来看一下 "),a("code",[t._v("model.js")]),t._v(" 文件开头的一段注释：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[this._v('/**\n * Expand input[v-model] with dyanmic type bindings into v-if-else chains\n * Turn this:\n *   <input v-model="data[type]" :type="type">\n * into this:\n *   <input v-if="type === \'checkbox\'" type="checkbox" v-model="data[type]">\n *   <input v-else-if="type === \'radio\'" type="radio" v-model="data[type]">\n *   <input v-else :type="type" v-model="data[type]">\n */')]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("根据如上注释可知 "),s("code",[this._v("preTransformNode")]),this._v(" 函数会将形如：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("data[type]"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":type")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("type"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这样的 "),s("code",[this._v("input")]),this._v(" 标签扩展为如下三种 "),s("code",[this._v("input")]),this._v(" 标签：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("type === "),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("checkbox"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("checkbox"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("data[type]"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-else-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("type === "),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("radio"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("radio"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("data[type]"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-else")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":type")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("type"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("data[type]"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们知道在 "),a("code",[t._v("AST")]),t._v(" 中一个标签对应一个元素描述对象，所以从结果上看，"),a("code",[t._v("preTransformNode")]),t._v(" 函数将一个 "),a("code",[t._v("input")]),t._v(" 元素描述对象扩展为三个 "),a("code",[t._v("input")]),t._v(" 标签的元素描述对象。但是由于扩展后的标签由 "),a("code",[t._v("v-if")]),t._v("、"),a("code",[t._v("v-else-if")]),t._v(" 和 "),a("code",[t._v("v-else")]),t._v(" 三个条件指令组成，我们在前面的分析中得知，对于使用了 "),a("code",[t._v("v-else-if")]),t._v(" 和 "),a("code",[t._v("v-else")]),t._v(" 指令的标签，其元素描述对象是会被添加到那个使用 "),a("code",[t._v("v-if")]),t._v(" 指令的元素描述对象的 "),a("code",[t._v("el.ifConditions")]),t._v(" 数组中的。所以虽然把一个 "),a("code",[t._v("input")]),t._v(" 标签扩展成了三个，但实际上并不会影响 "),a("code",[t._v("AST")]),t._v(" 的结构，并且从渲染结果上看，也是一致的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("但为什么要将一个 "),a("code",[t._v("input")]),t._v(" 标签扩展为三个呢？这里有一个重要因素，由于使用了绑定的 "),a("code",[t._v("type")]),t._v(" 属性，所以该 "),a("code",[t._v("input")]),t._v(" 标签的类型是不确定的，我们知道同样是 "),a("code",[t._v("input")]),t._v(" 标签，但类型为 "),a("code",[t._v("checkbox")]),t._v(" 的 "),a("code",[t._v("input")]),t._v(" 标签与类型为 "),a("code",[t._v("radio")]),t._v(" 的 "),a("code",[t._v("input")]),t._v(" 标签的行为是不一样的。到代码生成的阶段大家会看到正是因为这里将 "),a("code",[t._v("input")]),t._v(" 标签类型做了区分，才使得代码生成时能根据三种不同情况生成三种对应的代码，从而实现三种不同的功能。有的同学就会问了，这里不做区分可不可以？答案是可以，但是假如这里不做区分，那么当你在代码生成时是不可能知道目标 "),a("code",[t._v("input")]),t._v(" 元素的类型是什么的，为了保证实现所有类型 "),a("code",[t._v("input")]),t._v(" 标签的功能可用，所以你必须保证生成的代码能完成所有类型标签的工作。换句话说你要么选择在编译阶段区分类型，要么就在运行时阶段区分类型。而 "),a("code",[t._v("Vue")]),t._v(" 选择了在编译阶段就将类型区分开来，这么做的好处是运行时的代码在针对某种特定类型的 "),a("code",[t._v("input")]),t._v(" 标签时所执行的代码是很单一职责的。当我们后面分析代码生成时你同样能够看到，在编译阶段区分类型使得代码编写更加容易。如果从另外一个角度来讲，由于不同类型的 "),a("code",[t._v("input")]),t._v(" 标签所绑定的事件未必相同，所以这也是在编译阶段区分 "),a("code",[t._v("input")]),t._v(" 标签类型的一个重要因素。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typeBinding"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ifCondition "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ifConditionExtra "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ifCondition "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`&&(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ifCondition"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")`")])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("``")])])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hasElse "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-else'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" elseIfCondition "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-else-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码定义了四个常量，分别是 "),a("code",[t._v("ifCondition")]),t._v("、"),a("code",[t._v("ifConditionExtra")]),t._v("、"),a("code",[t._v("hasElse")]),t._v(" 以及 "),a("code",[t._v("elseIfCondition")]),t._v("，其中 "),a("code",[t._v("ifCondition")]),t._v(" 常量保存的值是通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数取得的 "),a("code",[t._v("v-if")]),t._v(" 指令的值，注意如上代码中调用 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数时传递的第三个参数为 "),a("code",[t._v("true")]),t._v("，所以在获取到属性值之后，会将该属性从元素描述对象的 "),a("code",[t._v("el.attrsMap")]),t._v(" 中移除。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":type")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("inputType"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("display"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("则 "),s("code",[this._v("ifCondition")]),this._v(" 常量的值为字符串 "),s("code",[this._v("'display'")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("第二个常量 "),a("code",[t._v("ifConditionExtra")]),t._v(" 同样是一个字符串，还是以如上模板为例，由于 "),a("code",[t._v("ifCondition")]),t._v(" 常量存在，所以 "),a("code",[t._v("ifConditionExtra")]),t._v(" 常量的值为字符串 "),a("code",[t._v("'&&(display)'")]),t._v("，假若 "),a("code",[t._v("ifCondition")]),t._v(" 常量不存在，则 "),a("code",[t._v("ifConditionExtra")]),t._v(" 常量的值将是一个空字符串。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("第三个常量 "),a("code",[t._v("hasElse")]),t._v(" 是一个布尔值，它代表着 "),a("code",[t._v("input")]),t._v(" 标签是否使用了 "),a("code",[t._v("v-else")]),t._v(" 指令。其实现方式同样是通过 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数获取 "),a("code",[t._v("v-else")]),t._v(" 指令的属性值，然后将值与 "),a("code",[t._v("null")]),t._v(" 做比较。如果 "),a("code",[t._v("input")]),t._v(" 标签使用 "),a("code",[t._v("v-else")]),t._v(" 指令，则 "),a("code",[t._v("hasElse")]),t._v(" 常量的值为真，反之为假。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("第四个常量 "),a("code",[t._v("elseIfCondition")]),t._v(" 与 "),a("code",[t._v("ifCondition")]),t._v(" 类似，只不过 "),a("code",[t._v("elseIfCondition")]),t._v(" 所存储的是 "),a("code",[t._v("v-else-if")]),t._v(" 指令的属性值。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 1. checkbox")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" branch0 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cloneASTElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// process for on the main node")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("addRawAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'checkbox'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbranch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// prevent it from double-processed")]),t._v("\nbranch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("typeBinding"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")==='checkbox'`")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" ifConditionExtra\n"),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch0\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("前面我们说过了，该 "),a("code",[t._v("preTransformNode")]),t._v(" 函数的作用就是将一个拥有绑定类型和 "),a("code",[t._v("v-model")]),t._v(" 指令的 "),a("code",[t._v("input")]),t._v(" 标签扩展为三个 "),a("code",[t._v("input")]),t._v(" 标签，这个三个 "),a("code",[t._v("input")]),t._v(" 标签分别是复选按钮("),a("code",[t._v("checkbox")]),t._v(")、单选按钮("),a("code",[t._v("radio")]),t._v(")和其他 "),a("code",[t._v("input")]),t._v(" 标签。而如上这段代码的作用就是创建复选按钮的，首先调用 "),a("code",[t._v("cloneASTElement")]),t._v(" 函数克隆出一个与原始标签的元素描述对象一模一样的元素描述对象出来，并将新克隆出的元素描述对象赋值给 "),a("code",[t._v("branch0")]),t._v(" 常量。我们来看一下 "),a("code",[t._v("cloneASTElement")]),t._v(" 函数的实现，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cloneASTElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createASTElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("其实现很简单，就是通过 "),a("code",[t._v("createASTElement")]),t._v(" 函数再创建出一个元素描述对象即可，不过由于 "),a("code",[t._v("el.attrsList")]),t._v(" 数组时引用类型，所以为了避免克隆的元素描述对象与原始描述对象互相干扰，所以需要使用数组的 "),a("code",[t._v("slice")]),t._v(" 方法复刻出一个新的 "),a("code",[t._v("el.attrList")]),t._v(" 数组。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("拿到了克隆出的新元素描述对象后需要做什么呢？很简单啊，该怎么处理就怎么处理被，打开 "),s("code",[this._v("src/compiler/parser/index.js")]),this._v(" 文件，在解析开始标签的 "),s("code",[this._v("start")]),this._v(" 钩子函数中有如下这样一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRawAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// structural directives")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// element-scope stuff")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，对于一个不在 "),a("code",[t._v("v-pre")]),t._v(" 指令内的标签，会使用四个 "),a("code",[t._v("process*")]),t._v(" 函数处理它，所以在 "),a("code",[t._v("preTransformNode")]),t._v(" 函数中同样需要这四个 "),a("code",[t._v("process*")]),t._v(" 函数对标签的元素描述对象做处理，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 1. checkbox")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" branch0 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cloneASTElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// process for on the main node")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token function"}},[t._v("addRawAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'checkbox'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// prevent it from double-processed")]),t._v("\nbranch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("typeBinding"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")==='checkbox'`")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" ifConditionExtra\n"),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch0\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("注意如上两句高亮的代码，分别调用了 "),a("code",[t._v("processFor")]),t._v(" 函数和 "),a("code",[t._v("processElement")]),t._v(" 函数，大家应该已经注意到了，这里并没有调用 "),a("code",[t._v("processOnce")]),t._v(" 函数以及 "),a("code",[t._v("processIf")]),t._v(" 函数，为什么没有调用这两个函数呢？对于 "),a("code",[t._v("processOnce")]),t._v(" 函数，既然没有调用该函数，那么就能说明一个问题，即如下代码中的 "),a("code",[t._v("v-once")]),t._v(" 指令无效：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":type")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("inputType"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-once")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("大家想象一下这样设计是否合理？我认为这是合理的，对于一个既使用了 "),s("code",[this._v("v-model")]),this._v(" 指令又使用了绑定的 "),s("code",[this._v("type")]),this._v(" 属性的 "),s("code",[this._v("input")]),this._v(" 标签而言，难道它还存在静态的意义吗。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("除了没有调用 "),s("code",[this._v("processOnce")]),this._v(" 函数之外，还没有调用 "),s("code",[this._v("processIf")]),this._v(" 函数，这是因为对于条件指令早已经处理完了，如下是我们前面讲解过的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ifCondition "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ifConditionExtra "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ifCondition "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`&&(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ifCondition"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")`")])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("``")])]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hasElse "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-else'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" elseIfCondition "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-else-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上 "),s("code",[this._v("preTransformNode")]),this._v(" 函数的处理逻辑就是把一个 "),s("code",[this._v("input")]),this._v(" 标签扩展为多个标签，并且些扩展出来的标签彼此之间是互斥的，后面大家会看到这些扩展出来的标签都存在于元素描述对象的 "),s("code",[this._v("el.ifConditions")]),this._v(" 数组中。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 1. checkbox")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" branch0 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cloneASTElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// process for on the main node")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token function"}},[t._v("addRawAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'checkbox'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbranch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// prevent it from double-processed")]),t._v("\nbranch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("typeBinding"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")==='checkbox'`")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" ifConditionExtra\n"),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch0\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("processFor")]),t._v(" 函数和 "),a("code",[t._v("processElement")]),t._v(" 函数中调用了 "),a("code",[t._v("addRawAttr")]),t._v(" 函数，该函数来自于 "),a("code",[t._v("src/compiler/helpers.js")]),t._v(" 文件，其源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addRawAttr")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("代码很容易理解，"),s("code",[this._v("addRawAttr")]),this._v(" 函数的作用就是将属性的名和值分别添加到元素描述对象的 "),s("code",[this._v("el.attrsMap")]),this._v(" 对象以及 "),s("code",[this._v("el.attrsList")]),this._v(" 数组中。以如下这句话为例：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("addRawAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'checkbox'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("checkbox"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过这句话大家应该也能认识到预处理的意义，在预处理中你甚至可以把一个 "),s("code",[this._v("div")]),this._v(" 标签预处理成 "),s("code",[this._v("span")]),this._v(" 标签，而后续的处理完全感知不到这一点，并且会把这个标签当做 "),s("code",[this._v("span")]),this._v(" 标签处理。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 1. checkbox")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" branch0 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cloneASTElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// process for on the main node")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("addRawAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'checkbox'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// prevent it from double-processed")])]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("typeBinding"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")==='checkbox'`")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" ifConditionExtra\n"),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch0\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮的这句代码将元素描述对象的 "),a("code",[t._v("el.processed")]),t._v(" 属性设置为 "),a("code",[t._v("true")]),t._v("，标识着当前元素描述对象已经被处理过了，我们回到 "),a("code",[t._v("src/compiler/parser/index.js")]),t._v(" 文件中 "),a("code",[t._v("start")]),t._v(" 钩子函数的如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inVPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRawAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// structural directives")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// element-scope stuff")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("注意如上高亮的那句代码所示，由于 "),a("code",[t._v("preTransformNode")]),t._v(" 函数是在如上这段代码之前应用的，所以当程序执行到如上这段代码时，由于此时的 "),a("code",[t._v("el.processed")]),t._v(" 属性的值已经为 "),a("code",[t._v("true")]),t._v("，所以判断条件将会为假，即 "),a("code",[t._v("elseif")]),t._v(" 语句块内的代码将不会被执行。这么做的目的是为了避免重复的解析。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 1. checkbox")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" branch0 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cloneASTElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// process for on the main node")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("addRawAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'checkbox'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbranch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// prevent it from double-processed")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("typeBinding"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")==='checkbox'`")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" ifConditionExtra")]),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch0")]),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码为元素描述对象添加了 "),s("code",[this._v("el.if")]),this._v(" 属性，其 "),s("code",[this._v("if")]),this._v(" 属性值为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("typeBinding"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")==='checkbox'`")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" ifConditionExtra\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":type")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("inputType"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("display"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("则 "),a("code",[t._v("el.if")]),t._v(" 属性的值将为："),a("code",[t._v("'(${inputType})==='checkbox'&&display")]),t._v("，可以看到只有当本地状态 "),a("code",[t._v("inputType")]),t._v(" 的值为字符串 "),a("code",[t._v("'checkbox'")]),t._v(" 并且本地状态 "),a("code",[t._v("display")]),t._v(" 为真时才会渲染该复选按钮。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外我们知道如果一个标签使用了 "),s("code",[this._v("v-if")]),this._v(" 指令，则该标签的元素描述对象被添加到其自身的 "),s("code",[this._v("el.ifConditions")]),this._v(" 数组中，所以需要执行如下高亮的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 1. checkbox")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" branch0 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cloneASTElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// process for on the main node")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("addRawAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'checkbox'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbranch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("processed "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// prevent it from double-processed")]),t._v("\nbranch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("typeBinding"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")==='checkbox'`")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" ifConditionExtra\n"),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch0")]),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 2. add radio else-if condition")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" branch1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cloneASTElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch1"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("addRawAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch1"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'radio'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch1"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("typeBinding"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")==='radio'`")])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" ifConditionExtra"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch1\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 3. other")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" branch2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cloneASTElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch2"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("addRawAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch2"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("':type'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" typeBinding"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch2"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ifCondition"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  block"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" branch2\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码可以分成两部分，与扩展复选按钮一样，如上这段代码中，第一部分用来扩展单选按钮，而第二部分用来扩展其他类型的 "),a("code",[t._v("input")]),t._v(" 标签。需要注意的有两点，第一点是如上代码中无论是扩展单选按钮还是扩展其他类型的 "),a("code",[t._v("input")]),t._v(" 标签，它们都重新使用 "),a("code",[t._v("cloneASTElement")]),t._v(" 函数克隆除了新的元素描述对象并且这两个元素描述对象都会被添加到复选按钮元素描述对象的 "),a("code",[t._v("el.ifConditions")]),t._v(" 数组中。第二点需要注意的是无论是扩展单选按钮还是扩展其他类型的 "),a("code",[t._v("input")]),t._v(" 标签，它们都执行如下这句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch2"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这句代码的意义就是单纯的将克隆出来的元素描述对象中的 "),a("code",[t._v("v-for")]),t._v(" 属性移除掉，因为在复选按钮中已经使用 "),a("code",[t._v("processFor")]),t._v(" 处理过了 "),a("code",[t._v("v-for")]),t._v(" 指令，由于它们本是互斥的，其本质上等价于是同一个元素，只是根据不同的条件渲染不同的标签罢了，所以 "),a("code",[t._v("v-for")]),t._v(" 指令处理一次就够了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hasElse"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elseIfCondition"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  branch0"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elseif "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" elseIfCondition\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码的作用是什么呢？在前面的讲解中，我们所举的例子都是使用 "),a("code",[t._v("v-if")]),t._v(" 指令的 "),a("code",[t._v("input")]),t._v(" 标签，但该 "),a("code",[t._v("input")]),t._v(" 标也有可能使用 "),a("code",[t._v("v-else-if")]),t._v(" 或 "),a("code",[t._v("v-else")]),t._v(" 啊，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("num === 1"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":type")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("inputType"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后 "),s("code",[this._v("preTransformNode")]),this._v(" 函数将返回一个全新的元素描述对象：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("preTransformNode")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'input'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typeBinding"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" branch0")]),t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们再回到 "),s("code",[this._v("src/compiler/parser/index.js")]),this._v(" 文件找到应用预处理钩子的代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// apply pre-transforms")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" preTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" preTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到如果通过预处理函数处理之后得到了新的元素描述对象，则使用新的元素描述对象替换当前元素描述对象("),s("code",[this._v("element")]),this._v(")，否则依然使用 "),s("code",[this._v("element")]),this._v(" 作为元素描述对象。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"transformnode-中置处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transformnode-中置处理","aria-hidden":"true"}},[this._v("#")]),this._v(" transformNode 中置处理")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在前置处理中，目前只有一个用来处理使用了 "),a("code",[t._v("v-model")]),t._v(" 指令并且使用绑定的 "),a("code",[t._v("type")]),t._v(" 属性的 "),a("code",[t._v("input")]),t._v(" 标签的前置处理函数。与之不同，中置处理函数 "),a("code",[t._v("transformNode")]),t._v(" 则有两，分别用来对 "),a("code",[t._v("class")]),t._v(" 属性和 "),a("code",[t._v("style")]),t._v(" 属性进行扩展，我们打开 "),a("code",[t._v("src/compiler/parser/index.js")]),t._v(" 函数找到 "),a("code",[t._v("processElement")]),t._v(" 函数，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processKey")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// determine whether this is a plain element after")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// removing structural attributes")]),t._v("\n  element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plain "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("processRef")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processSlot")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("processComponent")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" transforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" element")]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("processAttrs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到中置处理函数的应用时机是在 "),a("code",[t._v("processAttrs")]),t._v(" 函数之前，使用 "),a("code",[t._v("for")]),t._v(" 循环遍历了 "),a("code",[t._v("transforms")]),t._v(" 数组，"),a("code",[t._v("transforms")]),t._v(" 数组中包含两个 "),a("code",[t._v("transformNode")]),t._v(" 函数，分别来自 "),a("code",[t._v("src/platforms/web/compiler/modules/class.js")]),t._v(" 文件和 "),a("code",[t._v("src/platforms/web/compiler/modules/style.js")]),t._v(" 文件。根据文件名我们也能大概猜到这两个中置处理函数的作用是什么，我们首先来看 "),a("code",[t._v("class.js")]),t._v(" 文件，打开该文件找到 "),a("code",[t._v("transformNode")]),t._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("transformNode")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" warn "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" baseWarn\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" staticClass "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" staticClass"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseText")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticClass"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delimiters"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`class="')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("staticClass"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('": `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'Interpolation inside attributes has been removed. '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'Use v-bind or the colon shorthand instead. For example, '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v('\'instead of <div class="{{ val }}">, use <div :class="val">.\'')]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticClass"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticClass "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticClass"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" classBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* getStatic */")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("classBinding"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" classBinding\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在该 "),s("code",[this._v("transformNode")]),this._v(" 函数内，首先执行是如下两句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" warn "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" baseWarn\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" staticClass "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("定义 "),a("code",[t._v("warn")]),t._v(" 常量，它是一个函数，用来打印警告信息。接着使用 "),a("code",[t._v("getAndRemoveAttr")]),t._v(" 函数从元素描述对象上获取非绑定的 "),a("code",[t._v("class")]),t._v(" 属性的值，并将其保存在 "),a("code",[t._v("staticClass")]),t._v(" 常量中。接着进入一段 "),a("code",[t._v("if")]),t._v(" 条件语句：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" staticClass"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseText")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticClass"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delimiters"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`class="')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("staticClass"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('": `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("'Interpolation inside attributes has been removed. '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("'Use v-bind or the colon shorthand instead. For example, '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v('\'instead of <div class="{{ val }}">, use <div :class="val">.\'')]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在非生产环境下，并且非绑定的 "),s("code",[this._v("class")]),this._v(" 属性值存在，则会使用 "),s("code",[this._v("parseText")]),this._v(" 函数解析该值，如果解析成功则说明你在非绑定的 "),s("code",[this._v("class")]),this._v(" 属性中使用了字面量表达式，例如：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{{ isActive ? "),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("active"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v(" : "),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v(" }}"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这时 "),s("code",[this._v("Vue")]),this._v(" 会打印警告信息，提示你使用如下这种方式替代：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":class")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{ "),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("active"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v(": isActive }"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticClass"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticClass "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticClass"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果非绑定的 "),a("code",[t._v("class")]),t._v(" 属性值存在，则将该值保存在元素描述对象的 "),a("code",[t._v("el.staticClass")]),t._v(" 属性中，注意这里使用 "),a("code",[t._v("JSON.stringify")]),t._v(" 对值做了处理，这么做的目的我们已经说过很多遍了。再往下是该 "),a("code",[t._v("transformNode")]),t._v(" 函数的最后一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" classBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* getStatic */")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("classBinding"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" classBinding\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码使用了 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数获取绑定的 "),a("code",[t._v("class")]),t._v(" 属性的值，如果绑定的 "),a("code",[t._v("class")]),t._v(" 属性的值存在，则将该值保存在 "),a("code",[t._v("el.classBinding")]),t._v(" 属性中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是中置处理对于 "),s("code",[this._v("class")]),this._v(" 属性的处理方式，我们做一个简短的总结：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("非绑定的 "),s("code",[this._v("class")]),this._v(" 属性值保存在元素描述对象的 "),s("code",[this._v("el.staticClass")]),this._v(" 属性中，假设有如下模板：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("a b c"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("则该标签元素描述对象的 "),s("code",[this._v("el.staticClass")]),this._v(" 属性值为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticClass "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a b c'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("绑定的 "),s("code",[this._v("class")]),this._v(" 属性值保存在元素描述对象的 "),s("code",[this._v("el.classBinding")]),this._v(" 属性中，假设我们有如下模板：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":class")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{ "),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v("active"),a("span",{attrs:{class:"token punctuation"}},[t._v("'")]),t._v(": isActive }"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("则该标签元素描述对象的 "),s("code",[this._v("el.classBinding")]),this._v(" 属性值为：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("el"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("classBinding "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token string"}},[this._v("\"{ 'active': isActive }\"")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("对于 "),a("code",[t._v("style")]),t._v(" 属性的处理与对 "),a("code",[t._v("class")]),t._v(" 属性的处理类似，用于处理 "),a("code",[t._v("style")]),t._v(" 属性的中置处理函数位于 "),a("code",[t._v("src/platforms/web/compiler/modules/style.js")]),t._v(" 文件，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("transformNode")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" warn "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" baseWarn\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" staticStyle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getAndRemoveAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'style'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticStyle"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseText")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticStyle"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delimiters"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`style="')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("staticStyle"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('": `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n          "),a("span",{attrs:{class:"token string"}},[t._v("'Interpolation inside attributes has been removed. '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n          "),a("span",{attrs:{class:"token string"}},[t._v("'Use v-bind or the colon shorthand instead. For example, '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n          "),a("span",{attrs:{class:"token string"}},[t._v('\'instead of <div style="{{ val }}">, use <div :style="val">.\'')]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticStyle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("parseStyleText")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticStyle"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" styleBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'style'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* getStatic */")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("styleBinding"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styleBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" styleBinding\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到，用来处理 "),a("code",[t._v("style")]),t._v(" 属性的 "),a("code",[t._v("transformNode")]),t._v(" 函数基本与用来处理 "),a("code",[t._v("class")]),t._v(" 属性的 "),a("code",[t._v("transformNode")]),t._v(" 函数相同，这里大家要额外注意如下这句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticStyle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("parseStyleText")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("staticStyle"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("与 "),a("code",[t._v("class")]),t._v(" 属性不同，如果一个标签使用了非绑定的 "),a("code",[t._v("style")]),t._v(" 属性，则会使用 "),a("code",[t._v("parseStyleText")]),t._v(" 函数对属性值进行处理，"),a("code",[t._v("parseStyleText")]),t._v(" 函数来自 "),a("code",[t._v("src/platforms/web/util/style.js")]),t._v(" 文件，那么 "),a("code",[t._v("parseStyleText")]),t._v(" 函数会如何处理非绑定的 "),a("code",[t._v("style")]),t._v(" 属性值呢？举个例子，如下模板所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token style-attr language-css"}},[a("span",{attrs:{class:"token attr-name"}},[t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("style")])]),a("span",{attrs:{class:"token punctuation"}},[t._v('="')]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token property"}},[t._v("color")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" red"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token property"}},[t._v("background")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" green"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")])]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上模板中使用了非绑定的 "),s("code",[this._v("style")]),this._v(" 属性，属性值为字符串 "),s("code",[this._v("'color: red; background: green;'")]),this._v("，"),s("code",[this._v("parseStyleText")]),this._v(" 函数会把这个字符串解析为对象形式，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  color"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'red'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  background"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'green'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后再使用 "),s("code",[this._v("JSON.stringify")]),this._v(" 函数将如上对象变为字符串后赋值给元素描述对象的 "),s("code",[this._v("el.staticStyle")]),this._v(" 属性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们来看一下 "),s("code",[this._v("parseStyleText")]),this._v(" 函数是如何将样式字符串解析为对象的，如下是 "),s("code",[this._v("parseStyleText")]),this._v(" 函数的源码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" parseStyleText "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cached")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cssText"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" listDelimiter "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/;(?![^(]*\\))/g")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" propertyDelimiter "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/:(.+)/")]),t._v("\n  cssText"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("split")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listDelimiter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tmp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("split")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propertyDelimiter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      tmp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tmp"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由上代码可以 "),a("code",[t._v("parseStyleText")]),t._v(" 函数是由 "),a("code",[t._v("cached")]),t._v(" 函数创建的高阶函数，"),a("code",[t._v("parseStyleText")]),t._v(" 接收内联样式字符串作为参数并返回解析后的对象。在 "),a("code",[t._v("parseStyleText")]),t._v(" 函数内部首先定义了 "),a("code",[t._v("res")]),t._v(" 常量，该常量就会作为 "),a("code",[t._v("parseStyleText")]),t._v(" 函数的返回值，其初始值是一个空对象，接着定义了两个正则常量 "),a("code",[t._v("listDelimiter")]),t._v(" 和 "),a("code",[t._v("propertyDelimiter")]),t._v("，其实把一个内两样式字符串解析为对象的思路很简单，首先我们要找到样式字符串的规则，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("div style"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"color: red; background: green;"')]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到在样式字符串中分号("),s("code",[this._v(";")]),this._v(")用来作为每一条样式规则的分割，而冒号("),s("code",[this._v(":")]),this._v(")则用来一条样式规则中属性名与值的分割，所以我们有如下思路：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、使用分号("),s("code",[this._v(";")]),this._v(")把样式字符串分割为一个数组，数组中的每个元素都是一条样式规则，以如上模板为例，分割后的数组应该是：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'color: red'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'background: green'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着遍历该数组，对于每一条样式规则使用冒号("),s("code",[this._v(":")]),this._v(")将其属性名与值再次进行分割，这样我们就能够得到想要的结果了。明白了这个思路再去看 "),s("code",[this._v("parseStyleText")]),this._v(" 函数的代码就会很容易理解。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于 "),s("code",[this._v("parseStyleText")]),this._v(" 函数的逻辑我们不做过多解释，这里我们重点来说一下 "),s("code",[this._v("listDelimiter")]),this._v(" 正则，如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("const")]),this._v(" listDelimiter "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token regex"}},[this._v("/;(?![^(]*\\))/g")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该正则表达式使用了"),a("strong",[t._v("正向否定查找("),a("code",[t._v("(?!")]),t._v(")")]),t._v("，什么是正向否定查找呢？举个例子，正则表达式 "),a("code",[t._v("/a(?!b)/")]),t._v("用来匹配后面没有跟字符 "),a("code",[t._v("'b'")]),t._v(" 的字符 "),a("code",[t._v("'a'")]),t._v("。所以如上正则表达式用来全局匹配字符串中的分号("),a("code",[t._v(";")]),t._v(")，但是该分号必须满足一个条件，即"),a("strong",[t._v("该分号的后面不能跟左圆括号("),a("code",[t._v(")")]),t._v(")，除非有一个相应的右圆括号("),a("code",[t._v("(")]),t._v(")存在")]),t._v("，说起来有点抽象，我们还是举例说明，如下模板所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token style-attr language-css"}},[a("span",{attrs:{class:"token attr-name"}},[t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("style")])]),a("span",{attrs:{class:"token punctuation"}},[t._v('="')]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token property"}},[t._v("color")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" red"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token property"}},[t._v("background")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token url"}},[t._v("url(www.xxx.com?a=1&amp;copy=3)")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")])]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("大家仔细观察如上 "),a("code",[t._v("div")]),t._v(" 标签的 "),a("code",[t._v("style")]),t._v(" 属性值中存在几个分号？答案是三个分号，但只有其中两个分号才是真正的样式规则分割，而字符串 "),a("code",[t._v("'url(www.xxx.com?a=1&amp;copy=3)'")]),t._v(" 中的分号则是不能作为样式规则分割的，正则常量 "),a("code",[t._v("listDelimiter")]),t._v(" 正是为了实现这个功能而设计的。有的同学可能会问为什么 "),a("code",[t._v("url")]),t._v(" 中会带有分号("),a("code",[t._v(";")]),t._v(")，实际上正如上面的例子所示，我们知道内联样式是写在 "),a("code",[t._v("html")]),t._v(" 文件中的，而在 "),a("code",[t._v("html")]),t._v(" 规范中存在一个叫做 "),a("code",[t._v("html")]),t._v(" 实体的概念，我们来看如下这段 "),a("code",[t._v("html")]),t._v(" 模板：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("foo.cgi?chapter=1&copy=3"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("link"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段 "),a("code",[t._v("html")]),t._v(" 模板在一些浏览器中不能正常工作，这是因为有些浏览器会把 "),a("code",[t._v("&copy")]),t._v(" 当做 "),a("code",[t._v("html")]),t._v(" 实体从而把其解析为字符 "),a("code",[t._v("©")]),t._v("，这就导致当你打开该链接时，变成了访问："),a("code",[t._v("foo.cgi?chapter=1©=3")]),t._v("。具体的内容大家可以查看这里："),a("a",{attrs:{href:"http://htmlhelp.com/tools/validator/problems.html#amp",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ampersands (&'s) in URLs")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总之，对于非绑定的 "),s("code",[this._v("style")]),this._v(" 属性，会在该元素描述对象上添加 "),s("code",[this._v("el.staticStyle")]),this._v(" 属性，该属性的值是一个字符串化后的对象。接着对于绑定的 "),s("code",[this._v("style")]),this._v(" 属性，则会使用如下这段代码来处理：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" styleBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getBindingAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'style'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* getStatic */")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("styleBinding"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styleBinding "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" styleBinding\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("与处理绑定的 "),a("code",[t._v("class")]),t._v(" 属性类似，使用 "),a("code",[t._v("getBindingAttr")]),t._v(" 函数获取到绑定的 "),a("code",[t._v("style")]),t._v(" 属性值后，如果值存在则直接将其赋值给元素描述对象的 "),a("code",[t._v("el.styleBinding")]),t._v(" 属性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是中置处理对于 "),s("code",[this._v("style")]),this._v(" 属性的处理方式，我们做一个简短的总结：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("非绑定的 "),s("code",[this._v("style")]),this._v(" 属性值保存在元素描述对象的 "),s("code",[this._v("el.staticStyle")]),this._v(" 属性中，假设有如下模板：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token style-attr language-css"}},[a("span",{attrs:{class:"token attr-name"}},[t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("style")])]),a("span",{attrs:{class:"token punctuation"}},[t._v('="')]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token property"}},[t._v("color")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" red"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token property"}},[t._v("background")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" green"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")])]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("则该标签元素描述对象的 "),s("code",[this._v("el.staticStyle")]),this._v(" 属性值为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticStyle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  color"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'red'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  background"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'green'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("绑定的 "),s("code",[this._v("style")]),this._v(" 属性值保存在元素描述对象的 "),s("code",[this._v("el.styleBinding")]),this._v(" 属性中，假设我们有如下模板：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v(":")]),a("span",{attrs:{class:"token style-attr language-css"}},[a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token attr-name"}},[t._v("style")])]),a("span",{attrs:{class:"token punctuation"}},[t._v('="')]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token property"}},[t._v("fontSize")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fontSize + "),a("span",{attrs:{class:"token string"}},[t._v("'px'")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("则该标签元素描述对象的 "),s("code",[this._v("el.styleBinding")]),this._v(" 属性值为：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("el"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("styleBinding "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token string"}},[this._v("\"{ fontSize: fontSize + 'px' }\"")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("现在前置处理("),a("code",[t._v("preTransformNode")]),t._v(")和中置处理("),a("code",[t._v("transformNode")]),t._v(")我们都讲完了，还剩下后置处理("),a("code",[t._v("postTransformsNode")]),t._v(")没有将，每当遇到非一元标签的结束标签或遇到一元标签时则会应用后置处理，我们回到 "),a("code",[t._v("src/compiler/parser/index.js")]),t._v(" 文件，如下高亮的代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("closeElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// check pre state")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inVPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("platformIsPreTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// apply post-transforms")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" postTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    postTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("该 "),s("code",[this._v("for")]),this._v(" 循环遍历了 "),s("code",[this._v("postTransforms")]),this._v(" 数组，但实际上 "),s("code",[this._v("postTransforms")]),this._v(" 是一个空数组，因为目前还没有任何后置处理的钩子函数。这里只是暂时提供一个用于后置处理的出口，当有需要的时候可以使用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"文本节点的元素描述对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文本节点的元素描述对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 文本节点的元素描述对象")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们主要讲解当解析器遇到一个文本节点时会如何为文本节点创建元素描述对象，又会如何对文本节点做哪些特殊的处理。我们打开 "),s("code",[this._v("src/compiler/parser/index.js")]),this._v(" 文件找到 "),s("code",[this._v("parseHTML")]),this._v(" 函数的 "),s("code",[this._v("chars")]),this._v(" 钩子函数选项，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token function"}},[t._v("chars")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当解析器遇到文本节点时，如上代码中的 "),s("code",[this._v("chars")]),this._v(" 钩子函数就会被调用，并且接收该文本节点的文本内容作为参数。我们来看 "),s("code",[this._v("chars")]),this._v(" 钩子函数最开始的这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" template"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warnOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'Component template requires a root element, rather than just text.'")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warnOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`text "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("text"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('" outside root element will be ignored.`')])]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码是连续的几个 "),a("code",[t._v("if")]),t._v(" 条件语句，首先判断了 "),a("code",[t._v("currentParent")]),t._v(" 变量是否存在，我们知道 "),a("code",[t._v("currentParent")]),t._v(" 变量指向的是当前节点的父节点，如果父节点不存在才会执行该 "),a("code",[t._v("if")]),t._v(" 条件语句里面的代码。大家思考一下，如果 "),a("code",[t._v("currentParent")]),t._v(" 变量不存在说明什么问题？我们知道如果代码执行到了这里，那么当前节点必然是文本节点，并且该文本节点没有父级节点。什么情况下回出现一个文本节点没有父级节点呢？有两种情况：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第一：模板中只有文本节点")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  我是文本节点\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上模板中没有根元素，只有一个文本节点。由于没有元素节点，所以 "),a("code",[t._v("currentParent")]),t._v(" 变量是肯定不存在值的，而 "),a("code",[t._v("Vue")]),t._v(" 的模板要求必须要有一个根元素节点才行。当解析器在解析如上模板时，由于模板只有一个文本节点，所以在解析过程中只会调用一次 "),a("code",[t._v("chars")]),t._v(" 钩子函数，同时将文本节点的内容作为参数传递，此时就会出现一种情况，即：“整个模板的内容与文本节点的内容完全一致”，换句话说 "),a("code",[t._v("text === template")]),t._v(" 条件成立，这时解析器会打印警告信息提示模板不能只是文本，必须有一个元素节点才行。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第二：文本节点在根元素的外面")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("根元素内的文本节点"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("根元素外的文本节点\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们知道 "),s("code",[this._v("currentParent")]),this._v(" 变量始终保存的是当前解析节点的父节点，当解析器解析如上模板并遇到根元素外的文本节点时，"),s("code",[this._v("currentParent")]),this._v(" 变量是不存在的，但是此时条件 "),s("code",[this._v("text === template")]),this._v(" 是不成立的，这时如下代码会被执行：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("warnOnce")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`text "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("text"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('" outside root element will be ignored.`')])]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("即如果 "),s("code",[this._v("text")]),this._v(" 是非空的字符串则打印警告信息提示开发者根元素外的文本将会被忽略。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果模板不符合以上要求则此时 "),s("code",[this._v("chars")]),this._v(" 钩子函数会立即 "),s("code",[this._v("return")]),this._v("，不会继续做后续的工作，如果模板符合要求则将会继续执行如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// IE textarea placeholder bug")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isIE "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'textarea'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("placeholder "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" text\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码是用来解决 IE 浏览器中渲染 "),a("code",[t._v("<textarea>")]),t._v(" 标签的 "),a("code",[t._v("placeholder")]),t._v(" 属性时存在的 bug 的。具体的问题大家可以点击这个 "),a("a",{attrs:{href:"https://github.com/vuejs/vue/issues/4098",target:"_blank",rel:"noopener noreferrer"}},[t._v("issue")]),t._v(" 查看。为了让大家更好理解，我们举个例子，如下 "),a("code",[t._v("html")]),t._v(" 代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("box"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("textarea")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("placeholder")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("some placeholder..."),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("textarea")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上 "),s("code",[this._v("html")]),this._v(" 片段是存在一个 "),s("code",[this._v("<textarea>")]),this._v(" 标签，该标签拥有 "),s("code",[this._v("placeholder")]),this._v(" 属性，但却没有真实的文本内容，假如我们使用如下代码获取字符串内容：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'box'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token string"}},[this._v("'<textarea placeholder=\"some placeholder...\">some placeholder...</textarea>'")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到 "),s("code",[this._v("<textarea>")]),this._v(" 标签的 "),s("code",[this._v("placeholder")]),this._v(" 属性的属性值被设置成了 "),s("code",[this._v("<textarea>")]),this._v(" 的真实文本内容，为了解决这个问题，所以产生了如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// IE textarea placeholder bug")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isIE "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'textarea'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("placeholder "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" text\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果当前文本节点的父元素是 "),a("code",[t._v("<textarea>")]),t._v(" 标签，并且文本元素的内容和 "),a("code",[t._v("<textarea>")]),t._v(" 标签的 "),a("code",[t._v("placeholder")]),t._v(" 属性值相同，则说明此时遇到了 IE 的 bug，由于只有当 "),a("code",[t._v("<textarea>")]),t._v(" 标签没有真实文本内容时才存在这个 bug，所以这说明当前解析的文本节点原本就是不存在的，这时 "),a("code",[t._v("chars")]),t._v(" 钩子函数会直接 "),a("code",[t._v("return")]),t._v("，不做后续处理。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" children "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children\ntext "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" inPre "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isTextTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" text "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("decodeHTMLCached")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// only preserve whitespace if its not right after a starting tag")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" preserveWhitespace "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码首先定义了 "),a("code",[t._v("children")]),t._v(" 常量，它是 "),a("code",[t._v("currentParent.children")]),t._v(" 的引用。接着判断了条件 "),a("code",[t._v("inPre || text.trim()")]),t._v(" 的真假，我们一点点来看，假设此时 "),a("code",[t._v("inPre")]),t._v(" 变量为真，那么如上代码等价于：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isTextTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" text "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("decodeHTMLCached")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码中首先使用 "),a("code",[t._v("isTextTag")]),t._v(" 函数检测当前文本节点的父节点是否是文本标签(即 "),a("code",[t._v("<script>")]),t._v(" 标签或 "),a("code",[t._v("<style>")]),t._v(" 标签)，如果当前文本节点的父节点是文本标签，那么则原封不动的保留原始文本，否则使用 "),a("code",[t._v("decodeHTMLCached")]),t._v(" 函数对文本进行解码，其中关键点在于一定要使用 "),a("code",[t._v("decodeHTMLCached")]),t._v(" 函数解码文本才行，为什么呢？来看如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("pre"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("lt"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("div"),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("gt"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("我是一个"),a("span",{attrs:{class:"token constant"}},[t._v("DIV")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("lt"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("gt"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("pre"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们通常会使用 "),a("code",[t._v("<pre>")]),t._v(" 标签展示源码，所以通常会书写 "),a("code",[t._v("html")]),t._v(" 实体，假如不对如上 "),a("code",[t._v("html")]),t._v(" 实体进行解码，那么最终展示在页面上的内容就是字符串 "),a("code",[t._v("'&lt;div&gt;我是一个DIV&lt;/div&gt;'")]),t._v(" 而非 "),a("code",[t._v("'<div>我是一个DIV</div>'")]),t._v("，这是因为 "),a("code",[t._v("Vue")]),t._v(" 在创建文本节点时使用的是 "),a("code",[t._v("document.createTextNode")]),t._v(" 函数，这不同于将如上模板直接交给浏览器解析并渲染，所以需要解码后将字符串 "),a("code",[t._v("'<div>我是一个DIV</div>'")]),t._v(" 作为一个文本节点创建才行。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isTextTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" text "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("decodeHTMLCached")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码还使用 "),a("code",[t._v("isTextTag")]),t._v(" 函数检测了当前文本节点的父节点是否是文本标签，如果是文本标签则直接使用原始文本，而不会使用 "),a("code",[t._v("decodeHTMLCached")]),t._v(" 函数对文本进行解码。这时我们考虑的就不应该是 "),a("code",[t._v("inPre")]),t._v(" 变量为真的情况了，而是 "),a("code",[t._v("text.trim()")]),t._v(" 这个条件为真的情况，当 "),a("code",[t._v("text.trim()")]),t._v(" 为真时说明当前文本节点的内容不是空白，只要不是空白的文本并且该文本存在于文本标签之内，那么该文本就不需要进行解码操作，比如存在于 "),a("code",[t._v("<script>")]),t._v(" 标签或 "),a("code",[t._v("<style>")]),t._v(" 标签之内的文本。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" inPre "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isTextTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" text "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("decodeHTMLCached")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// only preserve whitespace if its not right after a starting tag")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" preserveWhitespace "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果条件 "),s("code",[this._v("inPre || text.trim()")]),this._v(" 为假，则会执行如上代码中高亮的部分，那么如上代码相当于：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" preserveWhitespace "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先我们要明确的是当条件 "),a("code",[t._v("inPre || text.trim()")]),t._v(" 为假时代表什么，我们对该条件取反："),a("code",[t._v("!inPre && !text.trim()")]),t._v("，取反后的条件很容易理解，用一句话描述就是"),a("strong",[t._v("不存在于 "),a("code",[t._v("<pre>")]),t._v(" 标签的空白符")]),t._v("，有的同学可能会有疑问，此时 "),a("code",[t._v("text")]),t._v(" 一定是空白符吗？难道不可能是空字符串吗？当然不可能是空字符串，因为如果 "),a("code",[t._v("text")]),t._v(" 是空字符串则代码是不会执行 "),a("code",[t._v("chars")]),t._v(" 钩子函数的。那么对于不存在于 "),a("code",[t._v("<pre>")]),t._v(" 标签内的空白符要如何处理呢？我们来看如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" preserveWhitespace "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码是一个三元运算符，如果 "),a("code",[t._v("preserveWhitespace")]),t._v(" 常量为真并且当前文本节点的父节点有子元素存在，则将 "),a("code",[t._v("text")]),t._v(" 变量设置为空格字符("),a("code",[t._v("' '")]),t._v(")，否则将 "),a("code",[t._v("text")]),t._v(" 变量设置为空字符串。其中 "),a("code",[t._v("preserveWhitespace")]),t._v(" 常量是一个布尔值代表着是否保留空格，只有它为真的情况下才会保留空格。但即使 "),a("code",[t._v("preserveWhitespace")]),t._v(" 常量的值为真，如果当前节点的父节点没有子元素则也不会保留空格，换句话说，编译器只会保留那些"),a("strong",[t._v("不存在于开始标签之后的空格")]),t._v("。而这也体现在了编译器源码的注释中，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" inPre "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isTextTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" text "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("decodeHTMLCached")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// only preserve whitespace if its not right after a starting tag")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" preserveWhitespace "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("默认情况下编译器是会保留空格的，除非你显示的指定编译器选项 "),s("code",[this._v("preserveWhitespace")]),this._v(" 的值为 "),s("code",[this._v("false")]),this._v(" 时才会不保留空格。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、如果文本节点是非空白符，无论其在不在 "),a("code",[t._v("<pre>")]),t._v(" 标签之内，只要其不在文本标签内则就会对文本进行解码，否则不会解码。")]),a("li",[t._v("2、如果文本节点是空白符\n"),a("ul",[a("li",[t._v("2.1、空白符存在于 "),a("code",[t._v("<pre>")]),t._v(" 标签之内，则完全保留")]),a("li",[t._v("2.2、空白符不存在于 "),a("code",[t._v("<pre>")]),t._v(" 标签之内，则根据编译器选项配置来决定是否保留空白，并且只会保留那些不存在于开始标签之后的空白符。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下我们将来到 "),s("code",[this._v("chars")]),this._v(" 钩子函数的最后一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这是一个 "),a("code",[t._v("if")]),t._v(" 条件语句，可以看到该条件语句块内的代码只有当 "),a("code",[t._v("text")]),t._v(" 变量存在时才会执行，所以当编译器选项 "),a("code",[t._v("preserveWhitespace")]),t._v(" 的值为 "),a("code",[t._v("false")]),t._v(" 时，所有空白符都会被忽略，从而导致不会执行如上这段 "),a("code",[t._v("html")]),t._v(" 代码，所以也就没有空白符节点被创建。我们来看一下该 "),a("code",[t._v("if")]),t._v(" 条件语句块内的代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("inVPre "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" text "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseText")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delimiters"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    expression"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expression"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    text\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    text\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们首先来看一下如上代码中 "),s("code",[this._v("if")]),this._v(" 语句的判断条件：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("inVPre "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" text "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseText")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delimiters"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果上面的 "),s("code",[this._v("if")]),this._v(" 语句的判断条件为真则说明：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、当前文本节点不存在于使用 "),s("code",[this._v("v-pre")]),this._v(" 指令的标签之内")]),s("li",[this._v("2、当前文本节点不是空格字符")]),s("li",[this._v("3、使用 "),s("code",[this._v("parseText")]),this._v(" 函数成功解析当前文本节点的内容")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于前两个条件很好理解，关键在于 "),s("code",[this._v("parseText")]),this._v(" 函数能够成功解析文本节点的内容说明了什么，如下模板所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("我的名字是：{{ name }}"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("inVPre "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" text "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseText")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delimiters"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    expression"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expression"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    text\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("并将该文本节点的元素描述对象添加到父级的子节点中，另外我们注意到类型为 "),a("code",[t._v("2")]),t._v(" 的元素描述对象拥有三个特殊的属性，分别是 "),a("code",[t._v("expression")]),t._v("、"),a("code",[t._v("tokens")]),t._v(" 以及 "),a("code",[t._v("text")]),t._v("，其中 "),a("code",[t._v("text")]),t._v(" 就是原始的文本内容，而 "),a("code",[t._v("expression")]),t._v(" 和 "),a("code",[t._v("tokens")]),t._v(" 的值是通过 "),a("code",[t._v("parseText")]),t._v(" 函数解析的结果中读取的。至于 "),a("code",[t._v("parseText")]),t._v(" 函数的具体实现我们会在下一小节中讲解。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果 "),s("code",[this._v("if")]),this._v(" 语句的判断条件失败，则有三种可能：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、文本节点存在于使用了 "),s("code",[this._v("v-pre")]),this._v(" 指令的标签之内")]),s("li",[this._v("2、文本节点是空格字符")]),s("li",[this._v("3、文本节点的文本内容通过 "),s("code",[this._v("parseText")]),this._v(" 函数解析失败")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("只要以上三种情况中，有一种情况出现则代码会来到 "),s("code",[this._v("else...if")]),this._v(" 分支的判断，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    text\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果 "),s("code",[this._v("else...if")]),this._v(" 语句的判断条件成立，则有以下几种可能：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、文本内容不是空格，即 "),a("code",[t._v("text !== ' '")])]),a("li",[t._v("2、如果文本内容是空格，但是该文本节点的父节点还没有子节点(即 "),a("code",[t._v("!children.length")]),t._v(")，这说明当前文本内容就是父节点的第一个子节点")]),a("li",[t._v("3、如果文本内容是空格，并且该文本节点的父节点有子节点，但最后一个子节点不是空格，此时也会执行 "),a("code",[t._v("else...if")]),t._v(" 语句块内的代码")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当文本满足以上条件，就会被当做普通文本节点对待，此时会创建类型为3("),s("code",[this._v("type = 3")]),this._v(")的元素描述对象，并将其添加到父级节点的子节点中。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、如果文本节点存在于 "),a("code",[t._v("v-pre")]),t._v(" 标签中，则会被作为普通文本节点对象")]),a("li",[t._v("2、"),a("code",[t._v("<pre>")]),t._v(" 标签内的空白会被保留")]),a("li",[t._v("3、"),a("code",[t._v("preserveWhitespace")]),t._v(" 只会保留那些不在开始标签之后的空格(说空白也没问题)")]),a("li",[t._v("4、普通文本节点的元素描述对象的类型为 3，即 "),a("code",[t._v("type = 3")])]),a("li",[t._v("5、包含字面量表达式的文本节点不会被作为普通的文本节点对待，而是会使用 "),a("code",[t._v("parseText")]),t._v(" 函数解析它们，并创建一个类型为 2，即 "),a("code",[t._v("type = 2")]),t._v(" 的元素描述对象")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"parsetext-函数解析字面量表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parsetext-函数解析字面量表达式","aria-hidden":"true"}},[this._v("#")]),this._v(" parseText 函数解析字面量表达式")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在上一小节的讲解中我们了解到文本节点的内容是需要通过 "),a("code",[t._v("parseText")]),t._v(" 函数解析的，为什么要使用 "),a("code",[t._v("parseText")]),t._v(" 函数解析文本节点呢？这是因为文本节点中很可能包含字面量表达式，我们所说的字面量表达式指的是使用花括号("),a("code",[t._v("{{}}")]),t._v(")或自定义模板符号所定义的表达式，例如如下 "),a("code",[t._v("<p>")]),t._v(" 标签内的文本：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("我的名字叫：{{name}}"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上 "),a("code",[t._v("<p>")]),t._v(" 标签内的文本在解析阶段会被当做一个普通的文本节点，是该文本节点却包含了 "),a("code",[t._v("Vue")]),t._v(" 的模板语法，所以需要使用 "),a("code",[t._v("parseText")]),t._v(" 对其进行解析，为了让大家更好的理解 "),a("code",[t._v("parseText")]),t._v(" 函数的作用，我们需要先了解 "),a("code",[t._v("parseText")]),t._v(" 函数的最终目的。我们知道模板最终会被编译器编译为渲染函数，而如上文本节点被编译后将以如下表达式存在于渲染函数中：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token string"}},[this._v('"我的名字叫："')]),s("span",{attrs:{class:"token operator"}},[this._v("+")]),s("span",{attrs:{class:"token function"}},[this._v("_s")]),s("span",{attrs:{class:"token punctuation"}},[this._v("(")]),this._v("name"),s("span",{attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到编译的结果分为两部分，第一部分是普通文本："),a("code",[t._v('"我的名字叫："')]),t._v("，另外一部分是把字面量表达式中的表达式提取出来并作为 "),a("code",[t._v("_s")]),t._v(" 函数的参数，这里大家暂时把 "),a("code",[t._v("_s")]),t._v(" 函数理解成与 "),a("code",[t._v("toString")]),t._v(" 函数的功能类似即可，并没有什么特别之处。看到这里相信你已经明白 "),a("code",[t._v("parseText")]),t._v(" 函数的作用了，没错它的作用就是用来识别一段文本节点内容中的普通文本和字面量表达式并把他们按顺序拼接起来的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接下来我们打开 "),a("code",[t._v("src/compiler/parser/text-parser.js")]),t._v(" 文件，可以看到该文件指导出了一个 "),a("code",[t._v("parseText")]),t._v(" 函数，所以这个文件的所有内容都服务于 "),a("code",[t._v("parseText")]),t._v(" 函数，既然 "),a("code",[t._v("parseText")]),t._v(" 函数会识别字面量表达式，那么自然需要一种识别机制，最容易想到的办法就是使用正则表达式，我们在 "),a("code",[t._v("src/compiler/parser/text-parser.js")]),t._v(" 文件中能够看到如下正则常量：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("const")]),this._v(" defaultTagRE "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token regex"}},[this._v("/\\{\\{((?:.|\\n)+?)\\}\\}/g")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("defaultTagRE")]),t._v(" 常量是一个正则，这个正则很简单，用来惰性匹配 "),a("code",[t._v("{{}}")]),t._v(" 里的内容，并捕获 "),a("code",[t._v("{{}}")]),t._v(" 里的内容。根据 "),a("code",[t._v("defaultTagRE")]),t._v(" 常量的名字我们能够知道这是一个默认的正则，大家都知道我们在使用 "),a("code",[t._v("Vue")]),t._v(" 的时候可以通过 "),a("code",[t._v("delimiters")]),t._v(" 选项自定义字面量表达式的分隔符，比如我们可以将其配置成 "),a("code",[t._v("delimiters: ['${', '}']")]),t._v("，正是由于这个原因，所以我们不能一味的使用 "),a("code",[t._v("defaultTagRE")]),t._v(" 正则去识别字面量表达式，我们需要根据开发者对 "),a("code",[t._v("delimiters")]),t._v(" 选项的配置自动生成一个新的正则表达式，并用其匹配文本。我们在 "),a("code",[t._v("text-parser.js")]),t._v(" 文件中能够看到如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" buildRegex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cached")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delimiters "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" open "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" delimiters"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexEscapeRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\\\\$&'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" close "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" delimiters"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexEscapeRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\\\\$&'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("open "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'((?:.|\\\\n)+?)'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" close"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'g'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码定义了 "),s("code",[this._v("buildRegex")]),this._v(" 函数，该函数接收 "),s("code",[this._v("delimiters")]),this._v(" 选项的值作为参数，并返回一个新的正则表达式。我们观察新的正则表达式：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("open "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'((?:.|\\\\n)+?)'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" close"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'g'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以发现，新的正则表达式与 "),a("code",[t._v("defaultTagRE")]),t._v(" 正则中间的部分是一样的，唯一不同的是新的正则使用 "),a("code",[t._v("open")]),t._v(" 和 "),a("code",[t._v("close")]),t._v(" 常量的内容替换掉用了默认的 "),a("code",[t._v("{{}}")]),t._v("，我们以 "),a("code",[t._v("open")]),t._v(" 常量为例讲解该常量的值，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" open "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" delimiters"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexEscapeRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\\\\$&'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("假如开发者指定 "),s("code",[this._v("delimiters")]),this._v(" 选项的值为 "),s("code",[this._v("['${', '}']")]),this._v("，如上代码相当于：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" open "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'${'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexEscapeRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\\\\$&'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外如上代码中存在另外一个正则常量 "),s("code",[this._v("regexEscapeRE")]),this._v("，它的内容如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("const")]),this._v(" regexEscapeRE "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token regex"}},[this._v("/[-.*+?^${}()|[\\]\\/\\\\]/g")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到该正则所匹配的字符都是那些在正则表达式中具有特殊意义的字符，正式因为这些字符在正则表达式中具有特殊意义，所以才需要使用 "),a("code",[t._v("replace")]),t._v(" 方法将匹配到的具有特殊意义的字符进行转义，转义的结果就是在具有特殊意义的字符前面添加字符 "),a("code",[t._v("\\")]),t._v("，所以最终 "),a("code",[t._v("open")]),t._v(" 常量的值将为："),a("code",[t._v("'\\$\\{'")]),t._v("。这里简单说明一下，字符串的 "),a("code",[t._v("replace")]),t._v(" 方法的第二个参数可以是一个字符串，即要替换的文本，如果第二个参数是字符串，则可以使用特殊的字符序列：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("$$ =====> $")]),s("li",[this._v("$& =====> 匹配整个模式的字符串，与RegExp.lastMatch的值相同")]),s("li",[this._v("$' =====> 匹配的子字符串之后的子字符串，与RegExp.rightContext的值相同")]),s("li",[this._v("$` =====> 匹配的子字符串之前的子字符串，与RegExp.leftContext的值相同")]),s("li",[this._v("$n =====> 匹配第n(0 ~ 9)个捕获组的子字符串，如果正则表达式中没有捕获组，则使用空字符串")]),s("li",[this._v("$nn =====> 匹配第nn(01 ~ 99)个捕获组的子字符串，如果正则表达式中没有捕获组，则使用空字符串")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最终 "),s("code",[this._v("buildRegex")]),this._v(" 函数将会构建一个全新的正则：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("open "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'((?:.|\\\\n)+?)'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" close"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'g'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'\\$\\{((?:.|\\\\n)+?)\\}'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'g'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token regex"}},[this._v("/\\$\\{((?:.|\\\\n)+?)\\}/g")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上正则与 "),s("code",[this._v("defaultTagRE")]),this._v(" 正则相比，仅仅是分隔符部分发生了变换，仅此而已。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们将正式进入 "),s("code",[this._v("parseText")]),this._v(" 函数的讲解，如下是 "),s("code",[this._v("parseText")]),this._v(" 函数的签名：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseText")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  delimiters"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TextParseResult "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("该函数接收两个参数，分别是要解析的文本内容以及 "),s("code",[this._v("delimiters")]),this._v(" 选项的值，在 "),s("code",[this._v("parseText")]),this._v(" 函数的开头是这样一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tagRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" delimiters "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("buildRegex")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delimiters"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" defaultTagRE\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("tagRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码定义了 "),a("code",[t._v("tagRE")]),t._v(" 常量，这个常量就是最终用来匹配文本的正则，可以看到如果 "),a("code",[t._v("delimiters")]),t._v(" 选项存在则使用 "),a("code",[t._v("buildRegex")]),t._v(" 函数构建的新正则去匹配文本，否则使用默认的 "),a("code",[t._v("defaultTagRE")]),t._v(" 正则。接着是一段 "),a("code",[t._v("if")]),t._v(" 条件语句，使用 "),a("code",[t._v("tagRE.test(text)")]),t._v(" 对文本内容进行测试，如果测试失败则说明文本中不包含字面量表达式，此时 "),a("code",[t._v("parseText")]),t._v(" 函数会直接返回，因为什么都不需要做。如果测试成功，则代码继续执行，将来到如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tokens "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rawTokens "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" lastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tagRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tokenValue\n"),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tagRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  index "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// push text token")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" lastIndex"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    rawTokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tokenValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastIndex"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tokenValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// tag token")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" exp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFilters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`_s(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("exp"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  rawTokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'@binding'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" exp "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  lastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" index "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面这段代码是一段 "),a("code",[t._v("while")]),t._v(" 循环语句，在 "),a("code",[t._v("while")]),t._v(" 循环语句之前定义了一些常量和变量，这些常量和变量将会在 "),a("code",[t._v("while")]),t._v(" 循环内使用。我们观察 "),a("code",[t._v("while")]),t._v(" 循环的判断条件：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tagRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'{{name}}'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'name'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("index "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index\n"),a("span",{attrs:{class:"token comment"}},[t._v("// push text token")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" lastIndex"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  rawTokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tokenValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastIndex"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tokenValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("rawTokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tokenValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastIndex"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("tokenValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastIndex"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这句代码使用字符串的 "),s("code",[this._v("slice")]),this._v(" 方法对文本进行截取，假如我们还拿上例来说，则如上这句代码相当于：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("tokenValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abc{{name}}'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到这句代码的最终结果就是将原始文本中的 "),a("code",[t._v("'abc'")]),t._v(" 字符片段截取了出来，并保存在变量 "),a("code",[t._v("tokenValue")]),t._v(" 中，我们发现截取出来的字符片段就是字面量表达式前的普通文本，这段普通文本的文本内容除了会保存在 "),a("code",[t._v("tokenValue")]),t._v(" 变量中外还会被 "),a("code",[t._v("push")]),t._v(" 到 "),a("code",[t._v("rawTokens")]),t._v(" 数组中。另外我们注意到在这段 "),a("code",[t._v("if")]),t._v(" 条件语句中还有如下这句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tokenValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到这段代码使用 "),a("code",[t._v("JSON.stringify")]),t._v(" 对截取出来的字符片段处理之后将其 "),a("code",[t._v("push")]),t._v(" 到了 "),a("code",[t._v("tokens")]),t._v(" 数组中。所以经过了这一系列处理之后，"),a("code",[t._v("rawTokens")]),t._v(" 数组和 "),a("code",[t._v("tokens")]),t._v(" 数组分别拥有了一个元素：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("rawTokens "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ntokens "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("\"'abc'\"")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("普通文本已经截取了出来，接下来该处理字面量表达式了，我们继续看 "),s("code",[this._v("while")]),this._v(" 循环内的代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// tag token")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" exp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFilters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`_s(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("exp"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrawTokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'@binding'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" exp "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" index "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" exp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFilters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'name | someFilter'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们在前面的章节中已经讲解过了 "),s("code",[this._v("parseFilters")]),this._v(" 函数的作用，如上代码中最终 "),s("code",[this._v("exp")]),this._v(" 常量的值为字符串 "),s("code",[this._v("\"_f('someFilter')(name)\"")]),this._v("。接着会执行如下这两句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`_s(")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("exp"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrawTokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'@binding'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" exp "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("tokens "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("\"'abc'\"")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'_s(_f(\"someFilter\")(name))'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nrawTokens "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'@binding'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("\"_f('someFilter')(name)\"")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后还有一句代码需要执行，这句代码也是 "),s("code",[this._v("while")]),this._v(" 循环的最后一句代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("lastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" index "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("lastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// lastIndex = 11")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到此时的 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值被更新为 "),a("code",[t._v("11")]),t._v("，恰好指向原始字符串中字符 "),a("code",[t._v("'d'")]),t._v(" 的位置，为下一次 "),a("code",[t._v("while")]),t._v(" 循环做准备。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("while")]),this._v(" 循环的后面是如下这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  rawTokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tokenValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastIndex"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("stringify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tokenValue"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("tokens "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("\"'abc'\"")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'_s(name)'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("\"'def'\"")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nrawTokens "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'@binding'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'_s(name)'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'def'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后 "),s("code",[this._v("parseText")]),this._v(" 函数将返回一个对象，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  expression"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("join")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'+'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rawTokens\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("该对象包含两个属性，即 "),s("code",[this._v("expression")]),this._v(" 和 "),s("code",[this._v("tokens")]),this._v("，拿上例来说，最后 "),s("code",[this._v("parseText")]),this._v(" 函数的返回值将是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  expression"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("\"'abc'+_s(name)+'def'\"")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tokens"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("'@binding'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'_s(name)'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'def'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在如上这个返回值对象中，"),s("code",[this._v("expression")]),this._v(" 属性的值就是最终出现在渲染函数中的代码片段。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"对结束标签的处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对结束标签的处理","aria-hidden":"true"}},[this._v("#")]),this._v(" 对结束标签的处理")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// remove trailing whitespace")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" lastNode "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastNode "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" lastNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" lastNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("inPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pop")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// pop stack")]),t._v("\n  stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("closeElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上这段代码是 "),a("code",[t._v("parseHTML")]),t._v(" 函数的 "),a("code",[t._v("end")]),t._v(" 钩子函数，当解析 "),a("code",[t._v("html")]),t._v(" 字符串遇到结束标签的时候，会调用该钩子函数并传递三个参数，不过我们发现在如上代码中并没有使用到 "),a("code",[t._v("end")]),t._v(" 钩子函数的任何参数，这是因为当遇到结束标签时的处理逻辑根本用不到这些参数。那么在 "),a("code",[t._v("end")]),t._v(" 钩子函数中都需要做哪些事情呢？关于这个问题在之前章节中的讲解中我们多少都提到过了，我们知道每当解析器遇到非一元标签的开始标签时，会将该标签的元素描述对象设置给 "),a("code",[t._v("currentParent")]),t._v(" 变量，代表后续解析过程中遇到的所有标签都应该是 "),a("code",[t._v("currentParent")]),t._v(" 变量所代表的标签的子节点，同时还会将该标签的元素描述对象添加到 "),a("code",[t._v("stack")]),t._v(" 栈中。而当遇到结束标签的时候则意味着 "),a("code",[t._v("currentParent")]),t._v(" 变量所代表的标签以及其子节点全部解析完毕了，此时我们应该把 "),a("code",[t._v("currentParent")]),t._v(" 变量的引用修改为当前标签的父标签，这样我们就将作用域还原给了上层节点，以保证解析过程中正确的父子关系。如下这段代码就是用来完成这些工作的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// pop stack")]),t._v("\nstack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\ncurrentParent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先将当前节点出栈："),s("code",[this._v("stack.length -= 1")]),this._v("，接着读取出栈后 "),s("code",[this._v("stack")]),this._v(" 栈中的最后一个元素作为 "),s("code",[this._v("currentParent")]),this._v(" 变量的值。另外我们注意到有这样一句代码：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token function"}},[this._v("closeElement")]),s("span",{attrs:{class:"token punctuation"}},[this._v("(")]),this._v("element"),s("span",{attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("调用了 "),s("code",[this._v("closeElement")]),this._v(" 函数，"),s("code",[this._v("closeElement")]),this._v(" 函数的调用时机有两个，当遇到一元标签或非一元标签的结束标签时都会调用 "),s("code",[this._v("closeElement")]),this._v(" 函数，该函数的源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("closeElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// check pre state")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inVPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("platformIsPreTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inPre "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// apply post-transforms")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" postTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    postTransforms"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("它的工作由两个，第一个是对数据状态的还原，我们知道每当遇到 "),a("code",[t._v("<pre>")]),t._v(" 标签的开始标签时，解析器会将 "),a("code",[t._v("inPre")]),t._v(" 变量设置为 "),a("code",[t._v("true")]),t._v("，这代表着后续解析所遇到的标签都存在于 "),a("code",[t._v("<pre>")]),t._v(" 标签中，一旦 "),a("code",[t._v("<pre>")]),t._v(" 标签内的所有内容解析完毕后，解析器将会遇到 "),a("code",[t._v("<pre>")]),t._v(" 标签的结束标签，此时 "),a("code",[t._v("platformIsPreTag(element.tag)")]),t._v(" 将会为真，如上代码所示，会将 "),a("code",[t._v("inPre")]),t._v(" 变量的值重置为 "),a("code",[t._v("false")]),t._v("。同样的道理，如果需要的话还会重置 "),a("code",[t._v("inVPre")]),t._v(" 变量的值。"),a("code",[t._v("closeElement")]),t._v(" 函数的第二个作用是调用后置处理转换钩子函数，即如上代码中的 "),a("code",[t._v("for")]),t._v(" 循环部分，这段代码我们在前面的章节中中已经讲解过了，这里不再细说。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们回到 "),s("code",[this._v("end")]),this._v(" 钩子函数，注意如下高亮的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// remove trailing whitespace")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" lastNode "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastNode "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" lastNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" lastNode"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("inPre"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    element"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pop")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// pop stack")]),t._v("\n  stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("closeElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段高亮代码的作用是去除当前元素最后一个空白子节点的，我们在讲解 "),s("code",[this._v("chars")]),this._v(" 钩子函数时了解到："),s("strong",[s("code",[this._v("preserveWhitespace")]),this._v(" 只会保留那些不在开始标签之后的空格(说空白也没问题)")]),this._v("，所以当空白作为标签的最后一个子节点存在时，也会被保留，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("test"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 空白占位 --\x3e")]),t._v("  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码中 "),a("code",[t._v("<span>")]),t._v(" 标签的结束标签与 "),a("code",[t._v("<div>")]),t._v(" 标签的结束标签之间存在一段空白，这段空白将会被保留。但是这段空白的保留对于我们编写代码并没有什么益处，我们在编写 "),a("code",[t._v("html")]),t._v(" 代码的时候经常会为了可读性将代码格式化为多行，如果这段空白被保留那么就可能对布局产生影响，尤其是对行内元素的影响。为了消除这些影响带来的问题，好的做法是将它们去掉，而如上 "),a("code",[t._v("end")]),t._v(" 钩子函数中高亮的代码就是用来完成这个工作的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"注释节点的元素描述对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释节点的元素描述对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 注释节点的元素描述对象")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("解析器是否会解析并保留注释节点，是由 "),a("code",[t._v("shouldKeepComment")]),t._v(" 编译器选项决定的，开发者可以在创建 "),a("code",[t._v("Vue")]),t._v(" 实例的时候通过设置 "),a("code",[t._v("comments")]),t._v(" 选项的值来控制编译器的 "),a("code",[t._v("shouldKeepComment")]),t._v(" 选项。没人情况 "),a("code",[t._v("comments")]),t._v(" 选项的值为 "),a("code",[t._v("false")]),t._v("，即不保留注释，假如将其设置为 "),a("code",[t._v("true")]),t._v("，则当计息期遇到注释节点时会保留该注释节点，此时 "),a("code",[t._v("parseHTML")]),t._v(" 函数的 "),a("code",[t._v("comment")]),t._v(" 钩子函数会被调用，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("comment")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    text"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    isComment"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("comment")]),t._v(" 钩子函数接收注释节点的内容作为参数，在 "),a("code",[t._v("comment")]),t._v(" 钩子函数内所做的事情很简单，就是为当前注释节点创建一个类型为 "),a("code",[t._v("3")]),t._v(" 并且 "),a("code",[t._v("isComment")]),t._v(" 属性为 "),a("code",[t._v("true")]),t._v(" 的元素描述对象，并将其添加到父节点元素描述对象的 "),a("code",[t._v("children")]),t._v(" 数组内。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("大家需要注意的是，普通文本节点与注释节点的元素描述对象的类型是一样的，都是 "),s("code",[this._v("3")]),this._v("，不同的是注释节点的元素描述对象拥有 "),s("code",[this._v("isComment")]),this._v(" 属性，并且该属性的值为 "),s("code",[this._v("true")]),this._v("，目的就是用来与普通文本节点做区分的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"对元素描述对象的总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对元素描述对象的总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 对元素描述对象的总结")])}],!1,null,null,null);s.default=e.exports}}]);